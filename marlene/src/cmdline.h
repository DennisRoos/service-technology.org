/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.1
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

enum enum_type { type_arg_og = 0 , type_arg_OG };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  enum enum_type type_arg;	/**< @brief Parameter for compatibility with Fiona: the parameter '-t og' is equivalent to '--og'..  */
  char * type_orig;	/**< @brief Parameter for compatibility with Fiona: the parameter '-t og' is equivalent to '--og'. original value given at command line.  */
  const char *type_help; /**< @brief Parameter for compatibility with Fiona: the parameter '-t og' is equivalent to '--og'. help description.  */
  char * rulefile_arg;	/**< @brief File containing rules for building the rewriter part of the adapter.  */
  char * rulefile_orig;	/**< @brief File containing rules for building the rewriter part of the adapter original value given at command line.  */
  const char *rulefile_help; /**< @brief File containing rules for building the rewriter part of the adapter help description.  */
  int messagebound_arg;	/**< @brief Sets the message bound (i.e., the maximal number of messages per channel). Values from the range 1..255 are allowed. (default='1').  */
  char * messagebound_orig;	/**< @brief Sets the message bound (i.e., the maximal number of messages per channel). Values from the range 1..255 are allowed. original value given at command line.  */
  const char *messagebound_help; /**< @brief Sets the message bound (i.e., the maximal number of messages per channel). Values from the range 1..255 are allowed. help description.  */
  int asyncif_flag;	/**< @brief Creates an asynchronous interface between adapter engine and controller. (Default is synchronous.) (default=off).  */
  const char *asyncif_help; /**< @brief Creates an asynchronous interface between adapter engine and controller. (Default is synchronous.) help description.  */
  int complementplaces_flag;	/**< @brief Creates complementary places in the engine part of the adapter (only in an intermediate state), in order to avoid unbounded places. Capacity of the places is influenced by the message bound. (default=on).  */
  const char *complementplaces_help; /**< @brief Creates complementary places in the engine part of the adapter (only in an intermediate state), in order to avoid unbounded places. Capacity of the places is influenced by the message bound. help description.  */
  int verbose_flag;	/**< @brief Verbose output. (default=off).  */
  const char *verbose_help; /**< @brief Verbose output. help description.  */
  int veryverbose_flag;	/**< @brief Prints a lot of code information. Has only an effect on debug builds! (default=off).  */
  const char *veryverbose_help; /**< @brief Prints a lot of code information. Has only an effect on debug builds! help description.  */
  char * wendy_arg;	/**< @brief Set the name of the Wendy binary used to build most-permissive partners. (default='wendy').  */
  char * wendy_orig;	/**< @brief Set the name of the Wendy binary used to build most-permissive partners. original value given at command line.  */
  const char *wendy_help; /**< @brief Set the name of the Wendy binary used to build most-permissive partners. help description.  */
  char * config_arg;	/**< @brief Read configuration from file. If no file is given, Marlene first tries to parse file 'marlene.conf' from the sysconf directory (usually '/usr/local/etc'; written in case Marlene was installed) and then from the current working directory. If neither file was found, the standard value for 'wendy' is assumed..  */
  char * config_orig;	/**< @brief Read configuration from file. If no file is given, Marlene first tries to parse file 'marlene.conf' from the sysconf directory (usually '/usr/local/etc'; written in case Marlene was installed) and then from the current working directory. If neither file was found, the standard value for 'wendy' is assumed. original value given at command line.  */
  const char *config_help; /**< @brief Read configuration from file. If no file is given, Marlene first tries to parse file 'marlene.conf' from the sysconf directory (usually '/usr/local/etc'; written in case Marlene was installed) and then from the current working directory. If neither file was found, the standard value for 'wendy' is assumed. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int type_given ;	/**< @brief Whether type was given.  */
  unsigned int rulefile_given ;	/**< @brief Whether rulefile was given.  */
  unsigned int messagebound_given ;	/**< @brief Whether messagebound was given.  */
  unsigned int asyncif_given ;	/**< @brief Whether asyncif was given.  */
  unsigned int complementplaces_given ;	/**< @brief Whether complementplaces was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int veryverbose_given ;	/**< @brief Whether veryverbose was given.  */
  unsigned int wendy_given ;	/**< @brief Whether wendy was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (char * const filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (char * const filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern char *cmdline_parser_type_values[] ;	/**< @brief Possible values for type.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
