/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

enum enum_check { check__NULL = -1, check_arg_none = 0, check_arg_full, check_arg_deadlock, check_arg_statepredicate };
enum enum_store { store__NULL = -1, store_arg_bin = 0, store_arg_bdd, store_arg_sql, store_arg_stl, store_arg_bit, store_arg_bloom, store_arg_bin2, store_arg_tsbin2, store_arg_list, store_arg_compr };
enum enum_search { search__NULL = -1, search_arg_depth = 0, search_arg_breadth, search_arg_findpath };
enum enum_reporter { reporter__NULL = -1, reporter_arg_stream = 0, reporter_arg_socket };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  enum enum_check check_arg;	/**< @brief Check a property (default='none').  */
  char * check_orig;	/**< @brief Check a property original value given at command line.  */
  const char *check_help; /**< @brief Check a property help description.  */
  enum enum_store store_arg;	/**< @brief Store (default='bin').  */
  char * store_orig;	/**< @brief Store original value given at command line.  */
  const char *store_help; /**< @brief Store help description.  */
  int hashfunctions_arg;	/**< @brief Hash functions for the bloom filter (default='2').  */
  char * hashfunctions_orig;	/**< @brief Hash functions for the bloom filter original value given at command line.  */
  const char *hashfunctions_help; /**< @brief Hash functions for the bloom filter help description.  */
  enum enum_search search_arg;	/**< @brief Search strategy (default='depth').  */
  char * search_orig;	/**< @brief Search strategy original value given at command line.  */
  const char *search_help; /**< @brief Search strategy help description.  */
  int path_flag;	/**< @brief Print witness path (default=off).  */
  const char *path_help; /**< @brief Print witness path help description.  */
  int state_flag;	/**< @brief Print witness state (default=off).  */
  const char *state_help; /**< @brief Print witness state help description.  */
  int compressed_flag;	/**< @brief Read a compressed file (default=off).  */
  const char *compressed_help; /**< @brief Read a compressed file help description.  */
  char * writeCompressed_arg;	/**< @brief Write a compressed file (default='compressedOutput').  */
  char * writeCompressed_orig;	/**< @brief Write a compressed file original value given at command line.  */
  const char *writeCompressed_help; /**< @brief Write a compressed file help description.  */
  char * formula_arg;	/**< @brief Random firing of transitions.  */
  char * formula_orig;	/**< @brief Random firing of transitions original value given at command line.  */
  const char *formula_help; /**< @brief Random firing of transitions help description.  */
  int verbose_flag;	/**< @brief Show verbose messages. (default=off).  */
  const char *verbose_help; /**< @brief Show verbose messages. help description.  */
  enum enum_reporter reporter_arg;	/**< @brief Reporter (default='stream').  */
  char * reporter_orig;	/**< @brief Reporter original value given at command line.  */
  const char *reporter_help; /**< @brief Reporter help description.  */
  int outputport_arg;	/**< @brief Output port number (default='5555').  */
  char * outputport_orig;	/**< @brief Output port number original value given at command line.  */
  const char *outputport_help; /**< @brief Output port number help description.  */
  int inputport_arg;	/**< @brief Input port number (default='5556').  */
  char * inputport_orig;	/**< @brief Input port number original value given at command line.  */
  const char *inputport_help; /**< @brief Input port number help description.  */
  char * address_arg;	/**< @brief Hostname or IP for reports (default='localhost').  */
  char * address_orig;	/**< @brief Hostname or IP for reports original value given at command line.  */
  const char *address_help; /**< @brief Hostname or IP for reports help description.  */
  char * remoteTermination_arg;	/**< @brief Allow remote termination (default='goodbye').  */
  char * remoteTermination_orig;	/**< @brief Allow remote termination original value given at command line.  */
  const char *remoteTermination_help; /**< @brief Allow remote termination help description.  */
  int randomWalk_arg;	/**< @brief Random firing of transitions (default='0').  */
  char * randomWalk_orig;	/**< @brief Random firing of transitions original value given at command line.  */
  const char *randomWalk_help; /**< @brief Random firing of transitions help description.  */
  int printNet_flag;	/**< @brief Print the net (default=off).  */
  const char *printNet_help; /**< @brief Print the net help description.  */
  int stats_flag;	/**< @brief Print memory statistics (default=off).  */
  const char *stats_help; /**< @brief Print memory statistics help description.  */
  int timelimit_arg;	/**< @brief Abort LoLA after the given time has passed.  */
  char * timelimit_orig;	/**< @brief Abort LoLA after the given time has passed original value given at command line.  */
  const char *timelimit_help; /**< @brief Abort LoLA after the given time has passed help description.  */
  int markinglimit_arg;	/**< @brief Abort LoLA after the given number of markings have been explored.  */
  char * markinglimit_orig;	/**< @brief Abort LoLA after the given number of markings have been explored original value given at command line.  */
  const char *markinglimit_help; /**< @brief Abort LoLA after the given number of markings have been explored help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int check_given ;	/**< @brief Whether check was given.  */
  unsigned int store_given ;	/**< @brief Whether store was given.  */
  unsigned int hashfunctions_given ;	/**< @brief Whether hashfunctions was given.  */
  unsigned int search_given ;	/**< @brief Whether search was given.  */
  unsigned int path_given ;	/**< @brief Whether path was given.  */
  unsigned int state_given ;	/**< @brief Whether state was given.  */
  unsigned int compressed_given ;	/**< @brief Whether compressed was given.  */
  unsigned int writeCompressed_given ;	/**< @brief Whether writeCompressed was given.  */
  unsigned int formula_given ;	/**< @brief Whether formula was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int reporter_given ;	/**< @brief Whether reporter was given.  */
  unsigned int outputport_given ;	/**< @brief Whether outputport was given.  */
  unsigned int inputport_given ;	/**< @brief Whether inputport was given.  */
  unsigned int address_given ;	/**< @brief Whether address was given.  */
  unsigned int remoteTermination_given ;	/**< @brief Whether remoteTermination was given.  */
  unsigned int randomWalk_given ;	/**< @brief Whether randomWalk was given.  */
  unsigned int printNet_given ;	/**< @brief Whether printNet was given.  */
  unsigned int stats_given ;	/**< @brief Whether stats was given.  */
  unsigned int timelimit_given ;	/**< @brief Whether timelimit was given.  */
  unsigned int markinglimit_given ;	/**< @brief Whether markinglimit was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_check_values[];  /**< @brief Possible values for check. */
extern const char *cmdline_parser_store_values[];  /**< @brief Possible values for store. */
extern const char *cmdline_parser_search_values[];  /**< @brief Possible values for search. */
extern const char *cmdline_parser_reporter_values[];  /**< @brief Possible values for reporter. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
