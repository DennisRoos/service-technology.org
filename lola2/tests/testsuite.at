AT_INIT
AT_COLOR_TESTS



############################################################################
AT_BANNER([LTL])
############################################################################

AT_SETUP([3-Cycle])
AT_CHECK([cp TESTFILES/LTL/cycle.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle.lola --buechi simple.buechi --check=modelchecking --store=stl --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 3 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP

AT_SETUP([3-Cycle + 1 strong fair])
AT_CHECK([cp TESTFILES/LTL/cycle2.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle2.lola --buechi simple.buechi --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP

AT_SETUP([3-Cycle + 1 not strong fair])
AT_CHECK([cp TESTFILES/LTL/cycle3.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle3.lola --buechi simple.buechi --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP

AT_SETUP([3-Cycle + 1 strong fair (cmplx)])
AT_CHECK([cp TESTFILES/LTL/cycle2.lola .])
AT_CHECK([cp TESTFILES/LTL/cycleprop.buechi .])
AT_CHECK([LOLA cycle2.lola --buechi cycleprop.buechi --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP

AT_SETUP([2x3-Cycle + 1 strong fair (iterate SCC)])
AT_CHECK([cp TESTFILES/LTL/cycle4.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle4.lola --formula='"FORMULA EVENTUALLY s4 = 1 ;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 7 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP


AT_SETUP([2x3-Cycle + 1 strong fair (multiple SCC)])
AT_CHECK([cp TESTFILES/LTL/cycle6.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle6.lola --formula='"FORMULA EVENTUALLY s4 = 1 ;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 7 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP



AT_SETUP([3-Cycle + 1 strong fair (formula)])
AT_CHECK([cp TESTFILES/LTL/cycle3.lola .])
AT_CHECK([LOLA cycle3.lola --formula='"FORMULA ALWAYS s4 = 0 OR EVENTUALLY s1 = 1;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP


AT_SETUP([3-Cycle (wrong formula)])
AT_CHECK([cp TESTFILES/LTL/cycle.lola .])
AT_CHECK([LOLA cycle.lola --formula='"FORMULA ALWAYS s1 = 0 AND EVENTUALLY s1 = 1;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 3 markings" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP


AT_SETUP([2x3-Cycle + 1 strong fair (witness path)])
AT_CHECK([cp TESTFILES/LTL/cycle5.lola .])
AT_CHECK([cp TESTFILES/LTL/simple.buechi .])
AT_CHECK([LOLA cycle5.lola --formula='"FORMULA EVENTUALLY s4 = 1 ;"' --check=modelchecking --store=prefix --encoder=bit --path -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 7 markings" stderr])
AT_CHECK([GREP -q "lola: t23" stderr])
AT_CHECK([GREP -q "lola: t31" stderr])
AT_CHECK([GREP -q "lola: toMirror" stderr])
AT_CHECK([GREP -q "lola: ===begin of cycle===" stderr])
AT_CHECK([GREP -q "lola: t12m" stderr])
AT_CHECK([GREP -q "lola: t21m" stderr])
AT_KEYWORDS(ltl)
AT_CLEANUP


############################################################################
AT_BANNER([CTL])
############################################################################

AT_SETUP([3-Cycle])
AT_CHECK([cp TESTFILES/LTL/cycle.lola .])
AT_CHECK([LOLA cycle.lola --formula='"FORMULA EXPATH ALWAYS s4 = 0;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 3 markings" stderr])
AT_KEYWORDS(ctl)
AT_CLEANUP

AT_SETUP([3-Cycle + 1 strong fair])
AT_CHECK([cp TESTFILES/LTL/cycle2.lola .])
AT_CHECK([LOLA cycle2.lola --formula='"FORMULA EXPATH ALWAYS s4 = 0;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ctl)
AT_CLEANUP

AT_SETUP([3-Cycle + 1 not strong fair])
AT_CHECK([cp TESTFILES/LTL/cycle3.lola .])
AT_CHECK([LOLA cycle3.lola --formula='"FORMULA EXPATH ALWAYS s4 = 0;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 4 markings" stderr])
AT_KEYWORDS(ctl)
AT_CLEANUP

AT_SETUP([2x3-Cycle + 1 strong fair (iterate SCC)])
AT_CHECK([cp TESTFILES/LTL/cycle4.lola .])
AT_CHECK([LOLA cycle4.lola --formula='"FORMULA EXPATH ALWAYS s4 = 0;"' --check=modelchecking --store=prefix --encoder=bit -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 7 markings" stderr])
AT_KEYWORDS(ctl)
AT_CLEANUP


AT_SETUP([2x3-Cycle + 1 strong fair (witness path)])
AT_CHECK([cp TESTFILES/LTL/cycle5.lola .])
AT_CHECK([LOLA cycle5.lola --formula='"FORMULA EXPATH ALWAYS s4 = 0;"' --check=modelchecking --store=prefix --encoder=bit --path -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 7 markings" stderr])
AT_CHECK([GREP -q "lola: t23" stderr])
AT_CHECK([GREP -q "lola: t31" stderr])
AT_CHECK([GREP -q "lola: toMirror" stderr])
AT_CHECK([GREP -q "lola: t12m" stderr])
AT_CHECK([GREP -q "lola: t21m" stderr])
AT_KEYWORDS(ctl)
AT_CLEANUP


############################################################################
AT_BANNER([Command-line parameters])
############################################################################

AT_SETUP([Help output])
AT_CHECK([LOLA --help],0,ignore)
AT_CHECK([LISTENER --help],0,ignore)
AT_CHECK([KILLER --help],0,ignore)
AT_KEYWORDS(commandline)
AT_CLEANUP

AT_SETUP([Version output])
AT_CHECK([LOLA --version],0,ignore)
AT_CHECK([LISTENER --version],0,ignore)
AT_CHECK([KILLER --version],0,ignore)
AT_KEYWORDS(commandline)
AT_CLEANUP

AT_SETUP([Wrong parameter])
AT_CHECK([LOLA --unknownparameter],2,ignore,stderr)
AT_CHECK([GREP -q "lola: invalid command-line parameter(s)" stderr])
AT_KEYWORDS(commandline)
AT_CLEANUP


############################################################################
AT_BANNER([File input/output])
############################################################################

AT_SETUP([Piping from stdin (1/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([cat garavel.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Piping from stdin (2/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA < garavel.lola],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from file])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from two files])
AT_DATA(netfile1,[PLACE p1;
MARKING p1;
])
AT_DATA(netfile2,[TRANSITION t1
CONSUME p1;
PRODUCE p1;
])
AT_CHECK([LOLA netfile1 netfile2 -v],0,ignore,stderr)
AT_CHECK([GREP -q "lola: finished parsing" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from two files (error)])
AT_DATA(netfile1,[PLACE p1;
MARKING p1;
])
AT_CHECK([LOLA netfile1 netfile2 -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file netfile2" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from nonexisting file])
AT_CHECK([LOLA garavel.lola -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file garavel.lola" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from nonreadable file])
AT_DATA(netfile,[
])
AT_CHECK([chmod a-r netfile])
AT_CHECK([LOLA netfile -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file netfile" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Writing compressed files])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA --writeCompressed garavel.lola],0,ignore,stderr)
AT_CHECK([GREP -q -E "485 419" compressedOutput.net])
AT_CHECK([GREP -q -E "776" compressedOutput.net])
AT_CHECK([GREP -q -E "485" compressedOutput.names])
AT_CHECK([GREP -q -E "776" compressedOutput.names])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Writing and reading compressed files (1/4)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([LOLA --writeCompressed phils5.lola],0,ignore,stderr)
AT_CHECK([LOLA --compressed --check=deadlock -v < compressedOutput.net],0,ignore,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Writing and reading compressed files (2/4)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([LOLA --writeCompressed phils5.lola],0,ignore,stderr)
AT_CHECK([LOLA --compressed compressedOutput.net --check=deadlock -v],0,ignore,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Writing and reading compressed files (3/4)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([cp TESTFILES/garavel.task .])
AT_CHECK([LOLA --writeCompressed garavel.lola],0,ignore,stderr)
AT_CHECK([LOLA --compressed compressedOutput.net compressedOutput.names --check=modelchecking --formula=garavel.task -v],0,ignore,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Writing and reading compressed files (4/4)])
AT_CHECK([cp TESTFILES/syntax_full.lola .])
AT_CHECK([LOLA --writeCompressed syntax_full.lola],0,ignore,stderr)
AT_CHECK([LOLA --compressed compressedOutput.net compressedOutput.names --check=deadlock -v],0,ignore,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP


############################################################################
AT_BANNER([Syntax])
############################################################################

AT_SETUP([Minimal syntactic correct net])
AT_CHECK([cp TESTFILES/syntax_min.lola .])
AT_CHECK([cat syntax_min.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([All syntactic features])
AT_CHECK([cp TESTFILES/syntax_full.lola .])
AT_CHECK([cat syntax_full.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Double arc])
AT_DATA(netfile,[PLACE p1, p2, p3;
MARKING p1;
TRANSITION t1
CONSUME p1:1;
PRODUCE p1:1;
TRANSITION t2
CONSUME p2:2;
PRODUCE p2:1;
TRANSITION t3
CONSUME p3:1;
PRODUCE p3:2;
])
AT_CHECK([cat netfile | LOLA -v],0,ignore,stderr)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([UTF8 input])
AT_CHECK([cp TESTFILES/syntax_utf8.lola .])
AT_CHECK([cat syntax_utf8.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Generic syntax error])
AT_DATA(netfile,[foobar;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: syntax error, unexpected" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Duplicate place])
AT_DATA(netfile,[PLACE p1, p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p1' name used twice" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Mark nonexisting place (1/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p2: 1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Mark nonexisting place (2/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p2;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reference nonexisting place (1/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p1: 1;
TRANSITION t1
CONSUME p2: 1;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reference nonexisting place (2/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p1: 1;
TRANSITION t1
CONSUME p2;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Duplicate transition])
AT_DATA(netfile,[PLACE p1;
MARKING p1;
TRANSITION t1
CONSUME p1;
PRODUCE p1;
TRANSITION t1
CONSUME p1;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: transition name 't1' used twice" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

############################################################################
AT_BANNER([Formula Input])
############################################################################

AT_SETUP([Syntax error: unknown operator])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula=foo --verbose],2,stdout,stderr)
AT_CHECK([GREP -q "lola: syntax error, unexpected IDENTIFIER, expecting _FORMULA_" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Syntax error: unknown place])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA foo > 1;"' --verbose],2,stdout,stderr)
AT_CHECK([GREP -q "lola: place foo unknown" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: TRUE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA TRUE;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 0 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: FALSE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA FALSE;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 0 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: <=])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: <])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 < 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: >])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 > 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: >=])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: =])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 = 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: !=])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 != 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: AND])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1 AND p.2 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: OR])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1 OR p.2 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: NOT])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT p.1 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: XOR])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1 XOR p.2 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 4 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: ->])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1 -> p.2 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Language constructs: <->])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA p.1 >= 1 <-> p.2 >= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 4 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: REACHABLE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA REACHABLE p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: INVARIANT])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA INVARIANT p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: IMPOSSIBLE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA IMPOSSIBLE p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: ALLPATH ALWAYS])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA ALLPATH ALWAYS p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: ALLPATH ALWAYS NOT])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA ALLPATH ALWAYS NOT p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Temporal operators: EXPATH EVENTUALLY])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA EXPATH EVENTUALLY p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP


AT_SETUP([Tautologies: NOT TRUE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT TRUE;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 0 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT FALSE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT FALSE;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 0 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT NOT])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT NOT p.1 < 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT AND])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT (p.1 < 1 AND p.2 > 1);"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT OR])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT (p.1 < 1 OR p.2 > 1);"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 2 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT <])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA NOT p.1 < 1;
])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT p.1 < 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: NOT <=])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA NOT p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: AGAG])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA ALLPATH ALWAYS ALLPATH ALWAYS p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([Tautologies: EFEF])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --formula='"FORMULA EXPATH EVENTUALLY EXPATH EVENTUALLY p.1 <= 1;"' --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 1 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP

AT_SETUP([complex formula])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA p.1 != 1 AND (3 * p.1 + 2 * p.2) >= (4 * p.3) - (1 * p.1);
])
AT_CHECK([LOLA garavel.lola --formula=formula.task --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "lola: processed formula with 3 atomic propositions" stderr])
AT_KEYWORDS(formula)
AT_CLEANUP


############################################################################
AT_BANNER([Reporter])
############################################################################

AT_SETUP([ReporterStream: stdout])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=stream --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "reading net from garavel.lola" stderr])
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterStream: file])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=stream --verbose >& output],0)
AT_CHECK([test -f output])
AT_CHECK([GREP -q "reading net from garavel.lola" output])
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterSocket: sending only (1/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=socket],0,ignore,ignore)
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterSocket: sending only (2/2)])
AT_CHECK([LOLA garavel.lola --reporter=socket],2,ignore,ignore)
AT_KEYWORDS(reporter)
AT_CLEANUP

#AT_SETUP([ReporterSocket: sending/receiving])
#AT_CHECK([cp TESTFILES/garavel.lola .])
#AT_CHECK([LISTENER 2> listener.log &],0)
#AT_CHECK([LOLA garavel.lola --reporter=socket --verbose],0,ignore,ignore)
#AT_CHECK([killall listener],0,stdout,stderr)
#AT_CHECK([GREP -q "lola: caught signal" listener.log])
#AT_CHECK([GREP -q "finished parsing" listener.log])
#AT_KEYWORDS(reporter)
#AT_CLEANUP

#AT_SETUP([ReporterSocket: killer thread])
#AT_CHECK([cp TESTFILES/garavel.lola .])
#AT_CHECK([LOLA garavel.lola --randomWalk --remoteTermination & 2> /dev/null],0,ignore,ignore)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_KEYWORDS(reporter)
#AT_CLEANUP


############################################################################
AT_BANNER([Debugging])
############################################################################

AT_SETUP([Print net])
AT_CHECK([cp TESTFILES/syntax_full.lola .])
AT_CHECK([LOLA syntax_full.lola --printNet],0,stdout)
AT_CHECK([GREP -q "6 places" stdout])
AT_CHECK([GREP -q "5  transitions" stdout])
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Random walk])
AT_CHECK([cp TESTFILES/process.lola .])
AT_CHECK([LOLA process.lola --randomWalk=10000],0,stdout)
AT_CHECK([GREP -q "firing" stdout])
AT_CHECK([GREP -q "\*\*\*\*\*\*\*\*\*\*\*\*\*" stdout])
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Simple property])
AT_CHECK([cp TESTFILES/process.lola .])
AT_CHECK([LOLA process.lola --check=full],0,stdout,stderr)
AT_CHECK([GREP -q "result: no" stderr])
AT_CHECK([GREP -q "6 markings, 5 edges" stderr])
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Check nothing])
AT_CHECK([cp TESTFILES/process.lola .])
AT_CHECK([LOLA process.lola --check=none],0)
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Significant places])
AT_CHECK([cp TESTFILES/test_significant.lola .])
AT_CHECK([LOLA test_significant.lola --check=full -v],0,stdout,stderr)
AT_CHECK([GREP -q "3 places, 1 transitions, 0 significant places" stderr])
AT_KEYWORDS(debug)
AT_CLEANUP

############################################################################
AT_BANNER([Stores])
############################################################################

# AT_CHECK_RUNLOLA([Net Name], [Filename], [--check=], [--store=], [--encoder=], [bucketing], [--threads=], [--hashfunctions=], expected answer, expected number of markings, expected number of edges)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[bit],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[copy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[simplecompressed],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[fullcopy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[bit],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[copy],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[simplecompressed],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[fullcopy],[--bucketing],1,2,[no],242,805)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[bit],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[copy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[simplecompressed],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[fullcopy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[bit],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[copy],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[simplecompressed],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[fullcopy],[--bucketing],1,2,[no],242,805)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[bit],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[copy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[simplecompressed],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[fullcopy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[bit],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[copy],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[simplecompressed],[--bucketing],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[fullcopy],[--bucketing],1,2,[no],242,805)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[bit],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[copy],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[simplecompressed],[],1,2,[no],242,805)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[fullcopy],[],1,2,[no],242,805)


AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[bit],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[copy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[simplecompressed],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[fullcopy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[bit],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[copy],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[simplecompressed],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[fullcopy],[--bucketing],1,2,[no],2048,23040)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[bit],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[copy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[simplecompressed],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[fullcopy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[bit],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[copy],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[simplecompressed],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[fullcopy],[--bucketing],1,2,[no],2048,23040)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[bit],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[copy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[simplecompressed],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[fullcopy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[bit],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[copy],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[simplecompressed],[--bucketing],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[fullcopy],[--bucketing],1,2,[no],2048,23040)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[bit],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[copy],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[simplecompressed],[],1,2,[no],2048,23040)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[fullcopy],[],1,2,[no],2048,23040)



AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[bit],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[copy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[simplecompressed],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[fullcopy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[bit],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[copy],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[simplecompressed],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[fullcopy],[--bucketing],1,2,[no],47905,137280)

AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[bit],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[copy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[simplecompressed],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[fullcopy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[bit],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[copy],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[simplecompressed],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[fullcopy],[--bucketing],1,2,[no],47905,137280)

# AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[bit],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[copy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[simplecompressed],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[fullcopy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[bit],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[copy],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[simplecompressed],[--bucketing],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[fullcopy],[--bucketing],1,2,[no],47905,137280)

AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[bit],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[copy],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[simplecompressed],[],1,2,[no],47905,137280)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[fullcopy],[],1,2,[no],47905,137280)



AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[bit],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[copy],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[simplecompressed],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[fullcopy],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[bit],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[copy],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[simplecompressed],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[fullcopy],[--bucketing],1,2,[no],2546432,24460016)

# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[bit],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[copy],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[simplecompressed],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[fullcopy],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[bit],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[copy],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[simplecompressed],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[fullcopy],[--bucketing],1,2,[no],2546432,24460016)

# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[bit],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[copy],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[simplecompressed],[],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[fullcopy],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[bit],[--bucketing],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[copy],[--bucketing],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[simplecompressed],[--bucketing],1,2,[no],2546432,24460016)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[fullcopy],[--bucketing],1,2,[no],2546432,24460016)

AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[bit],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[copy],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[simplecompressed],[],1,2,[no],2546432,24460016)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[fullcopy],[],1,2,[no],2546432,24460016)




############################################################################
AT_BANNER([Parallel Stores])
############################################################################

# AT_CHECK_RUNLOLA([Net Name], [Filename], [--check=], [--store=], [--encoder=], [bucketing], [--threads=], [--hashfunctions=], expected answer, expected number of markings, leave empty!)
# The last field has to be left empty because parallel exploration can't guarante to visit any specific number of edges.

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[bit],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[copy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[simplecompressed],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[fullcopy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[bit],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[copy],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[simplecompressed],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[prefix],[fullcopy],[--bucketing],4,2,[no],242,)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[bit],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[copy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[simplecompressed],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[fullcopy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[bit],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[copy],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[simplecompressed],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[stl],[fullcopy],[--bucketing],4,2,[no],242,)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[bit],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[copy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[simplecompressed],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[fullcopy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[bit],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[copy],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[simplecompressed],[--bucketing],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bloom],[fullcopy],[--bucketing],4,2,[no],242,)

AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[bit],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[copy],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[simplecompressed],[],4,2,[no],242,)
AT_CHECK_RUNLOLA([5 Philosophers],[phils5.lola],[full],[bin],[fullcopy],[],4,2,[no],242,)


AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[bit],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[copy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[simplecompressed],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[fullcopy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[bit],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[copy],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[simplecompressed],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[prefix],[fullcopy],[--bucketing],4,2,[no],2048,)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[bit],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[copy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[simplecompressed],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[fullcopy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[bit],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[copy],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[simplecompressed],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[stl],[fullcopy],[--bucketing],4,2,[no],2048,)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[bit],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[copy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[simplecompressed],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[fullcopy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[bit],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[copy],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[simplecompressed],[--bucketing],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bloom],[fullcopy],[--bucketing],4,2,[no],2048,)

AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[bit],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[copy],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[simplecompressed],[],4,2,[no],2048,)
AT_CHECK_RUNLOLA([Eratosthenes],[eratosthenes-020.pnml.lola],[full],[bin],[fullcopy],[],4,2,[no],2048,)



AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[bit],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[copy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[simplecompressed],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[fullcopy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[bit],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[copy],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[simplecompressed],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[prefix],[fullcopy],[--bucketing],4,2,[no],47905,)

AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[bit],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[copy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[simplecompressed],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[fullcopy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[bit],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[copy],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[simplecompressed],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[stl],[fullcopy],[--bucketing],4,2,[no],47905,)

# AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[bit],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[copy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[simplecompressed],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[fullcopy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[bit],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[copy],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[simplecompressed],[--bucketing],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bloom],[fullcopy],[--bucketing],4,2,[no],47905,)

AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[bit],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[copy],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[simplecompressed],[],4,2,[no],47905,)
AT_CHECK_RUNLOLA([4state],[4state.lola],[full],[bin],[fullcopy],[],4,2,[no],47905,)



AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[bit],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[copy],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[simplecompressed],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[fullcopy],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[bit],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[copy],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[simplecompressed],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[prefix],[fullcopy],[--bucketing],4,2,[no],2546432,)

# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[bit],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[copy],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[simplecompressed],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[fullcopy],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[bit],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[copy],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[simplecompressed],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[stl],[fullcopy],[--bucketing],4,2,[no],2546432,)

# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[bit],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[copy],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[simplecompressed],[],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[fullcopy],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[bit],[--bucketing],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[copy],[--bucketing],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[simplecompressed],[--bucketing],4,2,[no],2546432,)
# AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bloom],[fullcopy],[--bucketing],4,2,[no],2546432,)

AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[bit],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[copy],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[simplecompressed],[],4,2,[no],2546432,)
AT_CHECK_RUNLOLA([Kanban5 (5-safe)],[Kanban5.5safe.pnml.lola],[full],[bin],[fullcopy],[],4,2,[no],2546432,)




############################################################################
AT_BANNER([Collect Stored States])
############################################################################

AT_SETUP([STL Store])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([LOLA phils5.lola --check=full --store=stl --encoder=fullcopy -v --testStateForeach],0,stdout,stderr)
AT_CHECK([GREP -q "lola: 242 markings, 805 edges" stderr])
AT_CHECK([GREP -q "lola: states collected: 242" stderr])
AT_CHECK([GREP "lola: \[[State\]]" stderr | sort -u | wc -l | GREP -q "242"])
AT_KEYWORDS(collectStates)
AT_CLEANUP

AT_SETUP([Suffix Tree Store])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([LOLA phils5.lola --check=full --store=bin --encoder=fullcopy -v --testStateForeach],0,stdout,stderr)
AT_CHECK([GREP -q "lola: 242 markings, 805 edges" stderr])
AT_CHECK([GREP -q "lola: states collected: 242" stderr])
AT_CHECK([GREP "lola: \[[State\]]" stderr | sort -u | wc -l | GREP -q "242"])
AT_KEYWORDS(collectStates)
AT_CLEANUP

AT_SETUP([STL vs. Suffix Tree Store])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([LOLA phils5.lola --check=full --store=stl --encoder=fullcopy -v --testStateForeach],0,stdout,stderr)
AT_CHECK([mv stdout lola.out])
AT_CHECK([GREP "lola: \[[State\]]" stderr | sort],0,stdout)
AT_CHECK([mv stdout states.stl])
AT_CHECK([mv stderr lola.err.stl])
AT_CHECK([LOLA phils5.lola --check=full --store=bin --encoder=fullcopy -v --testStateForeach],0,stdout,stderr)
AT_CHECK([mv stdout lola.out2])
AT_CHECK([GREP "lola: \[[State\]]" stderr | sort],0,stdout)
AT_CHECK([diff stdout states.stl])
AT_KEYWORDS(collectStates)
AT_CLEANUP



############################################################################
AT_BANNER([Deadlock])
############################################################################

AT_SETUP([Phils 10])
AT_CHECK([cp TESTFILES/phils10.lola .])
AT_CHECK([LOLA phils10.lola --check=deadlock --store=bin --encoder=bit -v --state --path],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: witness state:" stderr])
AT_CHECK([GREP -q "lola: hl.1 : 1" stderr])
AT_CHECK([GREP -q "lola: witness path:" stderr])
AT_CHECK([GREP -q "lola: tl.\[[y=9\]]" stderr])
AT_CHECK([GREP -q "lola: 29 markings, 37 edges" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP

AT_SETUP([Kanban 5])
AT_CHECK([cp TESTFILES/Kanban5.pnml.lola .])
AT_CHECK([LOLA Kanban5.pnml.lola --check=deadlock -v --state --path],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: witness state:" stderr], 1)
AT_CHECK([GREP -q "lola: witness path:" stderr], 1)
AT_CHECK([GREP -q "lola: 2573 markings, 4302 edges" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP


AT_SETUP([Phils 10 (parallel)])
AT_CHECK([cp TESTFILES/phils10.lola .])
AT_CHECK([LOLA phils10.lola --check=deadlock --store=bin --encoder=bit -v --state --path --threads=4 ],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: witness state:" stderr])
AT_CHECK([GREP -q "lola: hl.1 : 1" stderr])
AT_CHECK([GREP -q "lola: witness path:" stderr])
AT_CHECK([GREP -q "lola: tl.\[[y=9\]]" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP

AT_SETUP([Kanban 5 (parallel)])
AT_CHECK([cp TESTFILES/Kanban5.pnml.lola .])
AT_CHECK([LOLA Kanban5.pnml.lola --store=bin --encoder=bit --check=deadlock -v --state --path --threads=4],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: witness state:" stderr], 1)
AT_CHECK([GREP -q "lola: witness path:" stderr], 1)
AT_KEYWORDS(deadlock)
AT_CLEANUP


############################################################################
AT_BANNER([State Predicate])
############################################################################

AT_SETUP([Garavel])
AT_CHECK([cp TESTFILES/garavel.lola TESTFILES/garavel.task .])
AT_CHECK([LOLA garavel.lola --formula=garavel.task --check=modelchecking -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_CHECK([GREP -q "lola: 17 markings, 16 edges" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([positive formula])
AT_CHECK([cp TESTFILES/phils5.lola TESTFILES/philpos.task .])
AT_CHECK([LOLA phils5.lola --formula=philpos.task --check=modelchecking -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


AT_SETUP([Garavel (parallel)])
AT_CHECK([cp TESTFILES/garavel.lola TESTFILES/garavel.task .])
AT_CHECK([LOLA garavel.lola --formula=garavel.task --check=modelchecking -v --store=bin --encoder=bit --threads=4],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([positive formula (parallel)])
AT_CHECK([cp TESTFILES/phils5.lola TESTFILES/philpos.task .])
AT_CHECK([LOLA phils5.lola --formula=philpos.task --check=modelchecking -v --store=bin --encoder=bit --threads=4],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


############################################################################
AT_BANNER([Find Path])
############################################################################

AT_SETUP([Garavel])
AT_CHECK([cp TESTFILES/garavel.lola TESTFILES/garavel.task .])
AT_CHECK([LOLA garavel.lola --formula=garavel.task --search=findpath --check=modelchecking -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP

AT_SETUP([Garavel (parallel)])
AT_CHECK([cp TESTFILES/garavel.lola TESTFILES/garavel.task .])
AT_CHECK([LOLA garavel.lola --formula=garavel.task --search=findpath --check=modelchecking -v --store=bin --encoder=bit --threads=4],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: yes" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP


############################################################################
AT_BANNER([Full])
############################################################################

AT_SETUP([Phils 10])
AT_CHECK([cp TESTFILES/phils10.lola .])
AT_CHECK([LOLA phils10.lola --check=full -v],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 59048 markings, 393650 edges" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP

AT_SETUP([Phils 10 (parallel)])
AT_CHECK([cp TESTFILES/phils10.lola .])
AT_CHECK([LOLA phils10.lola --check=full -v --threads=4 --store=bin --encoder=bit],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 59048 markings" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP

AT_SETUP([Kanban 5 (parallel)])
AT_CHECK([cp TESTFILES/Kanban5.pnml.lola .])
AT_CHECK([LOLA Kanban5.pnml.lola --check=full  -v --threads=4 --store=bin --encoder=bit],0,stdout,stderr)
AT_CHECK([GREP -q "lola: result: no" stderr])
AT_CHECK([GREP -q "lola: 2546432 markings" stderr])
AT_KEYWORDS(deadlock)
AT_CLEANUP

############################################################################
AT_BANNER([Initially Satisfied Predicates])
############################################################################

AT_SETUP([State predicate initially satisfied])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsinitial.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsinitial.task phils5.lola -v],0,ignore,stderr)
AT_CHECK([GREP -q -E "0 markings, 0 edges" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([Findpath initially satisfied])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsinitial.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsinitial.task --search=findpath phils5.lola -v],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP

AT_SETUP([TRUE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA TRUE;
])
AT_CHECK([LOLA garavel.lola --check=modelchecking --formula=formula.task --verbose],0,stdout,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


AT_SETUP([State predicate initially satisfied (parallel)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsinitial.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsinitial.task phils5.lola -v --threads=4 --store=bin --encoder=bit],0,ignore,stderr)
AT_CHECK([GREP -q -E "0 markings, 0 edges" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([Findpath initially satisfied (parallel)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsinitial.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsinitial.task --search=findpath phils5.lola -v --threads=4 --store=bin --encoder=bit],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP

AT_SETUP([TRUE (parallel)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA TRUE;
])
AT_CHECK([LOLA garavel.lola --check=modelchecking --formula=formula.task --verbose --threads=4 --store=bin --encoder=bit],0,stdout,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


############################################################################
AT_BANNER([Unsatisfiable Predicates])
############################################################################

AT_SETUP([State predicate unsatisfiable])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsunsat.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsunsat.task phils5.lola -v],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([Findpath unsatisfiable])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsunsat.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsunsat.task --search=findpath --retrylimit=100 --depthlimit=1000 phils5.lola -v],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP

AT_SETUP([FALSE])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA FALSE;
])
AT_CHECK([LOLA garavel.lola --check=modelchecking --formula=formula.task --verbose],0,stdout,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


AT_SETUP([State predicate unsatisfiable (parallel)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsunsat.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsunsat.task phils5.lola -v --threads=4 --store=bin --encoder=bit],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP

AT_SETUP([Findpath unsatisfiable (parallel)])
AT_CHECK([cp TESTFILES/phils5.lola .])
AT_CHECK([cp TESTFILES/philsunsat.task .])
AT_CHECK([LOLA --check=modelchecking --formula=philsunsat.task --search=findpath --retrylimit=100 --depthlimit=1000 phils5.lola -v --threads=4 --store=bin --encoder=bit],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(findpath)
AT_CLEANUP

AT_SETUP([FALSE (parallel)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_DATA(formula.task,[FORMULA FALSE;
])
AT_CHECK([LOLA garavel.lola --check=modelchecking --formula=formula.task --verbose --threads=4 --store=bin --encoder=bit],0,stdout,stderr)
AT_CHECK([GREP -q -E "result: no" stderr])
AT_KEYWORDS(statepredicate)
AT_CLEANUP


############################################################################
AT_BANNER([Stubborn])
############################################################################

AT_SETUP(disabled tscc in deadlock stubborn sets)
AT_CHECK([cp TESTFILES/m.lola .])
AT_CHECK([LOLA --check=deadlock m.lola -v],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(stubborn)
AT_CLEANUP

AT_SETUP(disabled tscc in deadlock stubborn sets (parallel))
AT_CHECK([cp TESTFILES/m.lola .])
AT_CHECK([LOLA --check=deadlock m.lola -v --threads=4 --store=bin --encoder=bit],0,ignore,stderr)
AT_CHECK([GREP -q -E "result: yes" stderr])
AT_KEYWORDS(stubborn)
AT_CLEANUP



############################################################################
AT_BANNER([Memory Management])
############################################################################

# AT_ST_CHECK_MEMORY([Net Name], [Filename], [--check=], [--store=], [--threads=])
# E.G.: AT_ST_CHECK_MEMORY([Garavel], [garavel.lola], [none], [bin], 1)

AT_ST_CHECK_MEMORY([Phils 10], [phils10.lola], [full], [bin], [copy], 4)
AT_ST_CHECK_MEMORY([Phils 10], [phils10.lola], [full], [bin], [simplecompressed], 4)
AT_ST_CHECK_MEMORY([Phils 10], [phils10.lola], [full], [bin], [bit], 4)

# AT_LTL_CHECK_MEMORY([Phils 10], [cycle.lola], [simple.buechi], [psbstl])
