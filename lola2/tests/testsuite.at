AT_INIT
AT_COLOR_TESTS

############################################################################
AT_BANNER([Command-line parameters])
############################################################################

AT_SETUP([Help output])
AT_CHECK([LOLA --help],0,ignore)
AT_CHECK([LISTENER --help],0,ignore)
AT_CHECK([KILLER --help],0,ignore)
AT_KEYWORDS(commandline)
AT_CLEANUP

AT_SETUP([Version output])
AT_CHECK([LOLA --version],0,ignore)
AT_CHECK([LISTENER --version],0,ignore)
AT_CHECK([KILLER --version],0,ignore)
AT_KEYWORDS(commandline)
AT_CLEANUP

AT_SETUP([Wrong parameter])
AT_CHECK([LOLA --unknownparameter],2,ignore,stderr)
AT_CHECK([GREP -q "lola: invalid command-line parameter(s)" stderr])
AT_KEYWORDS(commandline)
AT_CLEANUP


############################################################################
AT_BANNER([File input/output])
############################################################################

AT_SETUP([Piping from stdin (1/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([cat garavel.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Piping from stdin (2/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA < garavel.lola],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from file])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from two files])
AT_DATA(netfile1,[PLACE p1;
MARKING p1;
])
AT_DATA(netfile2,[TRANSITION t1
CONSUME p1;
PRODUCE p1;
])
AT_CHECK([LOLA netfile1 netfile2 -v],0,ignore,stderr)
AT_CHECK([GREP -q "lola: finished parsing" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from two files (error)])
AT_DATA(netfile1,[PLACE p1;
MARKING p1;
])
AT_CHECK([LOLA netfile1 netfile2 -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file netfile2" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from nonexisting file])
AT_CHECK([LOLA garavel.lola -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file garavel.lola" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reading from nonreadable file])
AT_DATA(netfile,[
])
AT_CHECK([chmod a-r netfile])
AT_CHECK([LOLA netfile -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: could not open net file netfile" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP



############################################################################
AT_BANNER([Syntax])
############################################################################

AT_SETUP([Minimal syntactic correct net])
AT_CHECK([cp TESTFILES/syntax_min.lola .])
AT_CHECK([cat syntax_min.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([All syntactic features])
AT_CHECK([cp TESTFILES/syntax_full.lola .])
AT_CHECK([cat syntax_full.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Double arc])
AT_DATA(netfile,[PLACE p1, p2, p3;
MARKING p1;
TRANSITION t1
CONSUME p1:1;
PRODUCE p1:1;
TRANSITION t2
CONSUME p2:2;
PRODUCE p2:1;
TRANSITION t3
CONSUME p3:1;
PRODUCE p3:2;
])
AT_CHECK([cat netfile | LOLA -v],0,ignore,stderr)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([UTF8 input])
AT_CHECK([cp TESTFILES/syntax_utf8.lola .])
AT_CHECK([cat syntax_utf8.lola | LOLA],0,ignore,ignore)
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Generic syntax error])
AT_DATA(netfile,[foobar;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: syntax error, unexpected" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Duplicate place])
AT_DATA(netfile,[PLACE p1, p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p1' name used twice" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Mark nonexisting place (1/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p2: 1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Mark nonexisting place (2/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p2;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reference nonexisting place (1/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p1: 1;
TRANSITION t1
CONSUME p2: 1;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Reference nonexisting place (2/2)])
AT_DATA(netfile,[PLACE p1;
MARKING p1: 1;
TRANSITION t1
CONSUME p2;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: place 'p2' does not exist" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP

AT_SETUP([Duplicate transition])
AT_DATA(netfile,[PLACE p1;
MARKING p1;
TRANSITION t1
CONSUME p1;
PRODUCE p1;
TRANSITION t1
CONSUME p1;
PRODUCE p1;
])
AT_CHECK([cat netfile | LOLA -v],2,ignore,stderr)
AT_CHECK([GREP -q "lola: transition name 't1' used twice" stderr])
AT_CHECK([GREP -q "lola: syntax error -- aborting \[[#00\|]]" stderr])
AT_KEYWORDS(frontend)
AT_CLEANUP


############################################################################
AT_BANNER([Debugging])
############################################################################

AT_SETUP([Print net])
AT_CHECK([cp TESTFILES/syntax_full.lola .])
AT_CHECK([LOLA syntax_full.lola --printNet],0,stdout)
AT_CHECK([GREP -q "6 places" stdout])
AT_CHECK([GREP -q "4  transitions" stdout])
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Random walk])
AT_CHECK([cp TESTFILES/process.lola .])
AT_CHECK([LOLA process.lola --randomWalk=10000],0,stdout)
AT_CHECK([GREP -q "firing" stdout])
AT_CHECK([GREP -q "*************" stdout])
AT_KEYWORDS(debug)
AT_CLEANUP

AT_SETUP([Simple property])
AT_CHECK([cp TESTFILES/process.lola .])
AT_CHECK([LOLA process.lola --simpleProperty],0,stdout)
AT_CHECK([GREP -q "no" stdout])
AT_KEYWORDS(debug)
AT_CLEANUP


############################################################################
AT_BANNER([Reporter])
############################################################################

AT_SETUP([ReporterStream: stdout])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=stream --verbose],0,stdout,stderr)
AT_CHECK([GREP -q "reading net from garavel.lola" stderr])
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterStream: file])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=stream --verbose >& output],0)
AT_CHECK([test -f output])
AT_CHECK([GREP -q "reading net from garavel.lola" output])
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterSocket: sending only (1/2)])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([LOLA garavel.lola --reporter=socket],0,ignore,ignore)
AT_KEYWORDS(reporter)
AT_CLEANUP

AT_SETUP([ReporterSocket: sending only (2/2)])
AT_CHECK([LOLA garavel.lola --reporter=socket],2,ignore,ignore)
AT_KEYWORDS(reporter)
AT_CLEANUP

#AT_SETUP([ReporterSocket: sending/receiving])
#AT_CHECK([cp TESTFILES/garavel.lola .])
#AT_CHECK([LISTENER 2> listener.log &],0)
#AT_CHECK([LOLA garavel.lola --reporter=socket --verbose],0,ignore,ignore)
#AT_CHECK([killall listener],0,stdout,stderr)
#AT_CHECK([GREP -q "lola: caught signal" listener.log])
#AT_CHECK([GREP -q "finished parsing" listener.log])
#AT_KEYWORDS(reporter)
#AT_CLEANUP

#AT_SETUP([ReporterSocket: killer thread])
#AT_CHECK([cp TESTFILES/garavel.lola .])
#AT_CHECK([LOLA garavel.lola --randomWalk --remoteTermination & 2> /dev/null],0,ignore,ignore)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_CHECK([KILLER],0,stdout,stderr)
#AT_KEYWORDS(reporter)
#AT_CLEANUP


############################################################################
AT_BANNER([Memory Management])
############################################################################

AT_SETUP([Checking for memory leaks: Garavel])
AT_CHECK([cp TESTFILES/garavel.lola .])
AT_CHECK([VALGRIND --leak-check=full --show-reachable=yes LOLA_RAW garavel.lola],0,ignore,stderr)
AT_CHECK([GREP -q -E "definitely lost: 0 bytes in 0 blocks|All heap blocks were freed -- no leaks are possible" stderr])
AT_KEYWORDS(valgrind)
AT_CLEANUP

AT_SETUP([Checking for memory leaks: Phils 1000])
AT_CHECK([cp TESTFILES/phils1000.lola .])
AT_CHECK([VALGRIND --leak-check=full --show-reachable=yes LOLA_RAW phils1000.lola],0,ignore,stderr)
AT_CHECK([GREP -q -E "definitely lost: 0 bytes in 0 blocks|All heap blocks were freed -- no leaks are possible" stderr])
AT_KEYWORDS(valgrind)
AT_CLEANUP
