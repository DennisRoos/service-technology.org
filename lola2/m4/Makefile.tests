#--------------#
# GNU autotest #
#--------------#

TESTSUITE = $(builddir)/testsuite
EXTRA_DIST = testsuite.at wrap.sh $(addprefix testfiles/,$(TESTFILES))
DISTCLEANFILES = atconfig package.m4 $(TESTSUITE)

# run the test suite when calling "make check"
check-local: atconfig $(TESTSUITE)
	$(AM_V_at)$(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS)

# clean the test results on "make clean"
clean-local:
	test ! -f '$(TESTSUITE)' || $(SHELL) '$(TESTSUITE)' --clean

# call a specific test set by keyword (e.g. "make check-basic")
check-%: atconfig $(TESTSUITE)
	$(AM_V_at)$(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS) --keywords=$*

# create the testsuite using autom4te
$(TESTSUITE): $(srcdir)/testsuite.at package.m4
	$(AM_V_GEN)$(AUTOM4TE) --language=autotest -I '$(srcdir)' -o $@.tmp $@.at
	$(AM_V_at)mv $@.tmp $@


#---------------#
# test coverage #
#---------------#

## Compile with coverage flags
# Actually calls the configure script to set flags for the C/C++ compiler
# and the linker. Note that assertions are switched off. Then cleans the
# build and recompiles. lcov is called just to provoke an error message if
# it is not found by the configure script. In that case, the Automake's
# missing script handles the error message.
newcover-compile:
	$(LCOV) -v >/dev/null
	cd $(top_srcdir) ; LIBS="-lgcov" CXXFLAGS="-fprofile-arcs -ftest-coverage" CFLAGS="-fprofile-arcs -ftest-coverage" ./configure --disable-assert
	$(MAKE) --directory=$(top_srcdir) clean all

## Execute tests using coverage:
# This target creats for each test case a directory in which coverage data is
# collected. This is done by the cover.sh script. It does not call lcov to
# process the data.
newcover-check: newcover-compile $(TESTSUITE)
	test ! -d cover || rm -fr cover
	$(MKDIR_P) cover
	-$(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS) COVER=YES

## Clean up cover directories:
# Makes sure that each cover directory contains only instrumented object files
# and coverage data of the files in the src directory. Files for which no
# instrumented object files are missing or files that do not stem from the src
# directory (e.g., libraries) are removed.
newcover-process: newcover-check
	cd cover ; \
    for TESTCASE in `ls -1`; do \
      for GCNOFILE in `find $(abs_top_builddir)/src -type f -name '*.gcno' -print`; do \
        cp $$GCNOFILE $$TESTCASE ; \
      done ; \
      cd $$TESTCASE; \
      for FILE in `ls -1 *.gcda`; do \
        if [ ! -f `basename $$FILE .gcda`.gcno ]; then \
          rm $$FILE; \
        fi \
      done; \
      cd ..; \
    done


cover-covertura: cover-prepare $(TESTSUITE)
	-$(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS)
	cd $(top_srcdir) ; gcovr -r src -b -x > covertura.xml

# compile the code for code coverage
cover-prepare:
	$(LCOV) -v >/dev/null
	cd $(top_srcdir) ; LIBS="-lgcov" CXXFLAGS="-fprofile-arcs -ftest-coverage" CFLAGS="-fprofile-arcs -ftest-coverage" ./configure --disable-assert
	$(MAKE) --directory=$(top_srcdir) clean all

# get descriptions from the testsuite
descriptions: $(TESTSUITE)
	$(SHELL) '$(TESTSUITE)' -l > descriptions.txt
	$(SED) -i '1,5d;n;d;' descriptions.txt
	$(SED) -i 's/:[ \t]*testsuite.at:[0-9]*[ \t]*/ /;s/^[ \t]*//' descriptions.txt
	$(SED) -i 's/ /\n\t/' descriptions.txt
	$(LCOV_GENDESC) descriptions.txt -o descriptions1
	cp descriptions1 descriptions10
	cp descriptions1 descriptions100
	$(SED) -i 's/^TN: \([1-9]\)$$/TN: 0\1/' descriptions10
	$(SED) -i 's/^TN: \([1-9]\)$$/TN: 00\1/' descriptions100
	$(SED) -i 's/^TN: \([1-9][1-9]\)$$/TN: 0\1/' descriptions100
	cat descriptions1 descriptions10 descriptions100 > descriptions
	rm descriptions1 descriptions10 descriptions100 descriptions.txt

# execute tests using coverage
cover-check: cover-prepare $(TESTSUITE)
	test ! -d cover || rm -fr cover
	$(MKDIR_P) cover
	-$(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS) COVER=LCOV

# create a HTML table with results from LCOV
cover-html: descriptions
	find cover -size 0 -exec rm {} \;
	for FILE in `ls cover/*.info`; do $(LCOV) --quiet --remove $$FILE $(addprefix ",$(addsuffix ", $(NO_COVER_FILES))) > $$FILE.filtered; done
	$(LCOV_GENHTML) cover/*.info.filtered \
	   --output-directory cover-html --title "$(PACKAGE_STRING)" \
	   --show-details --legend --description-file descriptions --sort \
	   --demangle-cpp --prefix $(abs_top_builddir)
	@echo see `pwd`/cover-html/index.html for a coverage report

cover: cover-check cover-html

# clean also the temp files in the src directory
CLEANFILES = -fr cover descriptions 
MAINTAINERCLEANFILES = -fr cover-html
maintainer-clean-local:
	find $(top_builddir) -name *.gcov -exec rm {} \;
	find $(top_builddir) -name *.gcno -exec rm {} \;
	find $(top_builddir) -name *.gcda -exec rm {} \;
