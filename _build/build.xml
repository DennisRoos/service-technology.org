<project name="main" default="all">

    <basename property="package" file="."/>
    <property name="dir" location="."/>

    <target name="all" depends="prepare, statsvn, autogen, configure, make_all, make_check, make_distcheck, cppcheck, documentation, coverage" />
    <target name="all_win" depends="prepare, autogen, configure_win, make_all_win" />

    <target name="prepare">
        <mkdir dir="artifacts" />
    </target>

    <target name="cleanup">
        <exec executable="make" failonerror="false">
            <arg value="--quiet" />
            <arg value="svn-clean" />
        </exec>

        <delete file="${package}.tar.gz" failonerror="false" />
        <delete dir="artifacts" failonerror="false" />
        <delete dir="statsvn" failonerror="false" />
        <delete dir="doc/doxygen" failonerror="false" />
        <delete file="statsvn.log" failonerror="false" />
        <delete file="cppcheck-result.xml" failonerror="false" />
        <delete failonerror="false">
            <fileset dir="." includes="plot_*"/>
        </delete>
    </target>

    <target name="statsvn" depends="prepare">
        <exec executable="svn" failonerror="false" output="statsvn.log">
            <arg line="log -v --xml" />
        </exec>
        <exec executable="statsvn" failonerror="false">
            <arg line="-disable-twitter-button -threads 10 -include '**/src/**;**/utils/**' statsvn.log . -output-dir statsvn -cache-dir /tmp/statsvn" />
        </exec>
        <!--        <exec executable="java" failonerror="false">
        <arg line="-jar '${homedir}/local/statsvn/statsvn.jar' -config-file '${homedir}/local/statsvn/config' -tags '.*' -disable-twitter-button -threads 1 -include '**/src/**;**/utils/**' statsvn.log . -output-dir statsvn" />
        </exec>-->
    </target>

    <target name="cppcheck" depends="prepare">
        <touch file="src/tmpfile.c" />
        <exec executable="cppcheck" failonerror="false" error="cppcheck-result.xml">
            <arg line="src/* --enable=all --force --verbose --report-progress --xml" />
        </exec>
        <delete file="src/tmpfile.c" />
    </target>

    <target name="autogen">
        <exec executable="env" failonerror="true">
            <arg value="autogen.sh" />
        </exec>
    </target>

    <target name="configure">
        <exec executable="sh" failonerror="true">
            <arg value="configure" />
        </exec>
        <copy file="config.log" todir="artifacts" failonerror="false" />
    </target>

    <target name="configure_win">
        <exec executable="sh" failonerror="true">
            <arg value="configure" />
            <arg value="--host=i586-mingw32msvc" /> <!-- new -->
            <arg value="--prefix=${dir}/${package}" />
            <arg value="--docdir=${dir}/${package}" />
            <arg value="--bindir=${dir}/${package}" />
            <arg value="--sysconfdir=${dir}/${package}" />
        </exec>
        <copy file="config.log" todir="artifacts" failonerror="false" />
    </target>

    <target name="configure_clang">
        <exec executable="sh" failonerror="true">
            <arg value="configure" />
            <arg value="--disable-shared" />
            <arg value="CC=clang" />
            <arg value="CXX=clang++" />
        </exec>
        <copy file="config.log" todir="artifacts" failonerror="false" />
    </target>

    <target name="make_all_win">
        <record name="artifacts/make.log" action="start"/>
        <exec executable="make" failonerror="true">
            <arg value="AM_CFLAGS=-O2" />
            <arg value="AM_CXXFLAGS=-O2" />
<!--            <arg value="AM_LDFLAGS=-lstdc++ -lgcc -lodbc32 -lwsock32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lctl3d32 -lodbc32 -ladvapi32 -lodbc32 -lwsock32 -lopengl32 -lglu32 -lole32 -loleaut32 -luuid -static-libgcc" /> -->
        </exec>
        <exec executable="make" failonerror="true">
            <arg value="AM_CFLAGS=-O2" />
            <arg value="AM_CXXFLAGS=-O2" />
<!--            <arg value="AM_LDFLAGS=-lstdc++ -lgcc -lodbc32 -lwsock32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lctl3d32 -lodbc32 -ladvapi32 -lodbc32 -lwsock32 -lopengl32 -lglu32 -lole32 -loleaut32 -luuid -static-libgcc" /> -->
            <arg value="all" />
        </exec>
        <record name="artifacts/make.log" action="stop"/>

        <!-- strip "     [exec] " prefix from output -->
        <exec executable="sed" failonerror="false">
            <arg line="-i 's/     \[exec\] //' artifacts/make.log" />
        </exec>

        <exec executable="make" failonerror="true">
            <arg value="install" />
            <arg value="install-pdf" />
            <arg value="install" />
        </exec>

        <delete dir="${dir}/${package}/share" failonerror="false" />
        <zip destfile="${package}-win.zip" basedir="${dir}/${package}" level="9" />
        <delete dir="${dir}/${package}" failonerror="false" />

        <copy file="${package}-win.zip" todir="artifacts" failonerror="false" />
    </target>

    <target name="make_all">
        <record name="artifacts/make.log" action="start"/>
        <exec executable="make" failonerror="true">
            <arg value="AM_CFLAGS=-O2 -Waddress -Wall -Wc++-compat -Wcast-align -Wcast-qual -Wconversion -Wempty-body -Wextra -Wfloat-equal -Wformat-nonliteral -Wformat-security -Wformat-y2k -Wformat=2 -Winit-self -Wmissing-field-initializers -Wmissing-include-dirs -Wmissing-noreturn -Wnested-externs -Wno-attributes -Wno-div-by-zero -Wno-endif-labels -Wno-format-extra-args -Wno-variadic-macros -Wpacked -Wpointer-arith -Wredundant-decls -Wundef -Wuninitialized -Wunused -Wwrite-strings -ansi -pedantic" />
            <arg value="AM_CXXFLAGS=-O2 -Waddress -Wall -Wcast-align -Wcast-qual -Wconversion -Wempty-body -Wextra -Wfloat-equal -Wformat-nonliteral -Wformat-security -Wformat-y2k -Wformat=2 -Winit-self -Wmissing-field-initializers -Wmissing-include-dirs -Wmissing-noreturn -Wno-attributes -Wno-div-by-zero -Wno-endif-labels -Wno-format-extra-args -Wno-variadic-macros -Wpacked -Wpointer-arith -Wredundant-decls -Wundef -Wuninitialized -Wunused -Wwrite-strings -ansi -pedantic" />
        </exec>
        <record name="artifacts/make.log" action="stop"/>

        <!-- strip "     [exec] " prefix from output -->
        <exec executable="sed" failonerror="false">
            <arg line="-i 's/     \[exec\] //' artifacts/make.log" />
        </exec>
    </target>

    <target name="make_check">
        <exec executable="make" failonerror="false" resultproperty="result">
            <arg value="check" />
        </exec>
        <copy file="tests/testsuite.log" todir="artifacts" failonerror="false" />
        <fail>
            <condition>
                <not>
                    <equals arg1="${result}" arg2="0" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="make_dist">
        <exec executable="make" failonerror="true">
            <arg value="dist" />
            <arg value="distdir=${package}" />
        </exec>
        <copy file="${package}.tar.gz" todir="artifacts" failonerror="false" />
    </target>

    <target name="make_distcheck">
        <exec executable="make" failonerror="true">
            <arg value="distcheck" />
            <arg value="distdir=${package}" />
            <arg value="TEXI2DVI=&quot;`which bash` `which texi2dvi`&quot;"/>
        </exec>
        <copy file="${package}.tar.gz" todir="artifacts" failonerror="false" />
    </target>

    <target name="documentation">
        <exec executable="make" failonerror="false">
            <arg value="pdf" />
        </exec>
        <!-- <copy file="doc/${package}.pdf" todir="artifacts" failonerror="false" /> -->

        <mkdir dir="doc/doxygen" />
        <exec executable="doxygen" dir="doc" failonerror="false" />
    </target>

    <target name="coverage">
        <mkdir dir="tests" />
        <mkdir dir="tests/cover-html" />
        <record name="artifacts/cover.log" action="start"/>
        <exec executable="make" dir="tests" failonerror="false">
            <arg value="cover" />
        </exec>
        <record name="artifacts/cover.log" action="stop"/>

        <exec executable="sh" failonerror="false" output="plot_coveredlines">
            <arg value="-c" />
            <arg value="grep 'lines......' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $4 }'" />
        </exec>
        <exec executable="sh" failonerror="false" output="plot_totallines">
            <arg value="-c" />
            <arg value="grep 'lines......' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $6 }'" />
        </exec>

        <exec executable="sh" failonerror="false" output="plot_coveredfunctions">
            <arg value="-c" />
            <arg value="grep 'functions..' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $4 }'" />
        </exec>
        <exec executable="sh" failonerror="false" output="plot_totalfunctions">
            <arg value="-c" />
            <arg value="grep 'functions..' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $6 }'" />
        </exec>

        <exec executable="sh" failonerror="false" output="plot_coveredbranches">
            <arg value="-c" />
            <arg value="grep 'branches...' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $4 }'" />
        </exec>
        <exec executable="sh" failonerror="false" output="plot_totalbranches">
            <arg value="-c" />
            <arg value="grep 'branches...' artifacts/cover.log | sed 's/[()]//g' | awk '{ print &quot;YVALUE=&quot; $6 }'" />
        </exec>

    </target>

</project>
