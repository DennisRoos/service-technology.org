<project name="uma.test" default="check">
	
	<!-- retrieve basedir of this check script -->
	<dirname property="test.basedir" file="${ant.file.uma.test}" />
	
	<property name="home" location=".." />
	<property name="bin" location="${home}/bin" />
	<property name="src" location="${home}/src" />
	
	<property name="dir.test-src" location="${test.basedir}/src-test" />
	<property name="dir.test-bin" location="${test.basedir}/bin-test" />
	<property name="dir.test-instrument" location="${test.basedir}/bin-test-instrument" />
	
	<property name="dir.coveragereport.html" location="${test.basedir}/cover-html" />
	<property name="dir.coveragereport.xml" location="${test.basedir}/cover-xml" />
	<property name="src.coveragereport" location="${src}" />
	
	<property name="testfiles" location="${test.basedir}/testfiles" />
	
	<property name="compiled.classes" location="${bin}" />
	<property name="test.libs-external" location="${home}/libs-external/" />

	<!-- include compiled classes, libraries, and test-case files -->
	<path id="classpath.run">
		<pathelement location="${compiled.classes}"/>
      	<fileset dir="${test.libs-external}">
        	<include name="**/*.jar"/>
      	</fileset>
		<pathelement location="${dir.test-bin}"/>
	</path>

	<path id="classpath.cobertura">
		<pathelement location="${test.basedir}/libs-external/cobertura.jar" />
		<pathelement location="${test.basedir}/libs-external/lib-cobertura/log4j-1.2.9.jar" />
		<pathelement location="${test.basedir}/libs-external/lib-cobertura/asm-3.0.jar" />
		<pathelement location="${test.basedir}/libs-external/lib-cobertura/asm-tree-3.0.jar" />
		<pathelement location="${test.basedir}/libs-external/lib-cobertura/jakarta-oro-2.0.8.jar" />
  	</path>
	
	<!-- include JUnit to execute unit tests -->
	<path id="classpath.test">
		<pathelement location="${test.basedir}/libs-external/junit-4.8.1.jar" />
		<path refid="classpath.run" />
  	</path>
	
	<taskdef classpathref="classpath.cobertura" resource="tasks.properties"/>
	
	<target name="build-test">
		<mkdir dir="${dir.test-bin}" />
		<javac classpathref="classpath.test"
			srcdir="${dir.test-src}"
         	destdir="${dir.test-bin}"
         	debug="on" />
	</target>
	
	<target name="prepare-cobertura">
	    <property name="myclasspath" refid="classpath.cobertura"/>
	    <echo message="classpath= ${myclasspath}"/>
		
		<cobertura-instrument todir="${dir.test-instrument}" classpathref="classpath.cobertura">
			<ignore regex="org.apache.log4j.*" />
			<ignore regex="gnu.trove.*" />

		    <fileset dir="${compiled.classes}">
		        <include name="hub/**/*.class"/>
		    </fileset>
		</cobertura-instrument>
	</target>
	
	<target name="check" depends="build-test,prepare-cobertura">
		<echo message="Running JUnit tests in ${test.basedir}" />
	    <junit fork="yes">
	      <!-- class path for code coverage by cobertura -->
	      <classpath location="${dir.test-instrument}" />
	      <classpath refid="classpath.cobertura"/>
	    	
	      <!-- class path of the code to test and the Junit framework -->
	      <classpath refid="classpath.test"/>

		  <!-- JUnit: set output format -->
	      <formatter type="xml" />
    	  <formatter type="plain" />
	    	
	      <!-- JUnit: test cases to run -->
    	  <sysproperty key="test.testFileRoot" path="${testfiles}"/>
	      <test name="hub.top.scenario.OcletTest" />	
	      <test name="hub.top.uma.UmaTest" />
	   	  <test name="hub.top.uma.UmaFoldTest" />
	    </junit>
		
		<!-- Cobertura: generate HTML coverage report -->
		<cobertura-report destdir="${dir.coveragereport.html}" format="html" srcdir="${src.coveragereport}">
		</cobertura-report>
		<cobertura-report destdir="${dir.coveragereport.xml}" format="xml" srcdir="${src.coveragereport}">
		</cobertura-report>		
		
		
		<echo message="Running binary tests in ${test.basedir}" />
		<java classname="hub.top.uma.Uma" dir="${test.basedir}" fork="true">
			<classpath refid="classpath.run" />
			<arg value="-i"/>
			<arg file="${testfiles}/net_lexik.lola" />
		</java>
		
		<antcall target="view-generation-binary" />
		
		<antcall target="clean" />
	</target>
	
	<target name="view-generation-binary">
		<echo message="Checking view generation." />
		<property name="_dir" location="${testfiles}/viewgeneration" />
		<mkdir dir="${_dir}" />
		
		<copy file="${testfiles}/EMS.oclets" todir="${_dir}"/>
		<java classname="hub.top.uma.view.ViewGeneration2" output="${_dir}/viewgeneration.log">
			<classpath refid="classpath.run" />
			<arg value="-gen"/>
			<arg value="${_dir}/EMS.oclets"/>
			<arg value="100"/>
			<arg value="30"/>
			<arg value="${_dir}/EMS_traces.txt"/>
		</java>
		<java classname="hub.top.uma.view.ViewGeneration2" output="${_dir}/viewgeneration2.log">
			<classpath refid="classpath.run" />
			<arg value="-replay"/>
			<arg value="${_dir}/EMS.oclets"/>
			<arg value="${_dir}/EMS_traces.txt"/>
		</java>
		<fail> <!-- fail if the result file does not exist -->
		    <condition> <not> <resourcecount count="1">
                <fileset id="fs" dir="${_dir}" includes="EMS.oclets.traces.dot"/>
		    </resourcecount> </not> </condition>
		</fail>

		<delete dir="${_dir}" includeemptydirs="true" />

	</target>
	
	<target name="clean">
		<delete dir="${dir.test-bin}" includeemptydirs="true" failonerror="false"/>
		<delete dir="${dir.test-instrument}" includeemptydirs="true" failonerror="false"/>
		<delete file="${test.basedir}/cobertura.ser" failonerror="false"/>
	</target>
	
	<target name="svn-clean" depends="clean">
		<delete dir="${dir.coveragereport.html}" includeemptydirs="true" failonerror="false"/>
		<delete dir="${dir.coveragereport.xml}" includeemptydirs="true" failonerror="false"/>
		<!-- test reports -->
		<delete failonerror="false">
			<fileset dir="${test.basedir}">
				<include name="TEST-*.xml"/>
				<include name="TEST-*.txt"/>
			</fileset>
		</delete>
	</target>
	
</project>