/*
 * MineFromJava.java
 *
 * Created on Oct 7, 2010, 1:06:19 PM
 */

package lscminer.gui;

import javax.swing.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import lscminer.Main;
import lscminer.datastructure.*;
import lscminer.utilities.*;
import lscminer.miner.*;
import lscminer.tracer.JavaMethodCallTracer;

/**
 *
 * @author nacuong
 */
public class MineFromJavaDialog extends javax.swing.JDialog {

    public boolean mineStatus;
    public String mineProjectName;
    public String mineProjectLocation;
    public String mineTaskName;
    public int mineSupport;
    public double mineConfidence;
    public double mineDensity;
    public String mineType;
    public String mineTime;
    public double mineRuntime;
    public ArrayList<LSC> mineLSC;
    public LSCEvent[][] mineDataSet;

    /** Creates new form MineFromJava */
    public MineFromJavaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        mineStatus = false;
        mineLSC = new ArrayList<LSC>();
        mineProjectName = "";
        mineProjectLocation = "";
        mineTaskName = "";
        mineSupport = 0;
        mineConfidence = 0;
        mineDensity = 0;
        mineType = "mine from traces";

        initComponents();
        targetFolderTextField.setText(Main.getProjLoc());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    newProjectPanel = new javax.swing.JPanel();
    projectNameTextField = new javax.swing.JTextField();
    projectNameLabel = new javax.swing.JLabel();
    targetFolderLable = new javax.swing.JLabel();
    targetFolderTextField = new javax.swing.JTextField();
    targetFolderBrowseButton = new javax.swing.JButton();
    taskNameLabel = new javax.swing.JLabel();
    taskNameTextField = new javax.swing.JTextField();
    miningParameterPanel = new javax.swing.JPanel();
    minSupportLabel = new javax.swing.JLabel();
    minSupportTextField = new javax.swing.JTextField();
    minConfidenceLabel = new javax.swing.JLabel();
    minConfidenceTextField = new javax.swing.JTextField();
    minDensityLabel = new javax.swing.JLabel();
    minDensityTextField = new javax.swing.JTextField();
    cancelButton = new javax.swing.JButton();
    startMiningButton = new javax.swing.JButton();
    advancedSettingsButton = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    classpathLabel = new javax.swing.JLabel();
    inputFileTextField = new javax.swing.JTextField();
    inputTraceBrowseButton = new javax.swing.JButton();
    inputFileLabel = new javax.swing.JLabel();
    mainClassLabel = new javax.swing.JLabel();
    classpathTextField = new javax.swing.JTextField();
    mainClassTextField = new javax.swing.JTextField();
    classpathBrowseButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Mine from Java Program Dialog");
    setIconImage(null);
    setIconImages(null);
    setLocationByPlatform(true);
    setResizable(false);

    newProjectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "   Create New Project    ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

    projectNameTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    projectNameTextField.setToolTipText("Name of the project that will be created for this session, i.e. jeti for mining Jeti chat server");
    projectNameTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        projectNameTextFieldActionPerformed(evt);
      }
    });

    projectNameLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    projectNameLabel.setText("Project Name :");

    targetFolderLable.setFont(new java.awt.Font("Tahoma", 0, 12));
    targetFolderLable.setText("Target Folder :");

    targetFolderTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    targetFolderTextField.setToolTipText("The target folder where the project will be created");
    targetFolderTextField.setEnabled(false);
    targetFolderTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        targetFolderTextFieldActionPerformed(evt);
      }
    });

    targetFolderBrowseButton.setFont(new java.awt.Font("Tahoma", 0, 12));
    targetFolderBrowseButton.setText("Browse");
    targetFolderBrowseButton.setFocusable(false);
    targetFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        targetFolderBrowseButtonActionPerformed(evt);
      }
    });

    taskNameLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    taskNameLabel.setText("Task Name :");

    taskNameTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    taskNameTextField.setToolTipText("The task name for the set of input traces; i.e. mineStartChatScenario");
    taskNameTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        taskNameTextFieldActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout newProjectPanelLayout = new javax.swing.GroupLayout(newProjectPanel);
    newProjectPanel.setLayout(newProjectPanelLayout);
    newProjectPanelLayout.setHorizontalGroup(
      newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(newProjectPanelLayout.createSequentialGroup()
        .addGap(55, 55, 55)
        .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(taskNameLabel)
          .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(targetFolderLable)
            .addComponent(projectNameLabel)))
        .addGap(39, 39, 39)
        .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(newProjectPanelLayout.createSequentialGroup()
            .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(projectNameTextField)
              .addComponent(targetFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(targetFolderBrowseButton))
          .addComponent(taskNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(50, Short.MAX_VALUE))
    );
    newProjectPanelLayout.setVerticalGroup(
      newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(newProjectPanelLayout.createSequentialGroup()
        .addGap(11, 11, 11)
        .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(projectNameLabel)
          .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(targetFolderLable)
          .addComponent(targetFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(targetFolderBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(newProjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(taskNameLabel)
          .addComponent(taskNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    miningParameterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "   Enter Mining Parameter   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

    minSupportLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    minSupportLabel.setText("Minimum Support :");

    minSupportTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    minSupportTextField.setToolTipText("Support is the number of occurrences of an LSC that appear in the set of traces");
    minSupportTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        minSupportTextFieldActionPerformed(evt);
      }
    });

    minConfidenceLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    minConfidenceLabel.setText("Minimum Confidence :");

    minConfidenceTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    minConfidenceTextField.setToolTipText("Confidence is the likelihood that the LSC will be satisfied in the set of traces; set to 1 to mine 100% correctness LSC");
    minConfidenceTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        minConfidenceTextFieldActionPerformed(evt);
      }
    });

    minDensityLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    minDensityLabel.setText("Minimum Density :");

    minDensityTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    minDensityTextField.setToolTipText("Density is the ratio of distinct events over all events in the LSC, set to 1 to mine LSC of distinct events");
    minDensityTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        minDensityTextFieldActionPerformed(evt);
      }
    });

    cancelButton.setFont(new java.awt.Font("Tahoma", 0, 14));
    cancelButton.setText("Cancel");
    cancelButton.setFocusPainted(false);
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    startMiningButton.setFont(new java.awt.Font("Tahoma", 0, 14));
    startMiningButton.setText("Start Mining");
    startMiningButton.setFocusPainted(false);
    startMiningButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startMiningButtonActionPerformed(evt);
      }
    });

    advancedSettingsButton.setFont(new java.awt.Font("Tahoma", 0, 14));
    advancedSettingsButton.setText("Advanced Settings");
    advancedSettingsButton.setFocusPainted(false);

    javax.swing.GroupLayout miningParameterPanelLayout = new javax.swing.GroupLayout(miningParameterPanel);
    miningParameterPanel.setLayout(miningParameterPanelLayout);
    miningParameterPanelLayout.setHorizontalGroup(
      miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(miningParameterPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(minSupportLabel)
          .addComponent(minConfidenceLabel)
          .addComponent(minDensityLabel))
        .addGap(46, 46, 46)
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(minConfidenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(minSupportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(miningParameterPanelLayout.createSequentialGroup()
            .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(minDensityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(miningParameterPanelLayout.createSequentialGroup()
                .addComponent(advancedSettingsButton)
                .addGap(18, 18, 18)
                .addComponent(startMiningButton)))
            .addGap(18, 18, 18)
            .addComponent(cancelButton)))
        .addContainerGap(51, Short.MAX_VALUE))
    );
    miningParameterPanelLayout.setVerticalGroup(
      miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(miningParameterPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(minSupportLabel)
          .addComponent(minSupportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(minConfidenceLabel)
          .addComponent(minConfidenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(minDensityLabel)
          .addComponent(minDensityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
        .addGroup(miningParameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(startMiningButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(advancedSettingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "   Enter Execution Parameter   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

    classpathLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    classpathLabel.setText("Classpath :");

    inputFileTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    inputFileTextField.setToolTipText("The file that contains the main class inputs; each line is an input");
    inputFileTextField.setEnabled(false);
    inputFileTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        inputFileTextFieldActionPerformed(evt);
      }
    });

    inputTraceBrowseButton.setFont(new java.awt.Font("Tahoma", 0, 12));
    inputTraceBrowseButton.setText("Browse");
    inputTraceBrowseButton.setFocusable(false);
    inputTraceBrowseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        inputTraceBrowseButtonActionPerformed(evt);
      }
    });

    inputFileLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    inputFileLabel.setText("Input File :");

    mainClassLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
    mainClassLabel.setText("Main class :");

    classpathTextField.setFont(new java.awt.Font("Tahoma", 0, 12));
    classpathTextField.setToolTipText("The classpath of the main class file");
    classpathTextField.setEnabled(false);
    classpathTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        classpathTextFieldActionPerformed(evt);
      }
    });

    mainClassTextField.setToolTipText("The main Java class that will be executed");

    classpathBrowseButton.setFont(new java.awt.Font("Tahoma", 0, 12));
    classpathBrowseButton.setText("Browse");
    classpathBrowseButton.setFocusable(false);
    classpathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        classpathBrowseButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(73, 73, 73)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(inputFileLabel)
          .addComponent(classpathLabel)
          .addComponent(mainClassLabel))
        .addGap(41, 41, 41)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(inputTraceBrowseButton))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(mainClassTextField, javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(classpathTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(classpathBrowseButton)))
        .addContainerGap(52, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(mainClassLabel)
          .addComponent(mainClassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(classpathLabel)
          .addComponent(classpathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(classpathBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(inputFileLabel)
          .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(inputTraceBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(newProjectPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(miningParameterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(newProjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
        .addComponent(miningParameterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void projectNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNameTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_projectNameTextFieldActionPerformed

    private void targetFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetFolderTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_targetFolderTextFieldActionPerformed

    private void targetFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetFolderBrowseButtonActionPerformed
          JFileChooser targetFolderChooser = new JFileChooser();
        targetFolderChooser.setCurrentDirectory(new File(Main.getProjLoc()));
        targetFolderChooser.setDialogTitle("Select a Target Folder");
        targetFolderChooser.setApproveButtonText("Select");
        targetFolderChooser.setApproveButtonToolTipText("Select target folder");
        targetFolderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        targetFolderChooser.setAcceptAllFileFilterUsed(false);
        if (targetFolderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            targetFolderTextField.setText(targetFolderChooser.getSelectedFile().getPath());
        }
}//GEN-LAST:event_targetFolderBrowseButtonActionPerformed

    private void taskNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskNameTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_taskNameTextFieldActionPerformed

    private void inputFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_inputFileTextFieldActionPerformed

    private void minSupportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minSupportTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_minSupportTextFieldActionPerformed

    private void minConfidenceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minConfidenceTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_minConfidenceTextFieldActionPerformed

    private void minDensityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minDensityTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_minDensityTextFieldActionPerformed

    private void inputTraceBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTraceBrowseButtonActionPerformed
        JFileChooser inputFileChooser = new JFileChooser();
        inputFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        inputFileChooser.setDialogTitle("Select Java Input File");
        inputFileChooser.setApproveButtonText("Select");
        inputFileChooser.setApproveButtonToolTipText("Select java input file");
        inputFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        inputFileChooser.setAcceptAllFileFilterUsed(true);
        inputFileChooser.addChoosableFileFilter(new InputFilter());

        if (inputFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            inputFileTextField.setText(inputFileChooser.getSelectedFile().getPath());
        }
}//GEN-LAST:event_inputTraceBrowseButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void startMiningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMiningButtonActionPerformed
        String projectName = "";
        String targetFolder = "";
        String taskName = "";
        String mainClass = "";
        String classpath = "";
        String inputFile = "";

        int minSupport = 2;
        double minConfidence = 1;
        double minDensity = 1;

        boolean createProjectError = false;
        boolean miningParameterError = false;

        // <editor-fold desc="step 0: create a new project">
        projectName = projectNameTextField.getText();
        /* project name cannot be empty */
        if (projectName.equals("")){
            JOptionPane.showMessageDialog(this, "Project name cannot be empty!", "Error Message", JOptionPane.ERROR_MESSAGE);
            projectNameTextField.requestFocusInWindow();
            createProjectError = true;
        } else {
            targetFolder = targetFolderTextField.getText();
            targetFolder = targetFolder.replace('\\', '/');
            taskName = taskNameTextField.getText();
            File taskFolder = new File(targetFolder + "/" + projectName + "/" + taskName);
            /* project must be successfully created */
            if (taskFolder.exists() && taskFolder.isDirectory()) {
                System.out.println(targetFolder + "/" + projectName + "/" + taskName);
                JOptionPane.showMessageDialog(this, "The project already exists! Please create another project.", "Error Message", JOptionPane.ERROR_MESSAGE);
                projectNameTextField.requestFocusInWindow();
                createProjectError = true;
            }
        }
        // </editor-fold>

        // <editor-fold desc="step 1: validate mining parameter">
        if (!createProjectError) {
            taskName = taskNameTextField.getText();
            mainClass = mainClassTextField.getText();
            classpath = classpathTextField.getText();
            inputFile = inputFileTextField.getText();
            if (taskName.equals("")) {
                /* task name cannot be empty */
                miningParameterError = true;
                JOptionPane.showMessageDialog(this, "Task name cannot be empty!", "Error Message", JOptionPane.ERROR_MESSAGE);
                taskNameTextField.requestFocusInWindow();
            } else if (mainClass.equals("")) {
                /* main class cannot be empty */
                miningParameterError = true;
                JOptionPane.showMessageDialog(this, "Main class cannot be empty!", "Error Message", JOptionPane.ERROR_MESSAGE);
                mainClassTextField.requestFocusInWindow();
            } else if (inputFile.equals("")) {
                /* input file cannot be empty */
                miningParameterError = true;
                JOptionPane.showMessageDialog(this, "Input file cannot be empty!", "Error Message", JOptionPane.ERROR_MESSAGE);
            } else {
                /* minimum support must be integer greater than 2 */
                try {
                    minSupport = Integer.parseInt(minSupportTextField.getText().trim());
                    if (minSupport < 2) {
                        miningParameterError = true;
                        JOptionPane.showMessageDialog(this, "Minimum support must be a positive integer greater than or equal to 2!", "Error Message", JOptionPane.ERROR_MESSAGE);
                        minSupportTextField.requestFocusInWindow();
                    } else {
                        /* minimum confidence must be a double between 0 and 1 */
                        try {
                            minConfidence = Double.parseDouble(minConfidenceTextField.getText().trim());
                            if (minConfidence > 1.0 || minConfidence < 0.0) {
                                miningParameterError = true;
                                JOptionPane.showMessageDialog(this, "Minimum confidence must be a double between 0 and 1!", "Error Message", JOptionPane.ERROR_MESSAGE);
                                minConfidenceTextField.requestFocusInWindow();
                            } else {
                                try {
                                    minDensity = Double.parseDouble(minDensityTextField.getText().trim());
                                    if (minDensity > 1.0 || minDensity < 0.0) {
                                        miningParameterError = true;
                                        JOptionPane.showMessageDialog(this, "Minimum density must be a double between 0 and 1!", "Error Message", JOptionPane.ERROR_MESSAGE);
                                        minDensityTextField.requestFocusInWindow();
                                    }
                                } catch (Exception e) {
                                    miningParameterError = true;
                                    JOptionPane.showMessageDialog(this, "Minimum density must be a double between 0 and 1!", "Error Message", JOptionPane.ERROR_MESSAGE);
                                    minDensityTextField.requestFocusInWindow();
                                }
                            }
                        } catch (Exception e) {
                            miningParameterError = true;
                            JOptionPane.showMessageDialog(this, "Minimum confidence must be an double between 0 and 1!", "Error Message", JOptionPane.ERROR_MESSAGE);
                            minConfidenceTextField.requestFocusInWindow();
                        }
                    }
                } catch (Exception e) {
                    miningParameterError = true;
                    JOptionPane.showMessageDialog(this, "Minimum support must be a positive integer greater than or equal to 2!", "Error Message", JOptionPane.ERROR_MESSAGE);
                    minSupportTextField.requestFocusInWindow();
                }
            }
        }
        // </editor-fold>

        // <editor-fold desc="step 2: start mining process">
        boolean mineFail = true;
        if (!createProjectError && !miningParameterError) {
            // <editor-fold desc="trace programs and get data set">
            JavaMethodCallTracer javaTracer = new JavaMethodCallTracer(false);
            LSCEvent[][] dataSet = javaTracer.trace(mainClass, classpath, inputFile);
            // </editor-fold>
            if (dataSet == null){
                JOptionPane.showMessageDialog(this, "Fail to run with input " + javaTracer.getFailInput(), "Error Message", JOptionPane.WARNING_MESSAGE);
            } else {
                // <editor-fold desc="create folder for storing mining results">
                /* create a folder to store mining result */
                String projectPath = targetFolder + "/" + projectName;
                File project = new File(projectPath);
                project.mkdir();
                /* create a folder for this task */
                String taskPath = projectPath + "/" + taskName;
                File task = new File(taskPath);
                task.mkdir();
                /* create folder to store traces */
                File tracesFile = new File(taskPath + "/traces");
                tracesFile.mkdir();
                File patternsFile = new File(taskPath + "/patterns.txt");
                File ltlFile = new File(taskPath + "/ltls.txt");
                File lscFile = new File(taskPath + "/lscs.txt");
                File logFile = new File(taskPath + "/log.txt");
                try {
                    /* create patterns file to store pattern results */
                    patternsFile.createNewFile();
                    /* create ltls file to store ltl results */
                    ltlFile.createNewFile();
                    /* create lscs file to store lsc results */
                    lscFile.createNewFile();
                    /* create log file to store mining parametric information */
                    logFile.createNewFile();
                } catch (IOException e) {
                }
                // </editor-fold>

                // <editor-fold desc="log mining results">
                LSCMiner lscMiner = new LSCMiner();
                long before = System.currentTimeMillis();
                lscMiner.mineLSCs(dataSet, minSupport, minConfidence, minDensity);
                long after = System.currentTimeMillis();
                this.mineRuntime = ((double) (after - before)) / 1000.0;
                this.mineLSC = lscMiner.getLSCs();
                this.mineDataSet = dataSet;
                try {
                    /* record mined dataset */
                    for (int traceInx = 0; traceInx < mineDataSet.length; traceInx++){
                      LSCEvent[] trace = mineDataSet[traceInx];
                      File traceFile = new File(targetFolder + "/" + projectName + "/" + taskName + "/traces/trace" + traceInx + ".txt");
                      traceFile.createNewFile();
                      PrintWriter tracePw = new PrintWriter(traceFile.getAbsolutePath());
                      for (LSCEvent event: trace){
                        tracePw.println(event);
                      }
                      tracePw.close();
                    }
                    /* record mined lscs */
                    PrintWriter lscPw = new PrintWriter(lscFile.getAbsolutePath());
                    for (LSC lsc : this.mineLSC) {
                        lscPw.println(lsc);
                        lscPw.println("--------------------------------");
                    }
                    lscPw.close();
                    /* record mine parameter */
                    mineProjectName = projectName;
                    mineProjectLocation = targetFolder + "/" + projectName;
                    mineTaskName = taskName;
                    mineSupport = minSupport;
                    mineConfidence = minConfidence;
                    mineDensity = minDensity;
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    mineTime = sdf.format(Calendar.getInstance().getTime());
                    /* record mining parameter */
                    PrintWriter logPw = new PrintWriter(logFile.getAbsolutePath());
                    logPw.println("projectName=" + this.mineProjectName);
                    logPw.println("taskName=" + this.mineTaskName);
                    logPw.println("projectLocation=" + this.mineProjectLocation);
                    logPw.println("support=" + this.mineSupport);
                    logPw.println("confidence=" + this.mineConfidence);
                    logPw.println("density=" + this.mineDensity);
                    logPw.println("mineType=" + this.mineType);
                    logPw.println("mineTime=" + this.mineTime);
                    logPw.println("mineRuntime=" + this.mineRuntime);
                    logPw.close();

                    mineFail = false;
                } catch (IOException e) {
                }
                // </editor-fold>
            }
        }
        // </editor-fold>

        // <editor-fold desc="step 3: finish mining">
        if (!mineFail){
            mineStatus = true;

            /* record recently created project into history file */
            File history = new File(MainFrame.hitoryFileLocation);
            if (!history.exists()) {
                try {
                    history.createNewFile();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Cannot create history file!", "Error Message", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (history.exists()) {
                try {
                    PrintWriter historyPw = new PrintWriter(new FileOutputStream(history, true));
                    historyPw.println(this.mineProjectName);
                    historyPw.println(this.mineProjectLocation);
                    historyPw.close();
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, "Cannot write to history file!", "Error Message", JOptionPane.ERROR_MESSAGE);
                }
            }

            this.dispose();
            JOptionPane.showMessageDialog(this, "Mining Complete!", "Plain Message", JOptionPane.PLAIN_MESSAGE);
        }
        // </editor-fold>
}//GEN-LAST:event_startMiningButtonActionPerformed

    private void classpathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classpathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classpathTextFieldActionPerformed

    private void classpathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classpathBrowseButtonActionPerformed
        JFileChooser classpathChooser = new JFileChooser();
        classpathChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        classpathChooser.setDialogTitle("Select Java Classpath");
        classpathChooser.setApproveButtonText("Select");
        classpathChooser.setApproveButtonToolTipText("Select java classpath");
        classpathChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        classpathChooser.setAcceptAllFileFilterUsed(true);
        classpathChooser.addChoosableFileFilter(new ClasspathFilter());

        if (classpathChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String classpath = classpathTextField.getText();
            if (!classpath.trim().isEmpty()){
                classpath += ";" + classpathChooser.getSelectedFile().getPath();
            } else {
                classpath = classpathChooser.getSelectedFile().getPath();
            }
            classpathTextField.setText(classpath);
        }
    }//GEN-LAST:event_classpathBrowseButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton advancedSettingsButton;
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton classpathBrowseButton;
  private javax.swing.JLabel classpathLabel;
  private javax.swing.JTextField classpathTextField;
  private javax.swing.JLabel inputFileLabel;
  private javax.swing.JTextField inputFileTextField;
  private javax.swing.JButton inputTraceBrowseButton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel mainClassLabel;
  private javax.swing.JTextField mainClassTextField;
  private javax.swing.JLabel minConfidenceLabel;
  private javax.swing.JTextField minConfidenceTextField;
  private javax.swing.JLabel minDensityLabel;
  private javax.swing.JTextField minDensityTextField;
  private javax.swing.JLabel minSupportLabel;
  private javax.swing.JTextField minSupportTextField;
  private javax.swing.JPanel miningParameterPanel;
  private javax.swing.JPanel newProjectPanel;
  private javax.swing.JLabel projectNameLabel;
  private javax.swing.JTextField projectNameTextField;
  private javax.swing.JButton startMiningButton;
  private javax.swing.JButton targetFolderBrowseButton;
  private javax.swing.JLabel targetFolderLable;
  private javax.swing.JTextField targetFolderTextField;
  private javax.swing.JLabel taskNameLabel;
  private javax.swing.JTextField taskNameTextField;
  // End of variables declaration//GEN-END:variables

}
