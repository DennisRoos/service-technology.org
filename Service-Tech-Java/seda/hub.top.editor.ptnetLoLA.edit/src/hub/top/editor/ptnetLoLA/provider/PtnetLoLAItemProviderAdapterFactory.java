/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package hub.top.editor.ptnetLoLA.provider;

import hub.top.editor.ptnetLoLA.util.PtnetLoLAAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PtnetLoLAItemProviderAdapterFactory extends PtnetLoLAAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
   * This constructs an instance.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public PtnetLoLAItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Place} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected PlaceItemProvider placeItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Place}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createPlaceAdapter() {
    if (placeItemProvider == null) {
      placeItemProvider = new PlaceItemProvider(this);
    }

    return placeItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.PtNet} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected PtNetItemProvider ptNetItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.PtNet}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createPtNetAdapter() {
    if (ptNetItemProvider == null) {
      ptNetItemProvider = new PtNetItemProvider(this);
    }

    return ptNetItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Transition} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected TransitionItemProvider transitionItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Transition}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createTransitionAdapter() {
    if (transitionItemProvider == null) {
      transitionItemProvider = new TransitionItemProvider(this);
    }

    return transitionItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Node} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected NodeItemProvider nodeItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Node}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createNodeAdapter() {
    if (nodeItemProvider == null) {
      nodeItemProvider = new NodeItemProvider(this);
    }

    return nodeItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Marking} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected MarkingItemProvider markingItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Marking}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createMarkingAdapter() {
    if (markingItemProvider == null) {
      markingItemProvider = new MarkingItemProvider(this);
    }

    return markingItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.PlaceReference} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected PlaceReferenceItemProvider placeReferenceItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.PlaceReference}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createPlaceReferenceAdapter() {
    if (placeReferenceItemProvider == null) {
      placeReferenceItemProvider = new PlaceReferenceItemProvider(this);
    }

    return placeReferenceItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.RefMarkedPlace} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected RefMarkedPlaceItemProvider refMarkedPlaceItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.RefMarkedPlace}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createRefMarkedPlaceAdapter() {
    if (refMarkedPlaceItemProvider == null) {
      refMarkedPlaceItemProvider = new RefMarkedPlaceItemProvider(this);
    }

    return refMarkedPlaceItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Annotation} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected AnnotationItemProvider annotationItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Annotation}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createAnnotationAdapter() {
    if (annotationItemProvider == null) {
      annotationItemProvider = new AnnotationItemProvider(this);
    }

    return annotationItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.Arc} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ArcItemProvider arcItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.Arc}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createArcAdapter() {
    if (arcItemProvider == null) {
      arcItemProvider = new ArcItemProvider(this);
    }

    return arcItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.ArcToPlace} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ArcToPlaceItemProvider arcToPlaceItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.ArcToPlace}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createArcToPlaceAdapter() {
    if (arcToPlaceItemProvider == null) {
      arcToPlaceItemProvider = new ArcToPlaceItemProvider(this);
    }

    return arcToPlaceItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.ArcToTransition} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ArcToTransitionItemProvider arcToTransitionItemProvider;

	/**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.ArcToTransition}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createArcToTransitionAdapter() {
    if (arcToTransitionItemProvider == null) {
      arcToTransitionItemProvider = new ArcToTransitionItemProvider(this);
    }

    return arcToTransitionItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.TransitionExt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransitionExtItemProvider transitionExtItemProvider;

  /**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.TransitionExt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransitionExtAdapter() {
    if (transitionExtItemProvider == null) {
      transitionExtItemProvider = new TransitionExtItemProvider(this);
    }

    return transitionExtItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.PlaceExt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PlaceExtItemProvider placeExtItemProvider;

  /**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.PlaceExt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPlaceExtAdapter() {
    if (placeExtItemProvider == null) {
      placeExtItemProvider = new PlaceExtItemProvider(this);
    }

    return placeExtItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.ArcToPlaceExt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArcToPlaceExtItemProvider arcToPlaceExtItemProvider;

  /**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.ArcToPlaceExt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArcToPlaceExtAdapter() {
    if (arcToPlaceExtItemProvider == null) {
      arcToPlaceExtItemProvider = new ArcToPlaceExtItemProvider(this);
    }

    return arcToPlaceExtItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link hub.top.editor.ptnetLoLA.ArcToTransitionExt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArcToTransitionExtItemProvider arcToTransitionExtItemProvider;

  /**
   * This creates an adapter for a {@link hub.top.editor.ptnetLoLA.ArcToTransitionExt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArcToTransitionExtAdapter() {
    if (arcToTransitionExtItemProvider == null) {
      arcToTransitionExtItemProvider = new ArcToTransitionExtItemProvider(this);
    }

    return arcToTransitionExtItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

	/**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

	/**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

	/**
   * This adds a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

	/**
   * This removes a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

	/**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

	/**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public void dispose() {
    if (placeItemProvider != null) placeItemProvider.dispose();
    if (ptNetItemProvider != null) ptNetItemProvider.dispose();
    if (transitionItemProvider != null) transitionItemProvider.dispose();
    if (nodeItemProvider != null) nodeItemProvider.dispose();
    if (markingItemProvider != null) markingItemProvider.dispose();
    if (placeReferenceItemProvider != null) placeReferenceItemProvider.dispose();
    if (refMarkedPlaceItemProvider != null) refMarkedPlaceItemProvider.dispose();
    if (annotationItemProvider != null) annotationItemProvider.dispose();
    if (arcItemProvider != null) arcItemProvider.dispose();
    if (arcToPlaceItemProvider != null) arcToPlaceItemProvider.dispose();
    if (arcToTransitionItemProvider != null) arcToTransitionItemProvider.dispose();
    if (transitionExtItemProvider != null) transitionExtItemProvider.dispose();
    if (placeExtItemProvider != null) placeExtItemProvider.dispose();
    if (arcToPlaceExtItemProvider != null) arcToPlaceExtItemProvider.dispose();
    if (arcToTransitionExtItemProvider != null) arcToTransitionExtItemProvider.dispose();
  }

}
