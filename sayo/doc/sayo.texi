\input texinfo
@setfilename sayo.info
@include version.texi
@afourpaper
@finalout
@settitle Sayo User's Manual

@c --------------------------------------------------------------------------

@copying

@b{About this document:}

This manual is for Sayo, version @value{VERSION}, a tool to generate public view service automata from 2-bit operating guidelines, last updated @value{UPDATED}.

Copyright @copyright{} 2009 Christian Sura

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this GNU Manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* sayo: (sayo).       Sayo.
@end direntry


@c --------------------------------------------------------------------------

@titlepage

@title Sayo

@subtitle Service Automata Yielded from Operating guidelines
@subtitle @url{http://service-technology.org/sayo}
@vskip 0.5em
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Christian Sura
@page


@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c --------------------------------------------------------------------------

@ifnottex
@node Top
@top Sayo
@insertcopying
@end ifnottex

@c --------------------------------------------------------------------------

@menu
* First Steps::How to set up and install Sayo.
* Command Line Options::How to run Sayo.
* ChangeLog::Version history.
* From Open Net to Public View::What Sayo is actually doing.
* GNU Free Documentation License::The license of this manual.
@end menu

@c --------------------------------------------------------------------------

@contents
@paragraphindent none

@c --------------------------------------------------------------------------

@node First Steps
@chapter First Steps

@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/sayo} and download the latest release version of Sayo, say @file{sayo-@value{VERSION}.tar.gz}. To setup and compile Sayo, change into your download directory and type

@cartouche
@smallexample
tar xfz sayo-@value{VERSION}.tar.gz
cd sayo-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a binary @samp{src/sayo} is generated.@footnote{On Microsoft Windows, the file will be called @file{sayo.exe}.} If you experience any compiler warnings, don't panic: Sayo contains some generated or third party code that we cannot influence.

@item To test whether everything went fine, type

@cartouche
@smallexample
make check
@end smallexample
@end cartouche

to execute the testcases located in @file{tests}. If everything went fine, you should see something like:@footnote{Some tests use Fiona, Wendy and the Petri Net API Frontend to check whether the calculated operating guidelines are correct. If these tools were not found by the configure script, theses tests are skipped.}

@smallexample
===================
All 20 tests passed
===================
@end smallexample

If an error occurs, please send the output to @email{sayo@@service-technology.org}.

@item To install the binary, the manpage, and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Contents of the Distribution

The distribution contains several directories:

@table @file
@item doc
The Texinfo documentation of Sayo. The documentation can be created using @samp{make pdf}. Note you need to have Sayo properly installed before (see installation description above).

@item man
The manpage of Sayo which can be displayed using @samp{man sayo} after having Sayo installed (see installation description above).

@item src
The source code of Sayo.

@item tests
Testcases for Sayo which check the generated binary.
@end table




@c --------------------------------------------------------------------------


@node Command Line Options
@chapter Invoking Sayo

Sayo is a command line tool and does not come with a fancy @acronym{GUI}. However, Sayo can be easily scripted and combined with other tools.

@section Command Line Options

For an overview of the command line options, type @samp{sayo -h} to see the following help screen:

@smallexample
@include cmdline.out
@end smallexample




@c --------------------------------------------------------------------------


@node ChangeLog
@chapter Version History

Sayo is developed under the ``Release Early, Release Often'' maxime (see @url{http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html}): Whenever enough integrated or a non-trivial changes have summed up, a new version is published. Though this releases might now always mark significant changes, they at least allow to quickly fix bugs and avoid infinite procrastination.

@include ChangeLog.texi

@sp 3

The most recent change log is available at Sayo's website at 
@url{http://service-technology.org/files/sayo/ChangeLog}.



@c --------------------------------------------------------------------------



@node From Open Net to Public View
@chapter From Open Net to Public View

Below will be explained, how a public view of a given net is generated.

@section Workflow

Given a net of a service, a 2-bit operating guideline is computed by calling Wendy:@footnote{http://download.gna.org/service-tech/wendy/}

@cartouche
@smallexample
wendy service.owfn --og=service.og --formula=2bits 
@end smallexample
@end cartouche

Afterwards Sayo generates the public view@footnote{as a service automaton} being invoked by

@cartouche
@smallexample
sayo --input=service.og --output=public_view.sa
@end smallexample
@end cartouche

Finally a frontend of the Petri Net API@footnote{http://svn.gna.org/viewcvs/service-tech/trunk/pnapi/} can be used, to compile this service automaton to an open net:

@cartouche
@smallexample
sa2owfn public_view.sa public_view.owfn
@end smallexample
@end cartouche

or

@cartouche
@smallexample
sa2sm public_view.sa public_view.owfn
@end smallexample
@end cartouche

@section Sayo's Algorithm

The only input, Sayo can work with, are 2-bit operatong guidelines of services generated by Wendy. These guidelines have the following structure: 

@cartouche
@smallexample
INTERFACE
  INPUT
    a;
  OUTPUT
    b;

NODES
  1 :: S
    a -> 0
    b -> 2
  2
    a -> 3
  3 :: F
    a -> 0
    b -> 0
  0
    a -> 0
    b -> 0
@end smallexample
@end cartouche

The interface holds all messages, that can be sent or received by a partner of the service, i.e. INPUT-messages are messages, the partner can receive, and OUTPU-messages are messages, the partner can send.

The firt thing, Sayo does, is reading the interface, and switching the message type. I.e. if the partner can receive a message, the public view of the service hat to be able to send this message and vice versa. So for the operating guideline given above the interface of the public view's service automaton is:

@cartouche
@smallexample
INTERFACE
  INPUT
    b;
  OUTPUT
    a;
@end smallexample
@end cartouche

Wendy's 2-bit operating guidelines use state "0" as the "empty"-node. I.e. each time the original service will not send a message, a partner is still allowed to receive this message. So the operating guideline tells "if you receive this message, do what you want; everything is fine, you are not talking this this service". 
So when processing the nodes, everytime an event leads to state "0", it means, that the original service will not send this message, so the public view will not send this message either. Thus all events leading to node "0" will be ignored. Since this causes state "0" to not be reachable, the state itself will be ignored, too.

Next step: State "0" is created as the deadlock state needed later. and then all nodes of the operating guideline will be copied with all message events; the first node of the operating guideline becomes the initial state of the public view. 

Each time a sending event is missing in the operating guideline, the partner must not send this message, so the corresponding receive statement in the public view will lead to a deadlock state.
Doing this, the nodes are renamed, because new nodes will be created and name conflicts have to be avoided.

In a 2-bit operating guideline some node are signed with either an F-bit or an S-bit. "S" means, the partner must send a message to resolve a deadlock; "F" means, the partner can be final. 

In both cases, the public view may sends a message, but the partner cannot rely on that. So in both cases the signed node will be copied, but by copying all sending events of the public view are left out. A TAU-transition leads from the original node to its copy, so the public view is able to "decide" not to send any message.

If the node's bit is an "S", Sayo is done this this node, because now there is produced a deadlock which can only be resolved be a message sent by the partner.

If the node's bit is an "F", the copied node becomes a final state, so that the partner additionally has the chance to be final, and interaction between both ended successfully.

So the nodes of the public view for the service above look like

@cartouche
@smallexample
NODES
  0
  1: INITIAL
    b -> 2
    TAU -> 3
  3
    b -> 2
  2
    a -> 4
    b -> 0
  4
    b -> 0
    TAU -> 5
  5 : FINAL
    b -> 0
@end smallexample
@end cartouche

@section Example: Coffee Automaton
Given the service description of a coffee automaton as open net

@cartouche
@smallexample
{ coffee }

PLACE
INTERNAL
  p0,  { initial }
  p1,		
  p2,
  p3,
  p4;
INPUT
  e, 
  t,
  c;
OUTPUT
  b;

INITIALMARKING
  p0:	1
 ;

FINALMARKING
  p4:	1
 ;

TRANSITION t1	 { ?e }
CONSUME
  p0:	1,
  e: 1;	 
PRODUCE
  p1:	1;

TRANSITION t2	 { ?c }
CONSUME
  c:	1,
  p1: 1;
PRODUCE
  p2:	1;

TRANSITION t3	 { ?t }
CONSUME
  p1:	1,
  t : 1;
PRODUCE
  p3:	1;

TRANSITION t4	 { !b1 }
CONSUME
  p2:	1;
PRODUCE
  b:	1,
  p4 : 1;
 
TRANSITION t5	 { !b2 }
CONSUME
  p3:	1;
PRODUCE
  b:	1,
  p4 : 1;

{ END OF FILE }
@end smallexample
@end cartouche

Wendy generates the following 2-bit operating guideline

@cartouche
@smallexample
INTERFACE
  INPUT
    b;
  OUTPUT
    c, e, t;

NODES
  163624712 :: S
    b -> 0
    c -> 163666096
    e -> 163666192
    t -> 163669608
  163614776
    b -> 163614856
  163614856 :: F
    b -> 0
  163666096
    b -> 0
    e -> 163669568
  163666192 :: S
    b -> 0
    c -> 163669568
    t -> 163614776
  163669568
    b -> 163614856
  163669608
    b -> 0
    e -> 163614776
  0
    b -> 0
    c -> 0
    e -> 0
    t -> 0
@end smallexample
@end cartouche

Which Sayo translates to the following service automaton

@cartouche
@smallexample
INTERFACE
  INPUT c, e, t;
  OUTPUT b;

NODES
  0
  1: INITIAL
    c -> 2
    e -> 3
    t -> 4
    TAU -> 5
  5
    c -> 2
    e -> 3
    t -> 4
  6
    b -> 7
    c -> 0
    e -> 0
    t -> 0
  7
    c -> 0
    e -> 0
    t -> 0
    TAU -> 8
  8 : FINAL
    c -> 0
    e -> 0
    t -> 0
  2
    e -> 9
    c -> 0
    t -> 0
  3
    c -> 9
    t -> 6
    e -> 0
    TAU -> 10
  10
    c -> 9
    e -> 0
    t -> 6
  9
    b -> 7
    c -> 0
    e -> 0
    t -> 0
  4
    e -> 6
    c -> 0
    t -> 0
@end smallexample
@end cartouche

that can be translated to the following open net by sa2owfn@footnote{a tool provided by the Petri Net API}

@cartouche
@example
PLACE
  INTERNAL
    p0, p1, p2, p3, p4, p5, p6, p7;

  INPUT
    c, e, t;

  OUTPUT
    b;

INITIALMARKING
  p0;

FINALCONDITION
  ((p2 = 1) AND ALL_OTHER_PLACES_EMPTY);


TRANSITION tTAU
  CONSUME p0;
  PRODUCE p3, p5;

TRANSITION tTAU/1
  CONSUME p4;
  PRODUCE p2;

TRANSITION tTAU/2
  CONSUME p3, p7;
  PRODUCE p1;

TRANSITION tb
  CONSUME p6, p7;
  PRODUCE b, p4;

TRANSITION tc
  CONSUME c, p1;
  PRODUCE p6, p7;

TRANSITION tc/1
  CONSUME c, p6, p7;
  PRODUCE ;

TRANSITION tc/2
  CONSUME c, p5, p6;
  PRODUCE ;

TRANSITION tc/3
  CONSUME c, p2;
  PRODUCE ;

TRANSITION tc/4
  CONSUME c, p4;
  PRODUCE ;

TRANSITION tc/5
  CONSUME c, p3;
  PRODUCE p6;
@end example
@end cartouche

@cartouche
@example
TRANSITION tc/6
  CONSUME c, p0;
  PRODUCE p5, p6;

TRANSITION te
  CONSUME e, p5;
  PRODUCE p7;

TRANSITION te/1
  CONSUME e, p1;
  PRODUCE ;

TRANSITION te/2
  CONSUME e, p6, p7;
  PRODUCE ;

TRANSITION te/3
  CONSUME e, p2;
  PRODUCE ;

TRANSITION te/4
  CONSUME e, p4;
  PRODUCE ;

TRANSITION te/5
  CONSUME e, p3, p7;
  PRODUCE ;

TRANSITION te/6
  CONSUME e, p0;
  PRODUCE p3, p7;

TRANSITION tt
  CONSUME p1, t;
  PRODUCE p6, p7;

TRANSITION tt/1
  CONSUME p6, p7, t;
  PRODUCE ;

TRANSITION tt/2
  CONSUME p5, p6, t;
  PRODUCE ;

TRANSITION tt/3
  CONSUME p2, t;
  PRODUCE ;

TRANSITION tt/4
  CONSUME p4, t;
  PRODUCE ;

TRANSITION tt/5
  CONSUME p3, t;
  PRODUCE p6;
@end example
@end cartouche

@cartouche
@example
TRANSITION tt/6
  CONSUME p0, t;
  PRODUCE p5, p6;


{ END OF FILE '' }
@end example
@end cartouche



@c --------------------------------------------------------------------------

@node GNU Free Documentation License
@appendix The GNU Free Documentation License

@include fdl.texi

@bye
