@heading Version 3.1

@itemize
@item implementation of a re-analysis function which is applied to every IG/ OG that is computed, therefore after the re-analysis
@itemize
@item the graph does not contain any isolated blue nodes
@item in case parameter @code{-s bluenodes} is set, all red nodes are deleted from memory
@end itemize

@item statistical data of IG/ OG is gathered as the graph is built up and during re-analysis

@item adapted code to avoid deprecation warnings of GCC 4.2

@item ChangeLogs are now generated from Texinfo documentation

@item test cases using Graphviz Dot or Petrify are now skipped if the configure script did not find these tools

@item renamed file @file{fiona.h} to @file{config.h}

@item used macro @code{CONFIG_DOT} for Graphviz dot calls to achieve compatibility on systems where dot is not available

@item Fiona now supports operating guidelines with a global constraint
@itemize
@item constructing operating guideline with a global constraint (for a given owfn-file and a cov-file)
@item matching of an open net with an operating guideline with global constraint
@end itemize

@item added regression tests to @file{tests/regression} which can be triggered with @code{make check} in that directory

@item made adaptions to the Makefile options to be able to create Mac Universal binaries for 64 bit architectures (XCode 3.0 with SDK @samp{MacOSX10.5.sdk} is needed)

@item added Makefiles in directory @file{maintainer} to organize the distribution of the source tarball and binaries for several platforms

@item added a script @file{maintainer/get_petrify.sh} to retrieve precompiled binaries of Petrify from @url{http://www.lsi.upc.edu/~jordicf/petrify/} and install it into a user-defined directory

@item Fiona can be translated using the @acronym{LLVM}-frontend for GCC (see @url{http://llvm.org/})

@item made the shell scripts more portable by using @code{#!/usr/bin/env bash} instead of @code{#!/bin/bash} (especially important for FreeBSD systems)

@item updated @file{Doxyfile} and adapted output directories to the other tools (@file{dox})

@item fixed bugs since last version:
@itemize
@item bug #11905 (@url{https://gna.org/bugs/?11905}): max occurrences and OGs
@item bug #12101 (@url{https://gna.org/bugs/?12101}): file creation
@item bug #12207 (@url{https://gna.org/bugs/?12207}): parsing OG files with reduced arcs
@item bug #12239 (@url{https://gna.org/bugs/?12239}): re-normalization of normalized nets
@item bug #12484 (@url{https://gna.org/bugs/?12484}): inconsistent results for IG and OG
@item bug #12500 (@url{https://gna.org/bugs/?12500}): combination of @option{-s allnodes} and @option{-s empty} does not work
@item bug #12530 (@url{https://gna.org/bugs/?12530}): @code{new}-logger and @acronym{CUDD} package
@item bug #12564 (@url{https://gna.org/bugs/?12564}): matching
@item bug #12741 (@url{https://gna.org/bugs/?12741}): wrong numbers with parameter @option{-s rednodes}
@item bug #12765 (@url{https://gna.org/bugs/?12765}): controllability IG/OG
@item bug #12829 (@url{https://gna.org/bugs/?12829}): IG reduction
@end itemize
@end itemize


@heading Version 3.0

@itemize
@item Fiona now supports more service analysis scenarios
@itemize
@item given an og-file Fiona generates a public view
@item given two or more open nets such that there composition does not behave well, Fiona can generate an adapter -- either a rather small adapter or a most permissive adapter
@item Fiona is able to read adapter rules from file
@item given an open net file, Fiona can generate a partner open net for the given net - either a rather small partner or a most permissive one is generated
@end itemize

@item implemented powerful preprocessing and conversion functionalities for open nets and OGs
@itemize
@item minimization of a given OG
@item structural reduction of given open nets (reduction level can be set via command line)
@item normalization of given open nets
@item generation of png files of given open nets, OGs and IGs
@item given an OG, check for nodes that violate their own annotation
@item given an OG, removal of nodes that violate their own annotation
@item test, if given OG contains cycles
@item counting the number of strategies characterized by a given OG
@end itemize

@item Fiona reads a given OG File for further processing

@item the prefix of the output files can be set by command line

@item Fiona may run in quite mode, i.e., produces no output files

@item it is possible to tell Fiona not to generate a png-file and/ or not to generate any dot related output

@item in case of calculating an reduced IG, it is now possible to choose which reduction technique is used via command line

@item we optimized our algorithms resulting in a faster and more efficient computation of IG and OG

@item it is possible to disable assertions and to disable calls to trace functions, which makes the computation a lot faster (type @samp{./configure --disable-assert})

@item option @option{--bug} prints out detailed system and compilation information to better trace down bugs
@end itemize
