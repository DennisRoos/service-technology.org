include $(top_srcdir)/Makefile.covcommon

bin_PROGRAMS = fiona


#############################################################################
# Fiona's sources
#############################################################################

# the list of sources
fiona_SOURCES = syntax_owfn.yy syntax_owfn_wrap.h \
        lexer_owfn.ll lexer_owfn_wrap.h\
        syntax_og.yy lexer_og.ll\
        syntax_covog.yy lexer_covog.ll\
        syntax_cov.yy lexer_cov.ll\
        syntax_stg.yy lexer_stg.ll \
        syntax_adapt_rules.yy lexer_adapt_rules.ll \
        syntax_dot.yy lexer_dot.ll \
        dot2tex.h dot2tex.cc\
        PetriNetNode.h PetriNetNode.cc\
        IG.cc owfnPlace.cc CommunicationGraph.h\
        IG.h owfnPlace.h\
        OG.cc owfnTransition.cc\
        OG.h owfnTransition.h\
        debug.cc\
        binDecision.h binDecision.cc \
        searchTrace.h \
        debug.h \
        GraphEdge.h GraphEdge.cc \
        AnnotatedGraphEdge.h AnnotatedGraphEdge.cc \
        dimensions.h main.cc symboltab.cc\
        main.h symboltab.h\
        options.cc userconfig.h\
        options.h GraphNode.cc \
        formula.cc owfn.cc GraphNode.h \
        AnnotatedGraphNode.h AnnotatedGraphNode.cc \
        formula.h owfn.h CommunicationGraph.cc\
        getopt.c getopt1.c getopt.h \
        BddRepresentation.h BddRepresentation.cc \
        BddLabel.h BddLabel.cc \
        state.h state.cc \
        newlogger.h newlogger.cc mynew.h \
        Exchangeability.h Exchangeability.cc \
        Graph.h Graph.cc \
        AnnotatedGraph.h AnnotatedGraph.cc GraphFormula.h GraphFormula.cc \
        ConstraintOG.h ConstraintOG.cc \
        containers.h containers.cc\
	adapter.h adapter.cc\
        stg2owfn.cc set_helpers.h SinglyLinkedList.h\
        GastexGraph.h GastexGraph.cc


#--------------------------------------------------------------#
# GENERIC: organize distribution and cleaning of Bison sources #
#--------------------------------------------------------------#

BUILT_SOURCES =
EXTRA_DIST =
MAINTAINERCLEANFILES =
DISTCLEANFILES =

BISON_FILES = $(filter %.yy,$(fiona_SOURCES))
BUILT_SOURCES += $(BISON_FILES:.yy=.cc) $(BISON_FILES:.yy=.hh) lexer_owfn.cc
EXTRA_DIST += $(BISON_FILES:.yy=.hh)
MAINTAINERCLEANFILES += $(BISON_FILES:.yy=.hh)

# fix for Automake 1.12
$(BISON_FILES:.yy=.hh):
	$(AM_V_GEN) mv $(@:.hh=.h) $@


##############################################################################
## Settings for Flex and Bison
##############################################################################
#
## flags for Bison
## Note: do not use "--defines", because Automake only recognizes "-d"
## (see http://www.gnu.org/software/automake/manual/automake.html#Yacc-and-Lex)
AM_YFLAGS = -d --yacc #--no-lines
#
## Note: $(fiona_SOURCES:.yy=.h) cannot be used though it should be equivalent
## add here all files that are built by bison
#YYSOURCES = syntax_owfn.cc syntax_og.cc syntax_stg.cc syntax_adapt_rules.cc \
#	syntax_dot.cc syntax_owfn.h syntax_og.h syntax_stg.h \
#	syntax_adapt_rules.h syntax_dot.h
#
## add here all files that are built by flex
#LLSOURCES = lexer_owfn.cc lexer_og.cc lexer_stg.cc lexer_adapt_rules.cc \
#	lexer_dot.cc lexer_owfn.h 
#
## all files generated by additional tools like flex and bison
## note: always mention bison files before flex files, otherwise an error may occur
#BUILT_SOURCES = $(YYSOURCES) $(LLSOURCES)
#
## [NL] Do we care about prehistoric Flex versions?
#lexer_owfn.h: lexer_owfn.cc
#	$(EGREP) '^#define.*FLEX.*VERSION' $^ > $@
#EXTRA_DIST = lexer_owfn.h


#############################################################################
# organize cleaning
#############################################################################

# a target to avoid problems with Radon
# [NL] Why is this needed? What _are_ the problems with Radon?
veryclean: clean
	-rm -f $(BUILT_SOURCES)


#############################################################################
# set compiler flags (optimization level, warnings, includes, libraries...)
#############################################################################
# [NL] Do we really want to force optimization levels? No!
# [NL] Do we really want to force warnings? No!
#OPTIMIZATION_LEVEL= -O3 #-g -O2
#WARNINGS=-W -Wall -Wno-unused

# flags for the preprocessor: set the include path found by configure
fiona_CPPFLAGS = -I$(top_srcdir)/libs/cudd/include \
	-I$(top_srcdir)/libs/pnapi

# flags for the C and C++ compiler
fiona_CXXFLAGS = $(OPTIMIZATION_LEVEL) $(WARNINGS) @configured_CXXFLAGS@
fiona_CFLAGS = $(OPTIMIZATION_LEVEL) $(WARNINGS) @configured_CFLAGS@

# flags for the linker
fiona_LDFLAGS = @configured_LDFLAGS@

# list all libraries Fiona needs
fiona_LDADD = $(builddir)/../libs/cudd/libobj.a \
	$(builddir)/../libs/cudd/libdddmp.a \
	$(builddir)/../libs/cudd/libcudd.a \
	$(builddir)/../libs/cudd/libmtr.a \
	$(builddir)/../libs/cudd/libst.a \
	$(builddir)/../libs/cudd/libutil.a \
	$(builddir)/../libs/cudd/libepd.a \
        $(builddir)/../libs/pnapi/lib_pnapi.a


#############################################################################
# [NL] This needs to be documented
allcov: $(BUILT_SOURCES) config.h
	$(MAKE) $(AM_MAKEFLAGS) CXX="$(CXXCOV)" all
	-$(MAKE) $(AM_MAKEFLAGS) cleandeps

