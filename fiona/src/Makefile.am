include $(top_srcdir)/Makefile.covcommon

bin_PROGRAMS = fiona


#############################################################################
# Fiona's sources
#############################################################################

# the list of sources
fiona_SOURCES = syntax_owfn.yy syntax_owfn_wrap.h \
        lexer_owfn.ll lexer_owfn_wrap.h\
        syntax_og.yy lexer_og.ll\
        syntax_stg.yy lexer_stg.ll \
        syntax_adapt_rules.yy lexer_adapt_rules.ll \
        syntax_dot.yy lexer_dot.ll \
        dot2tex.h dot2tex.cc\
        PetriNetNode.h PetriNetNode.cc\
        IG.cc owfnPlace.cc CommunicationGraph.h\
        IG.h owfnPlace.h\
        OG.cc owfnTransition.cc\
        OG.h owfnTransition.h\
        debug.cc\
        binDecision.h binDecision.cc \
        searchTrace.h \
        debug.h \
        GraphEdge.h GraphEdge.cc \
        AnnotatedGraphEdge.h AnnotatedGraphEdge.cc \
        dimensions.h main.cc symboltab.cc\
        main.h symboltab.h\
        options.cc userconfig.h\
        options.h GraphNode.cc \
        formula.cc owfn.cc GraphNode.h \
        AnnotatedGraphNode.h AnnotatedGraphNode.cc \
        formula.h owfn.h CommunicationGraph.cc\
        getopt.c getopt1.c getopt.h \
        BddRepresentation.h BddRepresentation.cc \
        BddLabel.h BddLabel.cc \
        state.h state.cc \
        newlogger.h newlogger.cc mynew.h \
        Exchangeability.h Exchangeability.cc \
        Graph.h Graph.cc \
        AnnotatedGraph.h AnnotatedGraph.cc GraphFormula.h GraphFormula.cc \
        containers.h containers.cc\
	adapter.h adapter.cc\
        stg2owfn.cc set_helpers.h SinglyLinkedList.h\
        GastexGraph.h GastexGraph.cc


#############################################################################
# Settings for Flex and Bison
#############################################################################

# flags for Bison
# Note: do not use "--defines", because Automake only recognizes "-d"
# (see http://www.gnu.org/software/automake/manual/automake.html#Yacc-and-Lex)
AM_YFLAGS = -d --yacc #--no-lines

# Note: $(fiona_SOURCES:.yy=.h) cannot be used though it should be equivalent
# add here all files that are built by bison
YYSOURCES = syntax_owfn.cc syntax_og.cc syntax_stg.cc syntax_adapt_rules.cc syntax_dot.cc \
	    syntax_owfn.h syntax_og.h syntax_stg.h syntax_adapt_rules.h syntax_dot.h

# add here all files that are built by flex
LLSOURCES = lexer_owfn.cc lexer_og.cc lexer_stg.cc lexer_adapt_rules.cc lexer_dot.cc \
	    lexer_owfn.h 

# all files generated by additional tools like flex and bison
# note: always mention bison files before flex files, otherwise an error may occur
BUILT_SOURCES = $(YYSOURCES) $(LLSOURCES)

# [NL] Do we care about prehistoric Flex versions?
lexer_owfn.h: lexer_owfn.cc
	$(EGREP) '^#define.*FLEX.*VERSION' $^ > $@
EXTRA_DIST = lexer_owfn.h


#############################################################################
# organize cleaning
#############################################################################

# a target to avoid problems with Radon
# [NL] Why is this needed? What _is_ the problem with Radon?
veryclean: clean
	-rm -f $(BUILT_SOURCES)

# [NL] Who needs this target?
clean-local: cleandeps


#############################################################################
# set compiler flags (optimization level, warnings, includes, libraries...)
#############################################################################

# Set 64bit compile and link flags if 64bit was configured
if ENABLE_64BIT
LINK_COMPILE_64BIT_FLAG = -m64
else
LINK_COMPILE_64BIT_FLAG =
endif

# [NL] Do we really want to force optimization levels?
OPTIMIZATION_LEVEL= -O3 #-g -O2

# [NL] Do we really want to force warnings?
WARNINGS=-W -Wall -Wno-unused

# set the include path found by configure
# [NL] Why is "all_includes" needed?
fiona_CPPFLAGS = -I$(builddir)/../cudd/include $(all_includes)

# flags for the C and C++ compiler
# [NL] Wouldn't it be cleaner to use "+=" instead of just "="
fiona_CXXFLAGS = ${LINK_COMPILE_64BIT_FLAG} $(OPTIMIZATION_LEVEL) $(WARNINGS)
fiona_CFLAGS = ${LINK_COMPILE_64BIT_FLAG} $(OPTIMIZATION_LEVEL) $(WARNINGS)

# flags for the linker
# [NL] Why is "all_libraries" needed?
fiona_LDFLAGS = ${LINK_COMPILE_64BIT_FLAG} $(all_libraries) 

# list all libraries Fiona needs
fiona_LDADD = $(builddir)/../cudd/obj/libobj.a \
	$(builddir)/../cudd/dddmp/libdddmp.a $(builddir)/../cudd/cudd/libcudd.a \
	$(builddir)/../cudd/mtr/libmtr.a $(builddir)/../cudd/st/libst.a \
	$(builddir)/../cudd/util/libutil.a $(builddir)/../cudd/epd/libepd.a \
        lib_pnapi.a


# [NL] This needs to be documented
allcov: $(BUILT_SOURCES) fiona.h
	$(MAKE) $(AM_MAKEFLAGS) CXX="$(CXXCOV)" all
	$(MAKE) $(AM_MAKEFLAGS) cleandeps


#############################################################################
# Petri Net API
#############################################################################
lib_LIBRARIES = lib_pnapi.a

lib_pnapi_a_SOURCES = pnapi/pnapi.cc pnapi/pnapi.h\
		      pnapi/helpers.cc pnapi/helpers.h \
		      pnapi/options.h \
		      pnapi/petrinet-output.cc \
		      pnapi/petrinet-reduction.cc \
		      pnapi/petrinet.cc \
		      pnapi/petrinet.h
