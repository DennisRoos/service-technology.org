#line 2 "parser-owfn-lexer.cc"

#line 4 "parser-owfn-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pnapi_owfn_yy_create_buffer
#define yy_delete_buffer pnapi_owfn_yy_delete_buffer
#define yy_flex_debug pnapi_owfn_yy_flex_debug
#define yy_init_buffer pnapi_owfn_yy_init_buffer
#define yy_flush_buffer pnapi_owfn_yy_flush_buffer
#define yy_load_buffer_state pnapi_owfn_yy_load_buffer_state
#define yy_switch_to_buffer pnapi_owfn_yy_switch_to_buffer
#define yyin pnapi_owfn_yyin
#define yyleng pnapi_owfn_yyleng
#define yylex pnapi_owfn_yylex
#define yylineno pnapi_owfn_yylineno
#define yyout pnapi_owfn_yyout
#define yyrestart pnapi_owfn_yyrestart
#define yytext pnapi_owfn_yytext
#define yywrap pnapi_owfn_yywrap
#define yyalloc pnapi_owfn_yyalloc
#define yyrealloc pnapi_owfn_yyrealloc
#define yyfree pnapi_owfn_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pnapi_owfn_yyrestart(pnapi_owfn_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pnapi_owfn_yyleng;

extern FILE *pnapi_owfn_yyin, *pnapi_owfn_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pnapi_owfn_yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pnapi_owfn_yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pnapi_owfn_yyleng; ++yyl )\
                    if ( pnapi_owfn_yytext[yyl] == '\n' )\
                        --pnapi_owfn_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pnapi_owfn_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pnapi_owfn_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pnapi_owfn_yyrestart()), so that the user can continue scanning by
	 * just pointing pnapi_owfn_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pnapi_owfn_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pnapi_owfn_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pnapi_owfn_yywrap()'s to do buffer switches
 * instead of setting up a fresh pnapi_owfn_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pnapi_owfn_yyrestart (FILE *input_file  );
void pnapi_owfn_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pnapi_owfn_yy_create_buffer (FILE *file,int size  );
void pnapi_owfn_yy_delete_buffer (YY_BUFFER_STATE b  );
void pnapi_owfn_yy_flush_buffer (YY_BUFFER_STATE b  );
void pnapi_owfn_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pnapi_owfn_yypop_buffer_state (void );

static void pnapi_owfn_yyensure_buffer_stack (void );
static void pnapi_owfn_yy_load_buffer_state (void );
static void pnapi_owfn_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pnapi_owfn_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pnapi_owfn_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pnapi_owfn_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pnapi_owfn_yy_scan_bytes (yyconst char *bytes,int len  );

void *pnapi_owfn_yyalloc (yy_size_t  );
void *pnapi_owfn_yyrealloc (void *,yy_size_t  );
void pnapi_owfn_yyfree (void *  );

#define yy_new_buffer pnapi_owfn_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pnapi_owfn_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pnapi_owfn_yy_create_buffer(pnapi_owfn_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pnapi_owfn_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pnapi_owfn_yy_create_buffer(pnapi_owfn_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pnapi_owfn_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pnapi_owfn_yyin = (FILE *) 0, *pnapi_owfn_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int pnapi_owfn_yylineno;

int pnapi_owfn_yylineno = 1;

extern char *pnapi_owfn_yytext;
#define yytext_ptr pnapi_owfn_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pnapi_owfn_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pnapi_owfn_yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[815] =
    {   0,
        0,    0,    5,    5,    0,    0,   58,   54,   55,   55,
       46,   54,   47,   48,   51,   54,   52,   49,   50,   41,
       44,   40,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,    3,   56,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    3,
        4,   19,   18,   18,   19,   19,   20,   20,   20,   19,
       19,   20,   20,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,    3,   20,   54,    2,
       53,   52,   43,   45,   42,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   38,   54,   54,   54,   54,   54,
       54,   54,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   54,   37,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   39,   54,   54,   54,   54,   54,   54,
       54,   54,   54,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   54,   54,   25,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   28,   54,
       11,   54,   54,    9,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   11,   19,
       19,    9,   54,   54,   54,   54,   10,   54,   54,   15,
       54,   54,   54,   54,   54,   54,   12,   29,   54,   54,

       54,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       19,   19,   19,   19,   10,   19,   19,   15,   19,   19,
       19,   19,   19,   19,   12,   19,   19,   19,   19,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   16,   54,   54,   54,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   16,   19,   19,   19,
       54,   54,   54,   26,   54,   54,   54,   54,   54,   54,

       54,   54,    7,   27,   54,   54,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    7,   19,   19,   19,   54,   54,
       54,   54,   54,   54,   54,   14,   54,   54,   54,   54,
       54,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   19,   19,   19,   19,   19,   19,
       19,   14,   19,   19,   19,   19,   19,   54,   54,   32,
       54,   54,   54,   13,   54,   54,   54,   54,   54,   54,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,   19,   19,   19,   19,   19,   19,   13,
       19,   19,   19,   19,   19,   19,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   17,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   17,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   31,
       30,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   54,   54,   54,   54,   54,
       22,   54,   54,   54,   54,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   54,   54,   54,   54,   54,
       54,   54,   54,   54,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   54,   54,   54,   54,   24,   21,   54,   54,
       23,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   54,
       54,   54,   54,    8,   54,    5,    5,    5,    5,    5,
        5,   19,   19,   19,   19,    8,   19,   54,   54,   54,
       33,   54,    5,    5,    5,    5,    5,   19,   19,   19,

       19,   19,   54,   54,   54,    6,    5,    5,    5,    5,
       19,   19,   19,    6,   54,   54,   54,    5,    5,    5,
       19,   19,   19,   54,   54,   54,    5,    5,    5,   19,
       19,   19,   54,   54,   54,    5,    5,    5,   19,   19,
       19,   54,   54,   54,    5,    5,    5,   19,   19,   19,
       54,   54,   34,    5,    5,    5,   19,   19,   19,   54,
       54,    5,    5,   19,   19,   54,   54,    5,    5,   19,
       19,   54,   54,    5,    5,   19,   19,   54,   54,    5,
        5,   19,   19,   54,   54,    5,    5,   19,   19,   54,
       54,    5,    5,   19,   19,   54,   54,    5,    5,   19,

       19,   54,   54,    5,    5,   19,   19,   36,   35,    5,
        5,   19,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    5,    1,    1,    1,    6,
        7,    1,    1,    8,    9,    1,    1,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   12,   13,
       14,   15,    1,    1,   16,    1,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,    1,   36,   37,   38,
        1,    1,    1,    1,   39,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    2,    2,    1,    1,    2,    2,    2,    1,    1,
        2,    2,    1,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4
    } ;

static yyconst flex_int16_t yy_base[820] =
    {   0,
        0,    0,   41,    0,   82,    0, 1135,    0, 1136, 1136,
        0, 1093, 1136, 1136, 1136, 1123, 1122, 1136, 1136,  110,
     1136, 1117,  101, 1102,  111, 1102, 1112, 1099,  102,  107,
      114, 1095, 1120, 1136,  150,    0,    0,  189, 1083,    0,
        0,    0, 1113, 1112,    0,    0,  125,    0, 1107,  116,
     1092,  121, 1092, 1102, 1089,  115,  135,  131, 1085, 1110,
     1136, 1100, 1136, 1136, 1099,  131, 1136, 1136, 1136,  140,
      145, 1136, 1136,  155,    0, 1098,  151,  153,  157,  160,
      161,  165,  171,  185,  170,  117, 1106, 1136,    0, 1136,
     1100, 1099, 1136,    0, 1136, 1083, 1089,  156, 1081, 1078,

      185, 1068,  184, 1064,    0, 1069, 1085, 1069, 1071, 1078,
     1070,  178, 1136,    0,    0, 1086, 1085,    0,    0,    0,
     1069, 1075,  179, 1067, 1064,  186, 1054,  200, 1050,    0,
     1055, 1071, 1055, 1057, 1064, 1056,  205,    0, 1068,    0,
      212,  213,    0, 1067,    0,  210,  214,  211,  216,  217,
      222,  220,  226,  223, 1066,  228,  233,  234,  236,  238,
      239,  253, 1040,    0, 1046, 1044, 1044, 1059, 1041, 1039,
     1053, 1032, 1047,    0, 1044, 1039, 1050, 1033, 1047, 1045,
     1046, 1035, 1042, 1021,    0, 1027, 1025, 1025, 1040, 1022,
     1020, 1034, 1013, 1028,    0, 1025, 1020, 1031, 1014, 1028,

     1026, 1027, 1016, 1023,  240, 1027,  243,  249,  246,  254,
      257,  258,  262,  259,  260, 1026,  263,  266,  272,  270,
      279,  277,  285,  280,  286,  280,  277,    0, 1020, 1013,
     1014, 1003, 1004,  278, 1007, 1005,  998, 1012,  998,  995,
        0, 1006,  995,    0,  285,  282,    0, 1007, 1000, 1001,
      990,  991,  289,  994,  992,  985,  999,  985,  982,    0,
      993,  982,    0,  290,  287,  999,  308,  310,  311,  312,
      315,  314,  316,  319,  317,  318,  322,  324,  998,  327,
      325,  997,  977,  984,  977,  981,    0,  327,  990,    0,
      162,  988,  977,  987,  974,  968,    0,    0,  983,  968,

      975,  964,  971,  964,  968,    0,  333,  977,    0,  335,
      975,  964,  974,  961,  955,    0,    0,  970,  955,  962,
      338,  342,  346,  347,  970,  349,  354,  969,  358,  362,
      355,  367,  360,  351,  968,  967,  372,  366,  373,  958,
      963,  962,  958,  948,  959,  949,  957,  956,  954,  947,
      944,  939,    0,  948,  938,  932,  942,  947,  946,  942,
      932,  943,  933,  941,  940,  938,  931,  928,  923,    0,
      932,  922,  916,  376,  377,  378,  381,  385,  387,  390,
      391,  392,  395,  388,  396,  400,  934,  403,  402,  404,
      928,  929,  922,    0,  917,  912,  916,  924,  915,  905,

      908,  911,    0,    0,  909,  912,  915,  916,  909,    0,
      904,  899,  903,  911,  902,  892,  895,  898,    0,    0,
      896,  899,  405,  406,  411,  907,  412,  413,  414,  418,
      417,  419,  422,  424,  906,  905,  427,  432,  887,  898,
      889,  897,  890,  897,  893,    0,  880,  876,  893,  420,
      880,  876,  887,  878,  886,  879,  886,  882,    0,  869,
      865,  882,  428,  869,  431,  444,  433,  443,  435,  450,
      451,  882,  453,  454,  455,  458,  459,  856,  862,    0,
      870,  869,  860,    0,  859,  870,  857,  849,  852,  858,
      845,  851,    0,  859,  858,  849,    0,  848,  859,  846,

      838,  841,  847,  460,  461,  859,  462,  466,  463,  858,
      464,  477,  469,  326,  468,  465,  478,  832,  837,  842,
      844,  848,  827,  841,  845,  831,    0,  485,  823,  828,
      833,  835,  839,  818,  832,  836,  822,    0,  492,  484,
      476,  489,  496,  498,  491,  504,  505,  499,  839,  816,
      824,  825,  830,  825,  826,  823,  818,  825,  820,    0,
        0,  806,  814,  815,  820,  815,  816,  813,  808,  815,
      810,    0,    0,  508,  511,  512,  513,  519,  515,  520,
      521,  526,  527,  818,  817,  797,  796,  812,  801,  798,
        0,  798,  807,  788,  795,  788,  787,  803,  792,  789,

        0,  789,  798,  779,  786,  525,  532,  533,  537,  538,
      798,  540,  539,  541,  543,  792,  791,  792,  779,  780,
      785,  786,  785,  782,  783,  782,  783,  770,  771,  776,
      777,  776,  773,  545,  554,  555,  546,  547,  557,  563,
      565,  566,  762,  761,  772,  757,    0,    0,  757,  761,
        0,  756,  755,  766,  751,    0,    0,  751,  755,    0,
      567,  569,  571,  572,  767,  766,  574,  575,  765,  751,
      750,  744,  738,    0,  741,  746,  745,  739,  733,    0,
      736,  577,  580,  578,  579,  754,  581,  751,  750,  726,
        0,  732,  747,  746,  722,    0,  728,  583,  587,  582,

      745,  594,  733,  732,  737,    0,  730,  729,  734,    0,
      595,  597,  598,  738,  712,  711,  723,  709,  708,  720,
      599,  601,  604,  716,  715,  714,  713,  712,  711,  605,
      610,  613,  714,  713,  704,  711,  710,  701,  611,  618,
      614,  717,  716,  694,  714,  713,  691,  615,  619,  609,
      710,  709,    0,  708,  707,    0,  627,  631,  709,  703,
      702,  701,  700,  635,  636,  686,  685,  684,  683,  637,
      638,  675,  674,  673,  672,  623,  639,  691,  690,  689,
      688,  642,  644,  680,  679,  678,  676,  645,  646,  670,
      660,  659,  658,  650,  651,  653,  651,  650,  649,  643,

      652,  644,  640,  638,  637,  653,  654,    0,    0,    0,
        0,  659,  548, 1136,  284,  691,  694,  697,  700
    } ;

static yyconst flex_int16_t yy_def[820] =
    {   0,
      814,    1,  814,    3,  814,    5,  814,  815,  814,  814,
      815,  815,  814,  814,  814,  815,  815,  814,  814,  815,
      814,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  814,  814,  816,  817,  817,  816,   38,  817,
      817,  817,   38,   38,  817,  817,   38,  817,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  817,
      814,  818,  814,  814,  818,  818,  814,  814,  814,  818,
      818,  814,  814,  818,  819,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  814,  814,  815,  814,
      815,  815,  814,  815,  814,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  814,   38,  817,   38,   38,  817,   38,  817,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  817,  818,  819,
      818,  818,  819,  818,  819,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  815,  815,  815,  815,  815,
      815,  815,  815,  815,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  815,  815,  815,  815,  815,  815,  815,  815,
      815,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  815,
      815,  815,  815,  815,  815,   38,   38,   38,   38,   38,
       38,  818,  818,  818,  818,  818,  818,  815,  815,  815,
      815,  815,   38,   38,   38,   38,   38,  818,  818,  818,

      818,  818,  815,  815,  815,  815,   38,   38,   38,   38,
      818,  818,  818,  818,  815,  815,  815,   38,   38,   38,
      818,  818,  818,  815,  815,  815,   38,   38,   38,  818,
      818,  818,  815,  815,  815,   38,   38,   38,  818,  818,
      818,  815,  815,  815,   38,   38,   38,  818,  818,  818,
      815,  815,  815,   38,   38,   38,  818,  818,  818,  815,
      815,   38,   38,  818,  818,  815,  815,   38,   38,  818,
      818,  815,  815,   38,   38,  818,  818,  815,  815,   38,
       38,  818,  818,  815,  815,   38,   38,  818,  818,  815,
      815,   38,   38,  818,  818,  815,  815,   38,   38,  818,

      818,  815,  815,   38,   38,  818,  818,  815,  815,   38,
       38,  818,  818,    0,  814,  814,  814,  814,  814
    } ;

static yyconst flex_int16_t yy_nxt[1178] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,    8,   25,
        8,    8,   26,    8,    8,   27,   28,   29,   30,    8,
        8,   31,   32,    8,    8,    8,    8,    8,    8,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   35,   35,
       52,   35,   35,   53,   35,   35,   54,   55,   56,   57,
       35,   35,   58,   59,   35,   35,   35,   35,   35,   35,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   62,

       62,   79,   62,   62,   80,   62,   62,   81,   82,   83,
       84,   62,   62,   85,   86,   62,   62,   62,   62,   62,
       62,   87,   88,   93,   94,   96,   99,   97,  104,  110,
      140,  107,  105,  100,  108,  106,  124,  109,  118,  119,
      121,  129,  122,  125,  140,  130,  135,  162,  131,  141,
      111,  115,  115,  140,  142,  115,  115,  115,  140,  132,
      115,  115,  133,  115,  140,  134,  140,  136,  143,  144,
      140,   90,  149,  140,  140,  146,  152,  147,  140,  150,
      148,  347,  165,  140,  140,  160,  151,  166,  348,  115,
      115,  115,  153,  182,  115,  115,  115,  154,  140,  115,

      115,  155,  115,  173,  156,  186,  161,  169,  190,  157,
      187,  183,  158,  170,  191,  159,  174,  171,  192,  194,
      203,  141,  142,  140,  140,  140,  140,  140,  115,  140,
      140,  206,  195,  140,  205,  140,  140,  207,  204,  140,
      209,  140,  208,  210,  211,  215,  140,  140,  219,  140,
      212,  140,  140,  140,  213,  214,  140,  222,  216,  140,
      218,  217,  140,  221,  220,  223,  140,  140,  224,  268,
      140,  140,  140,  140,  265,  140,  140,  267,  264,  140,
      271,  266,  273,  140,   89,  140,  225,  274,  276,  269,
      140,  270,  140,  140,  275,  279,  278,  272,  140,  140,

      140,  280,  277,  140,  282,  292,  281,  283,  284,  285,
      286,  293,  302,  303,  304,  305,  311,  321,  322,  323,
      324,  140,  312,  140,  140,  140,  325,  140,  140,  140,
      140,  140,  140,  327,  326,  140,  335,  140,  140,  140,
      140,  330,  332,  344,  328,  329,  333,  331,  338,  361,
      334,  140,  345,  336,  364,  140,  339,  337,  362,  140,
      140,  365,  140,  547,  140,  378,  375,  140,  140,  380,
      374,  140,  377,  140,  379,  140,  376,  381,  383,  140,
      140,  384,  385,  387,  382,  140,  140,  386,  388,  140,
      140,  140,  424,  425,  140,  390,  389,  423,  140,  426,

      140,  140,  428,  140,  140,  140,  430,  431,  140,  140,
      433,  432,  427,  140,  429,  140,  140,  140,  140,  140,
      434,  436,  466,  465,  140,  140,  140,  140,  435,  437,
      140,  140,  140,  467,  471,  140,  438,  140,  468,  470,
      140,  472,  488,  469,  140,  140,  140,  489,  140,  475,
      501,  474,  473,  476,  477,  502,  140,  140,  508,  506,
      507,  504,  505,  140,  140,  509,  140,  140,  140,  510,
      513,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      514,  140,  140,  511,  541,  515,  516,  512,  542,  140,
      140,  549,  540,  543,  544,  545,  550,  140,  539,  546,

      551,  548,  140,  562,  140,  140,  552,  563,  578,  140,
      574,  140,  140,  564,  575,  579,  581,  140,  140,  580,
      576,  140,  577,  584,  140,  140,  140,  583,  140,  582,
      585,  609,  140,  140,  140,  611,  608,  607,  140,  140,
      140,  610,  612,  606,  614,  140,  140,  613,  636,  615,
      140,  140,  140,  140,  140,  640,  140,  634,  140,  140,
      140,  140,  637,  661,  635,  638,  639,  140,  140,  642,
      140,  663,  662,  665,  664,  641,  140,  666,  140,  140,
      140,  667,  140,  668,  140,  140,  669,  140,  140,  684,
      140,  140,  140,  140,  140,  140,  140,  682,  711,  683,

      140,  687,  712,  698,  685,  686,  699,  140,  140,  700,
      140,  140,  140,  702,  140,  701,  723,  140,  140,  721,
      713,  722,  140,  140,  140,  714,  140,  140,  140,  732,
      757,  140,  140,  739,  758,  748,  140,  730,  740,  731,
      140,  741,  749,  764,  140,  759,  750,  765,  140,  140,
      140,  140,  140,  770,  771,  140,  140,  140,  140,  140,
      788,  782,  789,  140,  140,  140,  140,  140,  776,  777,
      794,  795,  140,  811,  810,  806,  809,  783,  800,  801,
      808,  805,  804,  803,  807,  802,  799,  798,  797,  812,
      813,  114,  114,  114,  115,  115,  115,  139,  796,  139,

      140,  793,  140,  792,  791,  790,  787,  786,  785,  784,
      781,  780,  779,  778,  775,  774,  773,  772,  769,  768,
      767,  766,  140,  763,  762,  761,  760,  756,  755,  754,
      753,  752,  751,  747,  746,  745,  744,  743,  742,  738,
      737,  736,  735,  734,  733,  729,  728,  727,  726,  725,
      724,  140,  720,  719,  718,  717,  716,  715,  140,  710,
      709,  708,  707,  706,  705,  704,  703,  140,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  140,  140,
      140,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  660,  659,  658,  657,  656,  655,  654,

      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  140,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      140,  140,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  140,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  140,  140,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  140,  503,  500,  499,  498,

      497,  496,  495,  494,  493,  492,  491,  490,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  140,  140,
      140,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  140,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      140,  140,  140,  140,  373,  372,  371,  370,  369,  368,
      367,  366,  363,  360,  359,  358,  357,  356,  355,  354,

      353,  352,  351,  350,  349,  346,  343,  342,  341,  340,
      140,  140,  140,  320,  319,  318,  317,  316,  315,  314,
      313,  310,  309,  308,  307,  306,  301,  300,  299,  298,
      297,  296,  295,  294,  291,  290,  289,  288,  287,  140,
      140,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  140,
      140,  140,  202,  201,  200,  199,  198,  197,  196,  193,
      189,  188,  185,  184,  117,  116,  181,  180,  179,  178,

      177,  176,  175,  172,  168,  167,  164,  163,   92,   91,
      113,  145,  140,  140,  138,  137,  128,  127,  126,  123,
      120,  117,  116,   90,  113,  112,  103,  102,  101,   98,
       95,   92,   91,   90,  814,    7,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814
    } ;

static yyconst flex_int16_t yy_chk[1178] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   20,   20,   23,   25,   23,   29,   31,
       86,   30,   29,   25,   30,   29,   52,   30,   47,   47,
       50,   56,   50,   52,   66,   56,   58,   86,   56,   70,
       31,   35,   35,   70,   71,   35,   35,   35,   71,   57,
       35,   35,   57,   35,   77,   57,   78,   58,   74,   74,
       79,   66,   79,   80,   81,   77,   81,   77,   82,   79,
       78,  291,   98,   85,   83,   85,   80,   98,  291,   35,
       38,   38,   82,  112,   38,   38,   38,   83,   84,   38,

       38,   83,   38,  103,   83,  123,   85,  101,  126,   84,
      123,  112,   84,  101,  126,   84,  103,  101,  126,  128,
      137,  141,  142,  146,  148,  141,  142,  147,   38,  149,
      150,  147,  128,  152,  146,  151,  154,  148,  137,  153,
      149,  156,  148,  150,  151,  153,  157,  158,  157,  159,
      151,  160,  161,  205,  151,  152,  207,  160,  153,  209,
      156,  154,  208,  159,  158,  161,  162,  210,  162,  210,
      211,  212,  214,  215,  207,  213,  217,  209,  205,  218,
      213,  208,  215,  220,  815,  219,  162,  217,  219,  211,
      222,  212,  221,  224,  218,  222,  221,  214,  223,  225,

      265,  223,  220,  264,  225,  234,  224,  226,  226,  227,
      227,  234,  245,  245,  246,  246,  253,  264,  264,  265,
      265,  267,  253,  268,  269,  270,  267,  272,  271,  273,
      275,  276,  274,  269,  268,  277,  276,  278,  281,  514,
      280,  272,  273,  288,  270,  271,  274,  272,  280,  307,
      275,  321,  288,  277,  310,  322,  281,  278,  307,  323,
      324,  310,  326,  514,  334,  326,  322,  327,  331,  327,
      321,  329,  324,  333,  326,  330,  323,  329,  330,  338,
      332,  331,  332,  334,  329,  337,  339,  333,  337,  374,
      375,  376,  375,  376,  377,  339,  338,  374,  378,  377,

      379,  384,  379,  380,  381,  382,  381,  382,  383,  385,
      384,  383,  378,  386,  380,  389,  388,  390,  423,  424,
      385,  388,  424,  423,  425,  427,  428,  429,  386,  389,
      431,  430,  432,  425,  430,  433,  390,  434,  427,  429,
      437,  431,  450,  428,  465,  438,  467,  450,  469,  434,
      463,  433,  432,  437,  438,  463,  468,  466,  469,  467,
      468,  465,  466,  470,  471,  470,  473,  474,  475,  471,
      475,  476,  477,  504,  505,  507,  509,  511,  516,  508,
      476,  515,  513,  473,  507,  476,  477,  474,  508,  541,
      512,  516,  505,  509,  511,  512,  517,  540,  504,  513,

      517,  515,  542,  528,  545,  539,  517,  528,  541,  543,
      539,  544,  548,  528,  539,  542,  544,  546,  547,  543,
      539,  574,  540,  547,  575,  576,  577,  546,  579,  545,
      548,  577,  578,  580,  581,  579,  576,  575,  606,  582,
      583,  578,  580,  574,  582,  607,  608,  581,  608,  583,
      609,  610,  613,  612,  614,  613,  615,  606,  634,  637,
      638,  813,  609,  634,  607,  610,  612,  635,  636,  615,
      639,  636,  635,  638,  637,  614,  640,  639,  641,  642,
      661,  640,  662,  641,  663,  664,  642,  667,  668,  663,
      682,  684,  685,  683,  687,  700,  698,  661,  698,  662,

      699,  668,  699,  682,  664,  667,  683,  702,  711,  684,
      712,  713,  721,  687,  722,  685,  713,  723,  730,  711,
      700,  712,  750,  731,  739,  702,  732,  741,  748,  723,
      748,  740,  749,  730,  749,  739,  776,  721,  731,  722,
      757,  732,  740,  757,  758,  750,  741,  758,  764,  765,
      770,  771,  777,  764,  765,  782,  800,  783,  788,  789,
      782,  776,  783,  794,  795,  801,  806,  807,  770,  771,
      788,  789,  812,  805,  804,  800,  803,  777,  794,  795,
      802,  799,  798,  797,  801,  796,  793,  792,  791,  806,
      807,  816,  816,  816,  817,  817,  817,  818,  790,  818,

      819,  787,  819,  786,  785,  784,  781,  780,  779,  778,
      775,  774,  773,  772,  769,  768,  767,  766,  763,  762,
      761,  760,  759,  755,  754,  752,  751,  747,  746,  745,
      744,  743,  742,  738,  737,  736,  735,  734,  733,  729,
      728,  727,  726,  725,  724,  720,  719,  718,  717,  716,
      715,  714,  709,  708,  707,  705,  704,  703,  701,  697,
      695,  694,  693,  692,  690,  689,  688,  686,  681,  679,
      678,  677,  676,  675,  673,  672,  671,  670,  669,  666,
      665,  659,  658,  655,  654,  653,  652,  650,  649,  646,
      645,  644,  643,  633,  632,  631,  630,  629,  628,  627,

      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  611,  605,  604,  603,  602,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  590,  589,  588,  587,  586,
      585,  584,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  510,  506,  503,  502,  501,  500,  499,  498,  496,
      495,  494,  492,  491,  490,  489,  488,  487,  486,  485,
      483,  482,  481,  479,  478,  472,  464,  462,  461,  460,

      458,  457,  456,  455,  454,  453,  452,  451,  449,  448,
      447,  445,  444,  443,  442,  441,  440,  439,  436,  435,
      426,  422,  421,  418,  417,  416,  415,  414,  413,  412,
      411,  409,  408,  407,  406,  405,  402,  401,  400,  399,
      398,  397,  396,  395,  393,  392,  391,  387,  373,  372,
      371,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      336,  335,  328,  325,  320,  319,  318,  315,  314,  313,
      312,  311,  308,  305,  304,  303,  302,  301,  300,  299,

      296,  295,  294,  293,  292,  289,  286,  285,  284,  283,
      282,  279,  266,  262,  261,  259,  258,  257,  256,  255,
      254,  252,  251,  250,  249,  248,  243,  242,  240,  239,
      238,  237,  236,  235,  233,  232,  231,  230,  229,  216,
      206,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  163,  155,
      144,  139,  136,  135,  134,  133,  132,  131,  129,  127,
      125,  124,  122,  121,  117,  116,  111,  110,  109,  108,

      107,  106,  104,  102,  100,   99,   97,   96,   92,   91,
       87,   76,   65,   62,   60,   59,   55,   54,   53,   51,
       49,   44,   43,   39,   33,   32,   28,   27,   26,   24,
       22,   17,   16,   12,    7,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[58] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pnapi_owfn_yy_flex_debug;
int pnapi_owfn_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pnapi_owfn_yytext;
#line 1 "parser-owfn-lexer.ll"
// -*- C++ -*-
/***************************************************************************** 
* flex options 
****************************************************************************/
/* created lexer should be called "lex.yy.c" to make the ylwrap script work */
/* plain c scanner: the prefix is our "namespace" */
/* we read only one file */
/* yyunput not needed (fix compiler warning) */
/* maintain line number for error reporting */
/***************************************************************************** 
* C declarations 
****************************************************************************/
#line 27 "parser-owfn-lexer.ll"

#include "parser.h"
#include "parser-owfn.h"

#include <cstring>

#define yystream pnapi::parser::stream
#define pnapi_owfn_yylineno pnapi::parser::line
#define pnapi_owfn_yytext   pnapi::parser::token
#define yyerror  pnapi::parser::error

#define pnapi_owfn_yylex    pnapi::parser::owfn::lex
#define pnapi_owfn_yylex_destroy pnapi::parser::owfn::lex_destroy

/* hack to read input from a C++ stream */
#define YY_INPUT(buf,result,max_size)		\
   yystream->read(buf, max_size); \
   if (yystream->bad()) \
     YY_FATAL_ERROR("input in flex scanner failed"); \
   result = yystream->gcount();

/* hack to overwrite YY_FATAL_ERROR behavior */
#define fprintf(file,fmt,msg) \
   yyerror(msg);

/*****************************************************************************
* regular expressions 
****************************************************************************/
/* a start condition to skip comments */

/* 
 * The state "IDENT2" is used for transition identifier.
 * Unlike place identifier these can contain the char "=",
 */

#line 1076 "parser-owfn-lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define IDENT2 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pnapi_owfn_yylex_destroy (void );

int pnapi_owfn_yyget_debug (void );

void pnapi_owfn_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE pnapi_owfn_yyget_extra (void );

void pnapi_owfn_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pnapi_owfn_yyget_in (void );

void pnapi_owfn_yyset_in  (FILE * in_str  );

FILE *pnapi_owfn_yyget_out (void );

void pnapi_owfn_yyset_out  (FILE * out_str  );

int pnapi_owfn_yyget_leng (void );

char *pnapi_owfn_yyget_text (void );

int pnapi_owfn_yyget_lineno (void );

void pnapi_owfn_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pnapi_owfn_yywrap (void );
#else
extern int pnapi_owfn_yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pnapi_owfn_yytext, pnapi_owfn_yyleng, 1, pnapi_owfn_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pnapi_owfn_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pnapi_owfn_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pnapi_owfn_yyin))==0 && ferror(pnapi_owfn_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pnapi_owfn_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pnapi_owfn_yylex (void);

#define YY_DECL int pnapi_owfn_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pnapi_owfn_yytext and pnapi_owfn_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "parser-owfn-lexer.ll"


 /* control comments */ 
#line 1267 "parser-owfn-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pnapi_owfn_yyin )
			pnapi_owfn_yyin = stdin;

		if ( ! pnapi_owfn_yyout )
			pnapi_owfn_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pnapi_owfn_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pnapi_owfn_yy_create_buffer(pnapi_owfn_yyin,YY_BUF_SIZE );
		}

		pnapi_owfn_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pnapi_owfn_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 815 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1136 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < pnapi_owfn_yyleng; ++yyl )
				if ( pnapi_owfn_yytext[yyl] == '\n' )
					   
    pnapi_owfn_yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "parser-owfn-lexer.ll"
{ return LCONTROL; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "parser-owfn-lexer.ll"
{ return RCONTROL; }
	YY_BREAK
/* comments */
case 3:
YY_RULE_SETUP
#line 75 "parser-owfn-lexer.ll"
{ BEGIN(COMMENT); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 76 "parser-owfn-lexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 77 "parser-owfn-lexer.ll"
{ /* skip */ }
	YY_BREAK
/* control keywords */
case 6:
YY_RULE_SETUP
#line 80 "parser-owfn-lexer.ll"
{ return KEY_MAX_UNIQUE_EVENTS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "parser-owfn-lexer.ll"
{ return KEY_ON_LOOP; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "parser-owfn-lexer.ll"
{ return KEY_MAX_OCCURRENCES; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 83 "parser-owfn-lexer.ll"
{ return KEY_TRUE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "parser-owfn-lexer.ll"
{ return KEY_FALSE; }
	YY_BREAK
/* keywords */
case 11:
YY_RULE_SETUP
#line 87 "parser-owfn-lexer.ll"
{ return KEY_SAFE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "parser-owfn-lexer.ll"
{ return KEY_PLACE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 89 "parser-owfn-lexer.ll"
{ return KEY_INTERFACE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 90 "parser-owfn-lexer.ll"
{ return KEY_INTERNAL; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 91 "parser-owfn-lexer.ll"
{ return KEY_INPUT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 92 "parser-owfn-lexer.ll"
{ return KEY_OUTPUT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 94 "parser-owfn-lexer.ll"
{ BEGIN(IDENT2); return KEY_TRANSITION; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 95 "parser-owfn-lexer.ll"
{ /* skip whitespaces */ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 96 "parser-owfn-lexer.ll"
{ BEGIN(INITIAL); pnapi_owfn_yylval.yt_str = strdup(pnapi_owfn_yytext); return IDENT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "parser-owfn-lexer.ll"
{ yyerror("Unexpected symbol at transition identifier"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "parser-owfn-lexer.ll"
{ return KEY_INITIALMARKING; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 100 "parser-owfn-lexer.ll"
{ return KEY_FINALMARKING; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 101 "parser-owfn-lexer.ll"
{ return KEY_NOFINALMARKING; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 102 "parser-owfn-lexer.ll"
{ return KEY_FINALCONDITION; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 103 "parser-owfn-lexer.ll"
{ return KEY_COST; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 104 "parser-owfn-lexer.ll"
{ return KEY_CONSUME; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 105 "parser-owfn-lexer.ll"
{ return KEY_PRODUCE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 106 "parser-owfn-lexer.ll"
{ return KEY_PORT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "parser-owfn-lexer.ll"
{ return KEY_PORTS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 108 "parser-owfn-lexer.ll"
{ return KEY_SYNCHRONOUS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 109 "parser-owfn-lexer.ll"
{ return KEY_SYNCHRONIZE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "parser-owfn-lexer.ll"
{ return KEY_CONSTRAIN; }
	YY_BREAK
/* keywords for final conditions */
case 33:
YY_RULE_SETUP
#line 113 "parser-owfn-lexer.ll"
{ return KEY_ALL_PLACES_EMPTY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 114 "parser-owfn-lexer.ll"
{ return KEY_ALL_OTHER_PLACES_EMPTY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 115 "parser-owfn-lexer.ll"
{ return KEY_ALL_OTHER_INTERNAL_PLACES_EMPTY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 116 "parser-owfn-lexer.ll"
{ return KEY_ALL_OTHER_EXTERNAL_PLACES_EMPTY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 117 "parser-owfn-lexer.ll"
{ return OP_AND; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 118 "parser-owfn-lexer.ll"
{ return OP_OR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 119 "parser-owfn-lexer.ll"
{ return OP_NOT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 120 "parser-owfn-lexer.ll"
{ return OP_GT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 121 "parser-owfn-lexer.ll"
{ return OP_LT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 122 "parser-owfn-lexer.ll"
{ return OP_GE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 123 "parser-owfn-lexer.ll"
{ return OP_LE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 124 "parser-owfn-lexer.ll"
{ return OP_EQ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 125 "parser-owfn-lexer.ll"
{ return OP_NE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 126 "parser-owfn-lexer.ll"
{ return OP_NE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 127 "parser-owfn-lexer.ll"
{ return LPAR; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 128 "parser-owfn-lexer.ll"
{ return RPAR; }
	YY_BREAK
/* other characters */
case 49:
YY_RULE_SETUP
#line 131 "parser-owfn-lexer.ll"
{ return COLON; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "parser-owfn-lexer.ll"
{ return SEMICOLON; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "parser-owfn-lexer.ll"
{ return COMMA; }
	YY_BREAK
/* identifiers */
case 52:
YY_RULE_SETUP
#line 136 "parser-owfn-lexer.ll"
{ pnapi_owfn_yylval.yt_int = atoi(pnapi_owfn_yytext); return NUMBER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "parser-owfn-lexer.ll"
{ pnapi_owfn_yylval.yt_int = atoi(pnapi_owfn_yytext); return NEGATIVE_NUMBER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "parser-owfn-lexer.ll"
{ pnapi_owfn_yylval.yt_str = strdup(pnapi_owfn_yytext); return IDENT; }
	YY_BREAK
/* whitespace */
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 141 "parser-owfn-lexer.ll"
{ /* skip */ }
	YY_BREAK
/* anything else */
case 56:
YY_RULE_SETUP
#line 144 "parser-owfn-lexer.ll"
{ yyerror("unexpected lexical token"); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 146 "parser-owfn-lexer.ll"
ECHO;
	YY_BREAK
#line 1656 "parser-owfn-lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(IDENT2):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pnapi_owfn_yyin at a new source and called
			 * pnapi_owfn_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pnapi_owfn_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pnapi_owfn_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pnapi_owfn_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pnapi_owfn_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pnapi_owfn_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pnapi_owfn_yyrestart(pnapi_owfn_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pnapi_owfn_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 815 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 815 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 814);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pnapi_owfn_yyrestart(pnapi_owfn_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pnapi_owfn_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pnapi_owfn_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    pnapi_owfn_yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pnapi_owfn_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pnapi_owfn_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pnapi_owfn_yy_create_buffer(pnapi_owfn_yyin,YY_BUF_SIZE );
	}

	pnapi_owfn_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	pnapi_owfn_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pnapi_owfn_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pnapi_owfn_yypop_buffer_state();
	 *		pnapi_owfn_yypush_buffer_state(new_buffer);
     */
	pnapi_owfn_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pnapi_owfn_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pnapi_owfn_yywrap()) processing, but the only time this flag
	 * is looked at is after pnapi_owfn_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pnapi_owfn_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pnapi_owfn_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pnapi_owfn_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pnapi_owfn_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pnapi_owfn_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pnapi_owfn_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pnapi_owfn_yy_create_buffer()
 * 
 */
    void pnapi_owfn_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pnapi_owfn_yyfree((void *) b->yy_ch_buf  );

	pnapi_owfn_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pnapi_owfn_yyrestart() or at EOF.
 */
    static void pnapi_owfn_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pnapi_owfn_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pnapi_owfn_yy_init_buffer was _probably_
     * called from pnapi_owfn_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pnapi_owfn_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pnapi_owfn_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pnapi_owfn_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pnapi_owfn_yyensure_buffer_stack();

	/* This block is copied from pnapi_owfn_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pnapi_owfn_yy_switch_to_buffer. */
	pnapi_owfn_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pnapi_owfn_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pnapi_owfn_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pnapi_owfn_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pnapi_owfn_yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pnapi_owfn_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pnapi_owfn_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pnapi_owfn_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pnapi_owfn_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pnapi_owfn_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pnapi_owfn_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pnapi_owfn_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE pnapi_owfn_yy_scan_string (yyconst char * yystr )
{
    
	return pnapi_owfn_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pnapi_owfn_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pnapi_owfn_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pnapi_owfn_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pnapi_owfn_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pnapi_owfn_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pnapi_owfn_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pnapi_owfn_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pnapi_owfn_yytext[pnapi_owfn_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = pnapi_owfn_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pnapi_owfn_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pnapi_owfn_yyget_lineno  (void)
{
        
    return pnapi_owfn_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *pnapi_owfn_yyget_in  (void)
{
        return pnapi_owfn_yyin;
}

/** Get the output stream.
 * 
 */
FILE *pnapi_owfn_yyget_out  (void)
{
        return pnapi_owfn_yyout;
}

/** Get the length of the current token.
 * 
 */
int pnapi_owfn_yyget_leng  (void)
{
        return pnapi_owfn_yyleng;
}

/** Get the current token.
 * 
 */

char *pnapi_owfn_yyget_text  (void)
{
        return pnapi_owfn_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pnapi_owfn_yyset_lineno (int  line_number )
{
    
    pnapi_owfn_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pnapi_owfn_yy_switch_to_buffer
 */
void pnapi_owfn_yyset_in (FILE *  in_str )
{
        pnapi_owfn_yyin = in_str ;
}

void pnapi_owfn_yyset_out (FILE *  out_str )
{
        pnapi_owfn_yyout = out_str ;
}

int pnapi_owfn_yyget_debug  (void)
{
        return pnapi_owfn_yy_flex_debug;
}

void pnapi_owfn_yyset_debug (int  bdebug )
{
        pnapi_owfn_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pnapi_owfn_yylex_destroy(), so don't allocate here.
     */

    /* We do not touch pnapi_owfn_yylineno unless the option is enabled. */
    pnapi_owfn_yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pnapi_owfn_yyin = stdin;
    pnapi_owfn_yyout = stdout;
#else
    pnapi_owfn_yyin = (FILE *) 0;
    pnapi_owfn_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pnapi_owfn_yylex_init()
     */
    return 0;
}

/* pnapi_owfn_yylex_destroy is for both reentrant and non-reentrant scanners. */
int pnapi_owfn_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pnapi_owfn_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pnapi_owfn_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	pnapi_owfn_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pnapi_owfn_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pnapi_owfn_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pnapi_owfn_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pnapi_owfn_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see pnapi_owfn_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 146 "parser-owfn-lexer.ll"



