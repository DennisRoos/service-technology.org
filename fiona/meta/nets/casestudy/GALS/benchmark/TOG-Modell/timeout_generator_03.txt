{Timeout-Generator des zweiten GALS-Wrappers}

{01: konkret, unreduziert}
{02: alle Komponenten zu einem Modul zusammengefasst}
{03: stark abstrahiert}

PLACE
    tog.p.STOPH,  {Input-Flanken}
    tog.p.n_STOPH,
    tog.p.REQ_A,
    tog.p.n_REQ_A,
    tog.p.LCLK,
    tog.p.n_LCLK,
    tog.p.RST,
    tog.p.n_RST,
    tog.p.STOP,  {Output-Flanken}
    tog.p.n_STOP,
    tog.p.REQ_A1,
    tog.p.n_REQ_A1,
    tog.p.ST,
    tog.p.n_ST,
    tog.p.pegel_LCLK_0, {Pegelkodierung in Transitionsnamen: LCLK, RST, ST}
    tog.p.pegel_LCLK_1,
    tog.p.pegel_RST_0,
    tog.p.pegel_RST_1,
    tog.p.pegel_ST_0,
    tog.p.pegel_ST_1;

MARKING
    tog.p.n_STOPH: 1,
    tog.p.n_REQ_A: 1,
    tog.p.n_LCLK: 1,
    tog.p.n_RST: 1,
    tog.p.n_STOP: 1,
    tog.p.n_REQ_A1: 1,
    tog.p.n_ST: 1,
    tog.p.pegel_LCLK_0: 1,
    tog.p.pegel_RST_0: 1,
    tog.p.pegel_ST_0: 1;


{STOPH-Flanke wird durchgeleitet.}
TRANSITION tog.t.STOPH_pegel_xxx
CONSUME tog.p.STOPH: 1, tog.p.n_STOP: 1;
PRODUCE tog.p.n_STOPH: 1, tog.p.STOP: 1;


{REQ_A-Flanke wird durchgeleitet}
TRANSITION tog.t.REQ_A_pegel_xxx
CONSUME tog.p.REQ_A: 1, tog.p.n_REQ_A1: 1;
PRODUCE tog.p.n_REQ_A: 1, tog.p.REQ_A1: 1;


{LCLK+ ohne Effekt an Ausgängen}
TRANSITION tog.t.LCLK_1_pegel_0xx
CONSUME tog.p.LCLK: 1, tog.p.pegel_LCLK_0: 1;
PRODUCE tog.p.n_LCLK: 1, tog.p.pegel_LCLK_1: 1;

{LCLK- ohne Effekt an Ausgängen, falls RST=1}
TRANSITION tog.t.LCLK_0_pegel_11x
CONSUME tog.p.LCLK: 1, tog.p.pegel_LCLK_1: 1, tog.p.pegel_RST_1: 1;
PRODUCE tog.p.n_LCLK: 1, tog.p.pegel_LCLK_0: 1, tog.p.pegel_RST_1: 1;

{LCLK- belässt ST=1, falls ST=1 und RST=0}
TRANSITION tog.t.LCLK_0_pegel_101
CONSUME tog.p.LCLK: 1, tog.p.pegel_LCLK_1: 1, tog.p.pegel_RST_0: 1,
        tog.p.pegel_ST_1: 1;
PRODUCE tog.p.n_LCLK: 1, tog.p.pegel_LCLK_0: 1, tog.p.pegel_RST_0: 1,
        tog.p.pegel_ST_1: 1;

{LCLK- führt zu ST+, falls RST=ST=0}
TRANSITION tog.t.LCLK_0_pegel_100
CONSUME tog.p.LCLK: 1, tog.p.pegel_LCLK_1: 1, tog.p.pegel_RST_0: 1,
        tog.p.pegel_ST_0: 1, tog.p.n_ST: 1;
PRODUCE tog.p.n_LCLK: 1, tog.p.pegel_LCLK_0: 1, tog.p.pegel_RST_0: 1,
        tog.p.pegel_ST_1: 1, tog.p.ST: 1;



{RST- ohne Effekt an Ausgängen}
TRANSITION tog.t.RST_0_pegel_x1x
CONSUME tog.p.RST: 1, tog.p.pegel_RST_1: 1;
PRODUCE tog.p.n_RST: 1, tog.p.pegel_RST_0: 1;

{RST+ führt zu ST-, falls ST=1}
TRANSITION tog.t.RST_1_pegel_x01
CONSUME tog.p.RST: 1, tog.p.pegel_RST_0: 1, tog.p.pegel_ST_1: 1, tog.p.n_ST: 1; 
PRODUCE tog.p.n_RST: 1, tog.p.pegel_RST_1: 1, tog.p.pegel_ST_0: 1, tog.p.ST: 1;

{RST+ belässt ST=0, falls ST=0}
TRANSITION tog.t.RST_1_pegel_x00
CONSUME tog.p.RST: 1, tog.p.pegel_RST_0: 1, tog.p.pegel_ST_0: 1; 
PRODUCE tog.p.n_RST: 1, tog.p.pegel_RST_1: 1, tog.p.pegel_ST_0: 1;



{Anbindung an Außenwelt}

{STOPH produzieren}
TRANSITION tog.t.STOPH
CONSUME tog.p.n_STOPH: 1;
PRODUCE tog.p.STOPH: 1;

{REQ_A produzieren}
TRANSITION tog.t.REQ_A
CONSUME tog.p.n_REQ_A: 1;
PRODUCE tog.p.REQ_A: 1;

{LCLK produzieren}
TRANSITION tog.t.LCLK
CONSUME tog.p.n_LCLK: 1;
PRODUCE tog.p.LCLK: 1;

{RST produzieren}
TRANSITION tog.t.RST
CONSUME tog.p.n_RST: 1;
PRODUCE tog.p.RST: 1;

{STOP abräumen}
TRANSITION tog.t.STOP
CONSUME tog.p.STOP: 1;
PRODUCE tog.p.n_STOP: 1;

{REQ_A1 abräumen}
TRANSITION tog.t.REQ_A1
CONSUME tog.p.REQ_A1: 1;
PRODUCE tog.p.n_REQ_A1: 1;

{ST abräumen}
TRANSITION tog.t.ST
CONSUME tog.p.ST: 1;
PRODUCE tog.p.n_ST: 1;


{ vim: set ft=lola: }
