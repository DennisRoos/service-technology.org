\input texinfo
@setfilename lisa.info
@include version.texi
@afourpaper
@finalout
@settitle Lisa User's Manual

@c --------------------------------------------------------------------------

@copying

@b{About this document:}

This manual is for Lisa, version @value{VERSION}, a tool for structural analysis of petri nets, last updated @value{UPDATED}.

Copyright @copyright{} 2010 Georg Straube

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @acronym{GNU} Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A @acronym{GNU} Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``@acronym{GNU} Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this @acronym{GNU} Manual. Buying copies from @acronym{GNU} Press supports the FSF in developing @acronym{GNU} and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* lisa: (lisa).       Lisa.
@end direntry


@c --------------------------------------------------------------------------

@titlepage

@title Lisa

@subtitle Structural analysis of petri nets based on linear programming
@subtitle @url{http://service-technology.org/Lisa}
@vskip 0.5em
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Georg Straube
@page


@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c --------------------------------------------------------------------------

@ifnottex
@node Top
@top Lisa
@insertcopying
@end ifnottex

@c --------------------------------------------------------------------------

@menu
* First Steps::How to set up and install Lisa.
* Command Line Options::How to run Lisa.
* Example usage::Examples of how to use Lisa
* GNU Free Documentation License::The license of this manual.
@end menu

@c --------------------------------------------------------------------------

@contents
@paragraphindent none

@c --------------------------------------------------------------------------

@node First Steps
@chapter First Steps

@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/lisa} and download the latest release version of Lisa, say @file{lisa-@value{VERSION}.tar.gz}. To setup and compile Lisa, change into your download directory and type

@cartouche
@smallexample
tar xfz lisa-@value{VERSION}.tar.gz
cd lisa-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a binary @samp{src/lisa} is generated.@footnote{On Microsoft Windows, the file will be called @file{lisa.exe}.} If you experience any compiler warnings, don't panic: Lisa contains some generated or third party code that we cannot influence.

@item To test whether everything went fine, type

@cartouche
@smallexample
make check
@end smallexample
@end cartouche

to execute the testcases located in @file{tests}. If everything went fine, you should see something like:

@smallexample
## ------------- ##
## Test results. ##
## ------------- ##

All 7 tests were successful.
@end smallexample

If an error occurs, please send the output to @email{lisa@@service-technology.org}.

@item To install the binary, the manpage, and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Contents of the Distribution

The distribution contains several directories:

@table @file
@item doc
The Texinfo documentation of Lisa. The documentation can be created using @samp{make pdf}. Note you need to have Lisa properly installed before (see installation description above).

@item man
The manpage of Lisa which can be displayed using @samp{man lisa} after having Lisa installed (see installation description above).

@item src
The source code of Lisa.

@item tests
Testcases for Lisa which check the generated binary.
@end table






@c --------------------------------------------------------------------------

@unnumberedsec Compilation
To compile the source code from a source distribution, the following tools are required.

@itemize
@item GCC (@url{http://gcc.gnu.org/})
@item @acronym{GNU} Make (@url{http://www.gnu.org/software/make/})
@end itemize

@unnumberedsec Development
In case you want to make changes to the source code, the following tools are required to reconfigure and compile Lisa.

@itemize
@item Autoconf, @url{http://www.gnu.org/software/autoconf/}
@item Automake, @url{http://www.gnu.org/software/automake/}
@item Bison, @url{http://www.gnu.org/software/bison/}
@item flex, @url{http://flex.sourceforge.net/}
@item Gengetopt, @url{http://www.gnu.org/software/gengetopt/}
@item help2man, @url{http://www.gnu.org/software/help2man/}
@item Texinfo, @url{http://www.gnu.org/software/texinfo/}
@end itemize

Please check our nightly build server at @url{http://service-technology.org/nightly} for the versions we use during development.

@c --------------------------------------------------------------------------


@node Command Line Options
@chapter Invoking Lisa

Lisa is a command line tool and does not come with a fancy @acronym{GUI}. However, Lisa can be easily scripted and combined with other tools.

@section Command Line Options

For an overview of the command line options, type @samp{lisa --help} to see the following help screen:

@smallexample
@verbatiminclude cmdline.out
@end smallexample


@c --------------------------------------------------------------------------


@node Example usage
@chapter Example usage

@section P-invariants

To calculate a p-invariant invoke Lisa with the filename of a given net and 
parameter - -findPInv or -p for short.

@cartouche
@smallexample
lisa net.owfn --findPInv
@end smallexample
@end cartouche

If not p-invariant could be found, you will see the following output:

@cartouche
@smallexample
lisa: No p-invariant could be found
@end smallexample
@end cartouche

Otherwise Lisa will output the p-invariant and inform you if the p-invariant is
non-negative, the petri net is covered by p-invariants or bounded.

@cartouche
@smallexample
lisa: Found p-invariant
p2: 1.000000
p1: 1.000000
p3: 1.000000
lisa: p-invariant is non-negative
lisa: petri net is covered by p-invariants
lisa: petri net is bounded
@end smallexample
@end cartouche

@section T-invariants

To calculate a t-invariant invoke Lisa with the filename of a given net and 
parameter - -findTInv or -t for short.

@cartouche
@smallexample
lisa net.owfn --findTInv
@end smallexample
@end cartouche

If not t-invariant could be found, you will see the following output:

@cartouche
@smallexample
lisa: No t-invariant could be found
@end smallexample
@end cartouche

Otherwise Lisa will output the t-invariant and inform you if the t-invariant is
non-negative and if the petri net is covered by t-invariants.

@cartouche
@smallexample
lisa: Found t-invariant
t4: 1.000000
t2: 1.000000
t5: 3.000000
t3: 1.000000
t1: 1.000000
lisa: t-invariant is non-negative
lisa: petri net is covered by t-invariants
@end smallexample
@end cartouche

@section Reachability check

Please keep in mind that only the necessary condition
for reachability is checked, i.e. a marking that is
reachable might not be realizable.

To test whether a given marking is reachable state
the marking to be reached as a final marking. Then call
Lisa with the filename and parameter - -isReachable or
-r.

@cartouche
@smallexample
lisa net.owfn --isReachable
@end smallexample
@end cartouche

If the marking is not reachable, you will see the following output:

@cartouche
@smallexample
lisa: marking is not reachable
@end smallexample
@end cartouche

Otherwise Lisa tells you that the marking might be reachable:

@cartouche
@smallexample
lisa: marking might be reachable
@end smallexample
@end cartouche

@section Siphons

Lisa can check if a given petri net possesses siphons. If the
answer is yes, it will calculate a siphon with a minimal number
of places. Places mentioned in the final marking will be included in 
the siphon.

Call Lisa with filename and option - -findSiphon.

@cartouche
@smallexample
lisa net.owfn --findSiphon
@end smallexample
@end cartouche

If no siphon was found, you will see the following output:

@cartouche
@smallexample
lisa: No siphon could be found
@end smallexample
@end cartouche

Otherwise Lisa outputs the places of the siphon:

@cartouche
@smallexample
lisa: Found siphon containing the following places
Places:
p3
p1
p2
p4
@end smallexample
@end cartouche

@section Traps

Lisa can check if a given petri net possesses traps. If the
answer is yes, it will calculate a trap with a minimal number
of places. Places mentioned in the final marking will be included in 
the trap.
Call Lisa with filename and option - -findTrap.

@cartouche
@smallexample
lisa net.owfn --findTrap
@end smallexample
@end cartouche

If no trap was found, you will see the following output:

@cartouche
@smallexample
lisa: No trap could be found
@end smallexample
@end cartouche

Otherwise Lisa outputs the places of the trap:

@cartouche
@smallexample
lisa: Found trap containing the following places
Places:
p3
p1
p5
@end smallexample
@end cartouche

@c --------------------------------------------------------------------------

@node GNU Free Documentation License
@appendix The @acronym{GNU} Free Documentation License

@include fdl.texi

@bye
