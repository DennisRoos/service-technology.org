AT_INIT([standard tests])

############################################################################
AT_BANNER([Standard Options])
############################################################################

AT_SETUP([help output])
AT_CHECK([CANDY --help], 0, ignore)
AT_KEYWORDS(basic)
AT_CLEANUP

AT_SETUP([version output])
AT_CHECK([CANDY --version], 0, ignore)
AT_KEYWORDS(basic)
AT_CLEANUP

############################################################################
AT_BANNER([I/O Tests])
############################################################################

AT_SETUP([output shortcut])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([CANDY --input=costOG1.og -o --costfile=costOG1.cf], 0)
AT_CHECK([test -f costOG1_efficient.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([costfile shortcut])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([CANDY --input=costOG1.og -o -c], 0)
AT_CHECK([test -f costOG1_efficient.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([netfile shortcut])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.owfn .])
AT_CHECK([CANDY --input=costOG1.og -o -n], 0)
AT_CHECK([test -f costOG1_efficient.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([file in, file out])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([CANDY --input=costOG1.og --output=c.og --costfile=costOG1.cf], 0)
AT_CHECK([test -f c.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([file in, pipe out])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([CANDY --input=costOG1.og --costfile=costOG1.cf > c.og], 0)
AT_CHECK([test -f c.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([pipe in, file out])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([cat costOG1.og | CANDY --output=c.og --costfile=costOG1.cf], 0)
AT_CHECK([test -f c.og])
AT_KEYWORDS(io)
AT_CLEANUP

AT_SETUP([pipe in, pipe out])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([cat costOG1.og | CANDY --costfile=costOG1.cf > c.og], 0)
AT_CHECK([test -f c.og])
AT_KEYWORDS(io)
AT_CLEANUP

############################################################################
AT_BANNER([Error Cases])
############################################################################

AT_SETUP([2-bit annotation])
AT_CHECK([cp TESTFILES/costOG2.og2 .])
AT_CHECK([cp TESTFILES/costOG2.cf .])
AT_CHECK([CANDY --input=costOG2.og2 --output=c.og --costfile=costOG2.cf], 1, ignore, stderr)
AT_CHECK([GREP -q "read a 2-bit annotation; only formulae are supported" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([incomplete costfile])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_incomplete.cf .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --costfile=error_incomplete.cf], 1, ignore, stderr)
AT_CHECK([GREP -q "given costfile does not include all events from given OG" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([overfull costfile])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_overfull.cf .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --costfile=error_overfull.cf], 1, ignore, stderr)
AT_CHECK([GREP -q "given costfile includes events which are not used in given OG" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([costfile with repetitions])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_repetitions.cf .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --costfile=error_repetitions.cf], 1, ignore, stderr)
AT_CHECK([GREP -q "given costfile includes events several times" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([incomplete netfile])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_incomplete.owfn .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=error_incomplete.owfn], 1, ignore, stderr)
AT_CHECK([GREP -q "given netfile does not include all events from given OG" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([overfull netfile])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_overfull.owfn .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=error_overfull.owfn], 1, ignore, stderr)
AT_CHECK([GREP -q "given netfile includes events which are not used in given OG" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

# arc weights > 1 to interface places produce no definded cost
AT_SETUP([netfile with arc weights to interface place])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_weights.owfn .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=error_weights.owfn], 1, ignore, stderr)
AT_CHECK([GREP -q "cannot compute cost for event from transition with arc weights > 1" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

# more than one transition linking to interface place produce no definded cost
AT_SETUP([netfile with shared interface place])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_shared.owfn .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=error_shared.owfn], 1, ignore, stderr)
AT_CHECK([GREP -q "cannot compute cost for event from multiple transition" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

# non-normal transition produce no defined cost
AT_SETUP([netfile with non-normal transitions])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/error_nonnormal.owfn .])
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=error_nonnormal.owfn], 1, ignore, stderr)
AT_CHECK([GREP -q "cannot compute cost for event from non-normal transition" stderr], 0, ignore)
AT_KEYWORDS(error)
AT_CLEANUP

############################################################################
AT_BANNER([Fiona's Test Cases])
############################################################################

#AT_SETUP([Complex Public View])
#AT_CHECK([cp TESTFILES/complexPV.*.og .])
#AT_CHECK([SAYO --input=complexPV.wendy.og --output=complexPV.sa])
#AT_CHECK([SA2SM complexPV.sa complexPV.owfn])
#AT_CHECK([WENDY complexPV.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence complexPV.og complexPV.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP
#
#AT_SETUP([Coffee Automaton])
#AT_CHECK([cp TESTFILES/myCoffee.*.og .])
#AT_CHECK([SAYO --input=myCoffee.wendy.og --output=myCoffee.sa])
#AT_CHECK([SA2SM myCoffee.sa myCoffee.owfn])
#AT_CHECK([WENDY myCoffee.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence myCoffee.og myCoffee.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP
#
#AT_SETUP([Non Final Tau Node 1])
#AT_CHECK([cp TESTFILES/NonFinalTauNode1.*.og .])
#AT_CHECK([SAYO --input=NonFinalTauNode1.wendy.og --output=NonFinalTauNode1.sa])
#AT_CHECK([SA2SM NonFinalTauNode1.sa NonFinalTauNode1.owfn])
#AT_CHECK([WENDY NonFinalTauNode1.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence NonFinalTauNode1.og NonFinalTauNode1.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP
#
#AT_SETUP([Non Final Tau Node 1 Not])
#AT_CHECK([cp TESTFILES/NonFinalTauNode1not.*.og .])
#AT_CHECK([SAYO --input=NonFinalTauNode1not.wendy.og --output=NonFinalTauNode1not.sa])
#AT_CHECK([SA2SM NonFinalTauNode1not.sa NonFinalTauNode1not.owfn])
#AT_CHECK([WENDY NonFinalTauNode1not.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence NonFinalTauNode1not.og NonFinalTauNode1not.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP

############################################################################
AT_BANNER([Equivalence Tests])
############################################################################

AT_SETUP([costOG1])
AT_CHECK([cp TESTFILES/costOG1.og .])
AT_CHECK([cp TESTFILES/costOG1.cf .])
AT_CHECK([cp TESTFILES/costOG1.owfn .])
AT_CHECK([cp TESTFILES/costOG1_expected.og .])
# test with costfile
AT_CHECK([CANDY --input=costOG1.og --output=c.og --costfile=costOG1.cf], 0)
AT_CHECK([SED -e '1,7d' c.og > sed.og], 0, ignore)
AT_CHECK([diff sed.og costOG1_expected.og], 0, ignore)
# test with netfile
AT_CHECK([CANDY --input=costOG1.og --output=c.og --netfile=costOG1.owfn], 0)
AT_CHECK([SED -e '1,7d' c.og > sed.og], 0, ignore)
AT_CHECK([diff sed.og costOG1_expected.og], 0, ignore)
AT_KEYWORDS(equivalence)
AT_CLEANUP

AT_SETUP([costOG2])
AT_CHECK([cp TESTFILES/costOG2.og .])
AT_CHECK([cp TESTFILES/costOG2.cf .])
AT_CHECK([cp TESTFILES/costOG2.owfn .])
AT_CHECK([cp TESTFILES/costOG2_expected.og .])
# test with costfile
AT_CHECK([CANDY --input=costOG2.og --output=c.og --costfile=costOG2.cf], 0)
AT_CHECK([SED -e '1,7d' c.og > sed.og], 0, ignore)
AT_CHECK([diff sed.og costOG2_expected.og], 0, ignore)
# test with netfile
AT_CHECK([CANDY --input=costOG2.og --output=c.og --netfile=costOG2.owfn], 0)
AT_CHECK([SED -e '1,7d' c.og > sed.og], 0, ignore)
AT_CHECK([diff sed.og costOG2_expected.og], 0, ignore)
AT_KEYWORDS(equivalence)
AT_CLEANUP

#AT_SETUP([Dining Philosophers])
#AT_CHECK([cp TESTFILES/phcontrol3.unf.*.og .])
#AT_CHECK([SAYO --input=phcontrol3.unf.wendy.og --output=phcontrol3.unf.sa])
#AT_CHECK([SA2SM phcontrol3.unf.sa phcontrol3.unf.owfn])
#AT_CHECK([WENDY phcontrol3.unf.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence phcontrol3.unf.og phcontrol3.unf.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP
#
#AT_SETUP([Purchase Order Process])
#AT_CHECK([cp TESTFILES/PO.*.og .])
#AT_CHECK([SAYO --input=PO.wendy.og --output=PO.sa])
#AT_CHECK([SA2SM PO.sa PO.owfn])
#AT_CHECK([WENDY PO.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence PO.og PO.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP
#
#AT_SETUP([ZEUS Seller Service])
#AT_CHECK([cp TESTFILES/zeus.*.og .])
#AT_CHECK([SAYO --input=zeus.wendy.og --output=zeus.sa])
#AT_CHECK([SA2SM zeus.sa zeus.owfn])
#AT_CHECK([WENDY zeus.owfn --og --fionaFormat],0, ignore, ignore)
#AT_CHECK([FIONA -t equivalence zeus.og zeus.fiona.og], 0, stdout, ignore)
#AT_CHECK([GREP -q "equivalent: YES" stdout])
#AT_KEYWORDS(equivalence)
#AT_CLEANUP

############################################################################
AT_BANNER([Known issues (bug #?????)])
############################################################################

# non ... make testcases with AT_XFAIL_IF(true)

# those removing the empty line below will be doomed! By whom?

