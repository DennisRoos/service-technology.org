\input texinfo
@setfilename uml2owfn.info
@include version.texi
@afourpaper
@finalout
@settitle UML2oWFN User's Manual

@c ----------------------------------------------------------------------------

@copying

@b{About this document:}

This manual is for UML2oWFN, version @value{VERSION}, a tool to translate models of the IBM WebSphere Business Modeler to Petri nets, last updated @value{UPDATED}.

Copyright @copyright{} 2008 Martin Znamirowski, Dirk Fahland, and Niels Lohmann

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this GNU Manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* uml2owfn: (uml2owfn).       UML2oWFN.
@end direntry


@c ----------------------------------------------------------------------------

@titlepage

@title UML2oWFN

@subtitle Translating Models of the IBM WebSphere Business Modeler to Petri Nets
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Dirk Fahland

@page


@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ----------------------------------------------------------------------------

@ifnottex
@node Top
@top UML2oWFN
@insertcopying
@end ifnottex

@c ----------------------------------------------------------------------------

@menu
* Overview::Overview.
* Command Line Options::How to run UML2oWFN.
* Translation::Translating UML2 activity diagrams/IBM WebSphere Business Modeler process models to Petri nets.
* Analysis::Analyzing Soundness with UML2oWFN.
* ChangeLog::Version history.
* Anonymizing::
* GNU Free Documentation License::The license of this manual.
@end menu

@c ----------------------------------------------------------------------------

@contents
@paragraphindent none

@c ----------------------------------------------------------------------------

@node Overview
@chapter Overview

UML2oWFN translates the XML export of the IBM WebSphere Business Modeler into standard Petri net file formats. The translation can be targeted to a specific analysis like checking soundness, or for deriving contracts from business process specifications.


@section Usage

To translate a process library @file{input.xml} into Petri nets and print render these nets as graphs, call

@cartouche
@code{uml2owfn -i @i{input.xml} -f dot -o}
@end cartouche

The translation creates one output file @file{input.<catalog-name>__<process-name>.png} per process of the library.



@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/bom-anon} and download the latest version of BOM-Anonymizer, say @file{bom-anon-@value{VERSION}.tar.gz}. To setup and compile BOM-Anonymizer, change into your download directory and type

@cartouche
@smallexample
tar xfz bom-anon-@value{VERSION}.tar.gz
cd bom-anon-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a binary @samp{src/bom-anon} is generated.@footnote{On Microsoft Windows, the file will be called @file{bom-anon.exe}.} If you experience any compiler warnings, don't panic: BOM-Anonymizer contains some generated or third party code. If an error occurs, please send the output to @email{niels.lohmann@@service-technology.org}.

@item To install the binary and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Copyright

UML2oWFN was written by Martin Znamirowski (@email{znamirow@@informatik.hu-berlin.de}) Dirk Fahland (@email{dirk.fahland@@service-technology.org}), and Niels Lohmann (@email{niels.lohmann@@service-technology.org}).

@c ----------------------------------------------------------------------------

@node Command Line Options

@chapter Invoking UML2oWFN

@section Command Line Options

For an overview of the command line options, type @samp{uml2owfn -h} to see the following help screen:

@smallexample
@include cmdline.out
@end smallexample

@c ----------------------------------------------------------------------------

@node Translation

@chapter Translating UML2 activity diagrams/IBM WebSphere Business Modeler process models to Petri nets

@section Generating Petri nets 

Invoke the following command to translate a library @file{lib.xml} to Petri nets

@cartouche
@example
uml2owfn -i lib.xml -f FORMAT -o
@end example
@end cartouche

This creates a set of Petri net files, @file{lib.XXX__YYY.<ext>}, where @samp{YYY}
is the name of a process, and @samp{XXX} its containing catalog. The format of
the file is specified the @samp{-f FORMAT} option. If you have @samp{dot}
installed, try @samp{-f dot} to generate a graphical representation of each
net in @samp{.png} format.


@section Filtering Processes Based on Structural Properties

@acronym{UML2oWFN} allows to skip some processes in the translation based on
structural properties of the process. The switch @samp{-s PROP} controls which
processes shall not be translated. @samp{PROP} can take the following values
@itemize
  @item @samp{empty} - Do not translate empty processes.
  @item @samp{multi} - Do not translate processes that have edges with
        pin multiplicities different from min:1 and max:1. Please note that
		@acronym{UML2oWFN} only checks the presence of these values, but that
		the multiplicties are not translated to the Petri net level in the
		current version.        
  @item @samp{multiNonMatching} - Do not translate processes that have edges
        with non-matching pin multiplicities. For instance an edge where the
        source pin may produce 2 tokens, but the target pin can only consume 1
        token.
  @item @samp{overlapping} - Do not translate processes that have overlapping
        pinsets. @acronym{UML2oWFN} can handle overlapping pinsets; the
        resulting Petri net is not free-choice.
@end itemize

@c ----------------------------------------------------------------------------

@node Analysis

@chapter Soundness Analysis with UML2oWFN


@section Setup LoLA as Analysis Tool

To prepare the soundness analysis you need three different binaries of the
Low-Level Net Analyzer (LoLA, @url{http://www.service-technolorg.org/lola/},
source-code available at @url{http://svn.gna.org/svn/service-tech/trunk/lola/})
to be accessible from the command-line. 

@itemize
@item @file{lola-lp} - LoLA compiled with LIVEPROP,
@item @file{lola-sp} - LoLA compiled with STATEPREDICATE,
@item @file{lola-full-limited} - LoLA compiled with FULL (and MAXIMALSTATES 100000), and
@item optionally @file{lola-mc} - LoLA compiled with MODELCHECKING;
@end itemize

each with CAPACITY 1 and CHECKCAPACITY. The analysis script files rely on these
model checkers. 

In @file{<uml2owfn>/lola/}, we are providing the corresponding LoLA configuration
files for these LOLA variants with this release. You can generate these LoLA
executables as follows. 

@enumerate
@item Download LoLA and extract the source code files into its own directory, e.g.
@file{<lola>}.

@item In case you take the most recent version from our source-code repository at 
@url{http://svn.gna.org/svn/service-tech/trunk/lola/} run
@example
cd <lola>
autoreconf -i
./configure
@end example

@item In the @file{<lola>} directory, @samp{make} should create a LoLA binary for
your platform.

@item Replace the @file{<lola>/userconfig.H} with the corresponding variant from
@file{<uml2owfn>/lola/}, compile LoLA and rename the resulting file, e.g.
@example
cd <lola>

cp <uml2owfn>/lola/userconfig.H.liveprop ./userconfig.H
make
mv lola lola-lp

cp <uml2owfn>/lola/userconfig.H.statepredicate ./userconfig.H
make
mv lola lola-sp

cp <uml2owfn>/lola/userconfig.H.full-limited ./userconfig.H
make
mv lola lola-full-limited

cp <uml2owfn>/lola/userconfig.H.modelchecking ./userconfig.H
make
mv lola lola-mc
@end example

In case you work on Windows/Cygwin, you need to provide the @file{.exe} extension
for the @samp{mv} command.

@item Make all LoLA binaries available on your command-line, for instance
by moving them to @file{/usr/local/bin/}.
@end enumerate



@section Use Case: Standard Soundness Analysis

This section describes how to achieve standard soundness analysis. Translate
the library @file{lib.xml} you want to verify with the following command-line
arguments

@cartouche
@example
uml2owfn -i lib.xml -f lola -a soundness -a safe -p taskfile -o
@end example
@end cartouche

This creates a set of Petri net files, @file{lib.XXX__YYY.lola}, where @samp{YYY}
is the name of a process, and @samp{XXX} its containing catalog. Each
@file{lib.XXX__YYY.lola} gets two process-specific analysis task files:

@itemize
@item The file @file{lib.XXX__YYY.lola.safe.task} contains a state predicate that
specifies that process @samp{YYY} is not safe (has a lock of synchronization).
@item The file @file{lib.XXX__YYY.lola.fin.task} contains a state predicate that
specifies the valid final states of the process.
@end itemize

@acronym{UML2oWFN} also generates a script @file{check_lib.sh} containing the appropriate
LoLA command calls for each file.

@example
lola-sp lib.XXX__YYY.lola -a lib.XXX__YYY.lola.safe.task -P
lola-lp lib.XXX__YYY.lola -a lib.XXX__YYY.lola.fin.task -P
@end example

If the first call returns @samp{predicate is not satisfiable}, then the process
is safe. Otherwise LoLA returns a place which can hold more than one token. If
the second call returns @samp{predicate is live!}, then the process is deadlock
free and livelock free and always reaches a terminal state. Calling

@example
sh ./check_lib.sh
@end example

will make these checks for each process of the library.


@section Generating Additional Information on the Processes

The following options can be used to generate additional information about the
processes.

@itemize

@item @samp{-p log} write a log @file{uml2owfn_lib.log} in CSV (comma separated
file) format containing information about each process. The column format is
@example
file name;correct syntax;structural properties;
number of nodes;number of edges;
average number of incoming edges;average number of outgoing edges;
Petri net properties
@end example
The column @samp{correct syntax} holds @samp{true} if the input process had
correct static semantics, and @samp{false} otherwise. The column @samp{structural
properties} contains a list of characteristic properties of the process, namely,
whether the process 
  @enumerate
  @item is empty,
  @item contains edges with pin multiplicities,
  @item contains edges with non-matching pin multiplicities (produce 2 token,
        consume 1 token), and
  @item whether the process contains overlapping pinsets.
  @end enumerate
The column @samp{Petri net properties} contains a list of structural properties
of the Petri net, namely, whether the net
  @enumerate
  @item is not connected,
  @item has an insufficent interface,
  @item has an incorrect structure according to UML2 Activity Diagrams,
  @item is a free-choice Petri net,
  @item has workflow-net structure, and
  @item whether the translation did no preserve soundness of the process.
  @end enumerate

@item @samp{-d 2} prints further information of the translation process to
standard output, and statistical data on the size of each generated net to
standard error. To store this data to a file during the translation, redirect
the output to a file, e.g.
@smallexample
uml2owfn -i lib.xml [your-options-here] -d 2 > translate.log 2> translate-err.log
@end smallexample
This option is particularly useful for debugging.

@end itemize


@section Making the Analysis More Efficient

@acronym{UML2oWFN} includes structural Petri net reduction techniques that can
be applied to reduce the size of the Petri net while preserving the (un)soundness
of the net. Use option @samp{-r LEVEL} to include net reduction in the translation.
@acronym{UML2oWFN} applies the following reduction rules up to @samp{LEVEL}
until no more rule can be applied:

@enumerate
@item merge series of places (in a variant that preserves the k-boundedness of
the net)
@item --
@item merge parallel places
@item --
@item --
@item --
@end enumerate

This may drastically reduce the size of the nets and hence improve model-checking
efficiency in terms of memory consumption and runtime.


@section Use case: weaker soundness analysis with dataflow-invariant process termination

The soundness analysis invoked by parameters @samp{-a soundness -a safe} is rather
strict as it requires that all data is available at the process output upon
process termination. While a violation of this property is still considered an
error, it might prevent a detection of more severe control-flow errors in the
process. To this extend, the soundness analysis can be changed to ignore the
dataflow at the process output. Use option @samp{-a noData} when translating
the library to create slightly changed @samp{.lola} files with corresponding
@samp{.task} files. The analysis itself is performed as descibed above.

@cartouche
@example
uml2owfn -i lib.xml -f lola -a soundness -a safe -a noData -p taskfile -o
@end example
@end cartouche


@section Use Case: Choosing Termination Semantics for Your Analysis

 UML2oWFN provides four kinds of termination semantics that can be implemented
 upon translation a process library to Petri nets. You can choose the termination
 semantics by the "right" selection of parameters. We briefly explain each
 termination semantics and the corresponding parameter combinations:
 
 @enumerate
 @item The "standard" UML2 termination semantics synchronizes control-flow and
 data-flow upon termination by clearing the control-flow tokens from end nodes
 as soon as data-flow has terminated via one output pinset. This semantics
 prioritizes data-flow over control-flow. Choose
 @example
 -a soundness
 @end example
 to use this termination semantics
 
 @item The "workflow net" semantics synchronizes control-flow and data-flow in
 order to detect propert termination locally at a unique "omega" sink place of
 the net as in workflow Petri nets. The termination semantics assumes that the
 control-flow and data-flow terminate via an implicit OR-join of several terminal
 nodes. It computes an extension of the multi-terminal workflow net to a single
 terminal workflow net. This extension always preserves unsoundness of the net
 (i.e. an unsound multi-terminal net will also be unsound after the extension).
 For a specific class of processes, the extension also preserves soundness;
 generate a log file with parameter @samp{-p log} to see for which processes
 soundness is preserved. Choose
 @example
 -a soundness -a wfNet
 @end example
 to use this termination semantics.

@item The "control-flow only" semantics ignores data-flow upon termination (by
removing the corresponding parts from the process) and lets the control-flow
terminate via an implicit OR-join. Choose
 @example
 -a soundness -a noData
 @end example
 to use this termination semantics.

@item A variant of the UML2 termination semantics which assumes that
control-flow and data-flow terminate via an implicit OR-join. Choose
 @example
 -a soundness -a orJoin
 @end example
 to use this termination semantics.
 @end enumerate
 
 These termination semantics should not be combined (i.e. it will produce
 unpredictable results).
 
 The analysis for the safeness of a process is independent of the chosen termination
 semantics and can always be included by adding
 @example
 -a safe
 @end example
 to the parameters. 


@section Use Case: Soundness Analysis Using Tools for Workflow-Nets 

Aalst et al. have established the notion of a @i{workflow net} to model workflows.
Workflow nets are a special class of Petri nets that have a unique start place
@samp{alpha} that is initially marked, and a uniqe end place @samp{omega} that
is marked when the workflow has finished. Further, every place and transition
lies on a path from @samp{alpha} to @samp{omega}. There are efficient soundness
analysis algorithms for workflow nets.

In order to analyse processes of the IBM WebSphere Business Modeler with such
tools, the generated nets have to provide a unique @samp{alpha} place, and a unique
@samp{omega} place. An equivalent translation of an arbitrary IBM WebSphere
Business Modeler process into a workflow net requires knowledge about the reachable states
of the process. However, for a specific class of processes, this transformation
can be done on the structure of the process alone.

The parameter @samp{-a wfNet} triggers the use of this structural translation,
it must be used together with @samp{-a soundness} to become effective. Call

@cartouche
@example
uml2owfn -i lib.xml -f tpn -a soundness -a wfNet -o
@end example
@end cartouche

to translate each process of the library @file{lib.xml} into a Woflan @file{.tpn}
file with workflow-net structure. Each file can be loaded into Woflan and
analyzed for soundness.

The workflow-net translation introduces a unique @samp{alpha} place that is
initially marked, like in all other soundness analysis use cases. It computes a
completion logic of transitions and places that cover the reachable final markings
of the net and the produce on a new unique @samp{omega} place that has no outgoing
arcs. 

@c Each output pinset
@c of the process produces on this omega place; the termination of the process via
@c an output pinset requires that @i{all} end-nodes are marked. This effectively
@c implements an AND-join at the end of the process. 

@c Any process that is found to be unsound by this analysis, is also unsound in
@c the original semantics. For cases, where the structure of the Petri net provides
@c ambiguous information for computation of the completion logic, and for cases where
@c there exists no such completion, a sound process can become unsound. These cases
@c can be identified in the translation log (@samp{-p log}). For any other cases,
@c soundness is preserved.

The completion preserves soundness (and unsoundness) for free-choice Petri nets.
Cases of non-free-choice nets can be identified in the translation log (@samp{-p log}). 

You can use

@example
make translatewf
@end example

to automate the translation. The Makefile variable @samp{OUTPUT-FORMAT} allows
you to set the output format of the translation of @acronym{UML2oWFN}, default
value is @samp{lola}.


@section Use Case: Anonymize the Processes

In case you want to generated anonymized processes models which can not be related
back to the originals due to self-explaining names, use the option
@samp{-p anon}. This will enumerate the places and transitions of each process
individually, starting with @i{p1} and @i{t1}. Any related files like the
@file{.task} files are consistent with the anonymized output.


@section Use Case: Automated Translation, Analysis and Compilation of Results

@acronym{UML2oWFN} comes with a makefile that eases analysis and compilation of
the analysis results for process librares. The @file{scripts/Makefile} the following
make targets are available

@itemize
	@item @samp{translate}      translate library
	@item @samp{translateweak}  translate library with weaker termination semantics
	@item @samp{translatewf}    translate library into classical workflow nets
	@item @samp{translateor}    translate library nets with OR-join on the controlflow
	@item @samp{soundness}      soundness check (AGEF omega)
	@item @samp{safeness}       safeness check
	@item @samp{full}           full state space
	@item @samp{table}          collect results in table
	@item @samp{clean}          remove analysis files
	@item @samp{veryclean}      remove Petri nets
@end itemize

Copy @file{scripts/Makefile} to the directory that contains your library 
@file{lib.xml} and change the value of @samp{LIBRARY} in this @file{Makefile} to
@samp{lib} (stripping the extension @samp{.xml}). Also make sure that @samp{SED}
holds the file name of your sed (stream editor) binary, e.g. @file{sed} or
@file{gsed}.

The standard workflow for the first use case using the makefile would be:
@example
make translate
make table
@end example
To run the second use case, execute @samp{make translateweak} instead of
@samp{make translate}.

In case you want to include numbers on the size of the state space of each
process, execute
@example
make translate
make full
make table
@end example

The target @samp{table} prepares two different representation of the analysis
results in @file{results.csv} and @file{results-comparison.csv}. The target
depends on @samp{soundness} and @samp{safeness}, thus the table will always
contain the analysis results of the most recent translation.

You can use @samp{REDUCTION-LEVEL} to set the level Petri net reduction rules
that are applied upon translating the library. The calls
@example
make translate LIBRARY=myLib REDUCTION-LEVEL=3
make table LIBRARY=myLib SED=sed
@end example
will translate library @file{myLib.xml}, apply reduction level 3, and create
the result tables using the program @samp{sed}.

The Makefile variable @samp{OUTPUT-FORMAT} allows you to set the output format
of the translation of @acronym{UML2oWFN}, default value is @samp{lola}. The
targets @samp{full}, @samp{table}, @samp{safeness}, @samp{soundness}, @samp{clean},
and @samp{veryclean} require the @samp{lola}-format.

Use the parameter @samp{UML2OWFN-PARAM} for refining the translation with further
command-line parameters of UML2oWFN if you need.


@section Use Case: Verify Soundness via CTL properties

The standard translation of @acronym{UML2oWFN} generates a state-predicate that
describes all valid terminal states. LoLA provides a dedicated algorithm to check
whether this state is always reachable. This property can equivalently be transformed
into a CTL property. Then standard CTL-model checking techniques are applicable.

To invoke the generation of CTL properties and corresponding analysis script files,
use the parameter @samp{-p ctl}. To verify whether the generated CTL formula holds
for a given process, use LoLA with the model checking algorithms, e.g. call

@example
lola-mc lib.XXX__YYY.lola -a lib.XXX__YYY.lola.fin.task -P
@end example

This line is automatically included in the verification script @file{check_lib.sh}.
To use the @file{Makefile} to automate the compilation of results in this setting,
you have to set two parameters:
@example
make translate UML2OWFN-PARAM="-p ctl"
make table LOLA-LP=lola-mc
@end example
The first line causes the translation to generate CTL properties, the second line
switches the model-checker for the soundness analysis to the LoLA variant with
model checking algorithms (that has to be compiled as described above).


@section Use Case: Translate, Analyze, and Compile Reults of Several Large Process Suites

Invoking and compiling analysis results for several large process suites can be
done automatically with the @file{./scripts/repository/Makefile} and the corresponding
script files. To use the file, create a "process repository" as follows. Create
a new directory, e.g. @file{<analysis>}. In @file{<analysis>} create a new
sub-directory for each process library, e.g. @file{<analysis>/lib1},
@file{<analysis>/lib2}, ... and place the library files in the corresponding
directories: @file{<analysis>/lib1/myLib1.xml} etc. Then copy all files from
@file{./scripts/repository/} to @file{<analysis>} and call

@example
make table
@end example

which will automatically translate all process libraries for all corresponding
analysis, perform the analysis and verification, collect the result of each
library and analysis, and compiles result tables in @file{.html} and @file{.tex}
format in @file{<analysis>/lib1} etc. Call

@example
make help
@end example

to learn about the other functionality provided by this script. Call

@example
make cleanall
@end example

to clean all generated files, leaving only the original process libraries.


@c ----------------------------------------------------------------------------


@node ChangeLog
@chapter Version History

The following list provides a detailed overview about the changes, features, and
bugfixes to @acronym{UML2oWFN} as they have been included in this release.

@include ChangeLog.texi

@sp 3

The most recent change log is available at Rachel's website at @url{http://service-technology.org/files/uml2owfn/ChangeLog}.

@c ----------------------------------------------------------------------------


@node Anonymizing
@chapter Anonymizing

BOM-Anonymizer implements a complete whitelist-based stream filter that anonymizes attribute values, literal values, and documentation tags occuring in an @acronym{XML} input file without jeopardizing the syntactical correctness of the input.


@section Usage

To anonymize the file @file{input.xml}, call

@cartouche
@code{bom-anon < @i{input.xml} > @i{output.xml} 2> @i{mapping.txt}}
@end cartouche

The anonymized version is written to @file{output.xml}. Furthermore, the mapping from explicit to anonymized strings (e.g., for debug purposes) is written to @file{mapping.txt}.




@section Processing

BOM-Anonymizer parses the input file and anonymizes any attribute values or literal values that are not listed in a whitelist. The syntax of the input file  is not checked.

@subsection Whitelists

@subsubsection Whitelist for Attributes

The following attributes are not anonymized at all:
@itemize
@item @code{a}
@item @code{alpha}
@item @code{atBeginning}
@c @item @code{attribute}
@item @code{b}
@item @code{beginingOn}
@item @code{beta}
@item @code{callSynchronously}
@item @code{capacity}
@item @code{counterIncrement}
@item @code{currency}
@item @code{dayOfWeek}
@item @code{delta}
@item @code{duration}
@item @code{expMean}
@item @code{finalCounter}
@item @code{gamma}
@item @code{initialCounter}
@item @code{isConditionTestedFirst}
@item @code{isConsumable}
@item @code{isInclusive}
@item @code{isInsert}
@item @code{isObserveContinuously}
@item @code{isOrdered}
@item @code{isReadOnly}
@item @code{isRemove}
@item @code{isSimpleDecision}
@item @code{isStatic}
@item @code{isUnique}
@item @code{k}
@item @code{lambda}
@item @code{max}
@item @code{maximum}
@item @code{mean}
@item @code{min}
@item @code{minimum}
@item @code{mode}
@item @code{multipleInstancesSatisfyCondition}
@item @code{noInstancesSatisfyCondition}
@item @code{numberOfTimesToRepeat}
@item @code{probability}
@item @code{repetitionPeriod}
@item @code{schemaVersion}
@item @code{standardDeviation}
@item @code{startTime}
@item @code{time}
@item @code{timeRequired}
@item @code{timeUnit}
@item @code{unit}
@item @code{unit}
@item @code{valueTypev}
@item @code{weekNumber}
@item @code{xi}
@item @code{version}
@item @code{encoding}
@item @code{xmlns:wbim}
@end itemize


@subsubsection Whitelist for Attribute Values

The following values are not anonymized if they occur in any attribute---no matter whether the attribute is on the whitelist or not:
@itemize
@item @code{"Boolean"}
@item @code{"Byte"}
@item @code{"Date"}
@item @code{"DateTime"}
@item @code{"Double"}
@item @code{"Duration"}
@item @code{"Float"}
@item @code{"Integer"}
@item @code{"Long"}
@item @code{"Short"}
@item @code{"String"}
@item @code{"Time"}
@item @code{"Communication Service"}
@item @code{"Equipment"}
@item @code{"Facility"}
@item @code{"General Service"}
@item @code{"Machine"}
@item @code{"Tool"}
@item @code{"Person"}
@item @code{"Staff"}
@item @code{"acres"}
@item @code{"centimeters"}
@item @code{"feet"}
@item @code{"gallons (UK)"}
@item @code{"gallons (US)"}
@item @code{"grams"}
@item @code{"hectares"}
@item @code{"inches"}
@item @code{"kilograms"}
@item @code{"kilometers"}
@item @code{"liters"}
@item @code{"meters"}
@item @code{"miles"}
@item @code{"ounces"}
@item @code{"pints (UK)"}
@item @code{"pints (US)"}
@item @code{"pounds"}
@item @code{"units"}
@item @code{"yards"}
@item @code{"true"}
@item @code{"false"}
@end itemize



@subsubsection Whitelist for Element Values

The following elements are not anonymized:
@itemize
@item @code{<wbim:literalValue>} containing a value of type @code{xsd:duration}
@item @code{<wbim:startTime>} containing a value of type @code{xsd:dateTime}
@item @code{<wbim:probability>} (containing anything)
@end itemize

@subsection Standard Values

@c @subsection Standard Values for Attribute Values
@c 
@c The following attributes are set to a predefined value:
@c @itemize
@c @item @code{probability} is set to @samp{0}
@c @item @code{counterIncrement} is set to @samp{1}
@c @item @code{finalCounter} is set to @samp{1}
@c @item @code{initialCounter} is set to @samp{1}
@c @end itemize


@subsubsection Standard Values for Element Values

@itemize
@item The @code{wbim:individualResourceRequirement>} element and all its child elements are replaced by a minimal bogus entry.

@cartouche
@smallexample
<wbim:individualResourceRequirement individualResource="Person"
      name="Individual requirement:1" timeRequired="P0Y0M0DT0H0M0S" />
@end smallexample
@end cartouche

@item @acronym{XML} comments are replaced by @samp{...}.

before anonymization:
@cartouche
@smallexample
<!-- This is an @acronym{XML} comment that might contain additional information. -->
@end smallexample
@end cartouche
after anonymization:
@cartouche
@smallexample
<!-- ... -->
@end smallexample
@end cartouche

@item Values in the elements @code{<wbim:documentation>}, @code{<documentation>}, @code{<wbim:description>}, @code{<description>}, @code{<wbim:annotationText>}, or @code{<annotationText>} are replaced by @samp{...}.

@item Values in the elements @code{<wbim:literalValue>} or @code{<literalValue>} are replaced by @samp{0.0}.

@item Real numbers in any element are replaced by @samp{0.0}.

before anonymization:
@cartouche
@smallexample
<someElement>42.0</someElement>
@end smallexample
@end cartouche
after anonymization:
@cartouche
@smallexample
<someElement>0.0</someElement>
@end smallexample
@end cartouche

@end itemize

@subsection Anonymization

Any other string that is not affected by a whitelist or predefined standard value is replaced by a consecutive number. The replacement is unique: all occurrences of a string are replaced by the same anonymized version. However, the original string cannot be reconstructed from the anonymized version.

Example before anonymization:
@cartouche
@smallexample
<wbim:catalog id="Prcsss" name="Processes"/> 
@end smallexample
@end cartouche

Example after anonymization:
@cartouche
@smallexample
<wbim:catalog id="s00000001" name="s00000002"/> 
@end smallexample
@end cartouche

@subsubsection Element Names Inside Attribute Values

Attributes can contain element names. The @acronym{XSD} of BOM's input format states:

@quotation
The name of the global element may be prefixed by the catalog @acronym{ID} followed by @samp{##} to denote the name space for the element name.
@end quotation

Therefore, strings containing @samp{##} are split, anonymized separately, and finally joined to make sure the anonymized file correctly addresses the element names.

Example before anonymization:
@cartouche
@smallexample
<wbim:catalog id="Prcsss" name="Processes"/>
...
<wbim:process name="Prcsss##ProcessSimple"> 
@end smallexample
@end cartouche

Example after anonymization:
@cartouche
@smallexample
<wbim:catalog id="s00000001" name="s00000002"/>
...
<wbim:process name="s00000001##s00000003"> 
@end smallexample
@end cartouche

Note that @samp{Prcsss} is replaced by @samp{s00000001} in the first occurrence in the @samp{id} attribute and in the substring of the @samp{name} attribute.










@include fdl.texi

@bye
