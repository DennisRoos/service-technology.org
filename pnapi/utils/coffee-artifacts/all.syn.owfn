{
  generated by: Petri Net API 4.01-unreleased
  input file:   
  invocation:   
  net size:     |P|= 10  |P_in|= 0  |P_out|= 0  |T|= 9  |F|= 22
}

INTERFACE
  SYNCHRONOUS
    state.orderTea, state.orderCoffee, coin.sendToAutomaton, coin.receiceFromCustomer, state.pay, cup.receiveFromAutomaton, cup.sendToCustomer, cup.fillCoffee, cup.fillTea, coin.receiveFromAutomaton, coin.sendToCustomer, cup.receiceFromCustomer, cup.sendToAutomaton;

PLACE
  p0, p1, p2, p3, p4, p5, p6, p7, p8, p9;

INITIALMARKING
  p1, p9;

FINALCONDITION
  ((((p7 = 1 AND p6 = 1) OR (p2 = 1 AND p6 = 1)))) AND ALL_OTHER_PLACES_EMPTY;


TRANSITION tcoin.receiceFromCustomer
  CONSUME
    p8;
  PRODUCE
    p5;
  SYNCHRONIZE
    coin.receiceFromCustomer;

TRANSITION tcoin.sendToAutomaton
  CONSUME
    p9;
  PRODUCE
    p8;
  SYNCHRONIZE
    coin.sendToAutomaton;

TRANSITION tcup.fillCoffee
  CONSUME
    p0, p6;
  PRODUCE
    p4, p7;
  SYNCHRONIZE
    cup.fillCoffee;

TRANSITION tcup.fillTea
  CONSUME
    p0, p2;
  PRODUCE
    p2, p4;
  SYNCHRONIZE
    cup.fillTea;

TRANSITION tcup.receiveFromAutomaton
  CONSUME
    p3;
  PRODUCE
    p6;
  SYNCHRONIZE
    cup.receiveFromAutomaton;

TRANSITION tcup.sendToCustomer
  CONSUME
    p4;
  PRODUCE
    p3;
  SYNCHRONIZE
    cup.sendToCustomer;

TRANSITION tstate.orderCoffee
  CONSUME
    p1;
  PRODUCE
    p6;
  SYNCHRONIZE
    state.orderCoffee;

TRANSITION tstate.orderTea
  CONSUME
    p1;
  PRODUCE
    p2;
  SYNCHRONIZE
    state.orderTea;

TRANSITION tstate.pay
  CONSUME
    p5;
  PRODUCE
    p0;
  SYNCHRONIZE
    state.pay;


{ END OF FILE '' }
