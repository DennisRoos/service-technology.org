args "--unamed-opts=FILES --include-getopt --show-required --no-handle-error"

package "petri"
purpose "A command-line frontend for the Petri Net API"


section "Input and Output"

option "input" i
  "Select the input file format"
  typestr="FORMAT"
  values="owfn","lola","sa" enum
  optional
  default="owfn"

option "output" o
  "Select the output file format(s)"
  typestr="FORMAT"
  values="owfn","lola","sa","dot","png","pdf","eps","svg" enum
  optional
  multiple
  
option "formula" f
  "Places a final condition at the end of LoLA files. Has no effect to other output formats."
  flag off


section "Composition and Product"

option "compose" -
  "Compose each net given in the input section with this net."
  typestr="NET"
  string
  optional

option "wire" w
  "Wire (i.e., compose) the given nets. Either a wiring description is given or the interfaces are composed according to their names."
  typestr="FILE"
  string
  argoptional
  optional
  hidden

option "produce" -
  "Calculate the product."
  typestr="CONSTRAINT"
  string
  optional


section "Check for Structural Properties"

option "isFreeChoice" -
  "Check if the Petri net is free choice, i.e. if conflicting transitions share all pre-places."
  flag off

option "isNormal" -
  "Check if the Petri net is normal, i.e. every transition is connect to at most one interface place."
  flag off

option "isWorkflow" -
  "Check if the Petri net has workflow structure, i.e. it (i) has a distinct source place, (ii) has a district sink place, and (iii) every node lays on a path between the source place and the sink place."
  flag off

option "check" c
  "Check a structural property of the Petri net, see `isFreeChoice', `isNormal', and `isWorkflow' for details."
  typestr="PROPERTY"
  values="freechoice","normal","workflow" enum
  optional
  hidden


section "Modifications"

option "reduce" r
  "Apply structural reduction rules, i.e. reduce the structure of the net while preserving liveness and boundedness."
  typestr="RULES"
  values="0","1","2","3","4","5","6","starke","pillat","dead_nodes","identical_places","identical_transitions","series_places","series_transitions","self_loop_places","self_loop_transitions","equal_places","starke3p","starke3t","starke4","starke5","starke6","starke7","starke8","starke9","keep_normal","once","k_boundedness","boundedness","liveness" enum
  optional
  multiple

option "normalize" n
  "Normalize the Petri net, i.e. change to structure such that every transition is connected to at most one interface place."
  flag off

option "negate" N
  "Negate the final condition of the net, i.e. every specified final marking is now non-final. The result is the 'anti open net'."
  flag off

option "mirror" M
  "Mirror the interface, i.e. change the direction of communication"
  flag off

option "dnf" -
  "Convert final condition to disjunctive normal form"
  flag off


section "Configuration"

option "converter" -
  "Specifies, which converter should be used to transform service automata in petri nets."
  typestr="CONVERTER"
  values="petrify","genet","statemachine" enum
  optional
  hidden


section "Debugging"

option "verbose" v
  "Show verbose output"
  flag off

option "suffix_owfn" -
  "Suffix for open net files"
  typestr="SUFFIX"
  string
  multiple
  optional
  hidden

option "suffix_sa" -
  "Suffix for service automaton files"
  typestr="SUFFIX"
  string
  multiple
  optional
  hidden
