\input texinfo
@setfilename pnapi.info
@include version.texi
@afourpaper
@finalout
@settitle Petri Net API User's Manual

@c --------------------------------------------------------------------------

@copying

@b{About this document:}

This manual is for the Petri Net API, version @value{VERSION}, encapsulating Petri net-related functions in a C++ API, last updated @value{UPDATED}.

Copyright @copyright{} 2009, 2010 Niels Lohmann

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this GNU Manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* Petri Net API: (pnapi).       encapsulating Petri net-related functions in a C++ API.
@end direntry


@c --------------------------------------------------------------------------

@titlepage

@title Petri Net API

@subtitle Encapsulating Petri Net-Related Functions in a C++ API
@subtitle @url{http://service-technology.org/pnapi}
@vskip 0.5em
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Niels Lohmann
@page


@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c --------------------------------------------------------------------------

@ifnottex
@node Top
@top PNAPI
@insertcopying
@end ifnottex

@c --------------------------------------------------------------------------

@menu
* First Steps::How to set up and install the Petri Net API.
* Usage::How to use the API in other programs.
* Open Net File Format::Open Net File Format.
* Theory::The theory implemented in the Petri Net API.
* Command Line Options::How to run the Petri Net API frontend "Petri".
* Error Codes::What the error codes of the frontend "Petri" mean.
* ChangeLog::Version history.
* GNU Free Documentation License::The license of this manual.
@end menu

@c --------------------------------------------------------------------------

@contents
@paragraphindent none

@c --------------------------------------------------------------------------

@node First Steps
@chapter First Steps

@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/pnapi} and download the latest release version of the Petri Net API, say @file{pnapi-@value{VERSION}.tar.gz}. To setup and compile the Petri Net API, change into your download directory and type

@cartouche
@smallexample
tar xfz pnapi-@value{VERSION}.tar.gz
cd pnapi-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a library @samp{src/libpnapi.a} and a frontend tool @samp{utils/petri} are generated.@footnote{On Microsoft Windows, the file will be called @file{petri.exe}.} If you experience any compiler warnings, don't panic: the Petri Net API contains some generated or third party code that we cannot influence.

@item To test whether everything went fine, type

@cartouche
@smallexample
make check
@end smallexample
@end cartouche

to execute the testcases located in @file{tests}. If everything went fine, you should see something like:@footnote{Some tests use external tools (Fiona, Wendy, Petrify, Genet) to check whether the calculated results are correct. If a needed tool was not found by the configure script, theses tests are skipped.}

@smallexample
## ------------- ##
## Test results. ##
## ------------- ##

All 104 tests were successful.
@end smallexample

If an error occurs, please send the output to @email{pnapi@@service-technology.org}.

@item To install the library, the frontend binary, the manpage, and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Contents of the Distribution

The distribution contains several directories:

@table @file
@item doc
The Texinfo documentation of PNAPI. The documentation can be created using @samp{make pdf}. Note you need to have PNAPI properly installed before (see installation description above).

@item man
The manpage of PNAPI which can be displayed using @samp{man pnapi} after having PNAPI installed (see installation description above).

@item src
The source code of PNAPI.

@item tests
Testcases for PNAPI which check the generated library by using the frontend. Some test scripts use external tools (e.g. Fiona or Wendy) to check whether the calculated operating guidelines are correct. If a needed tool was not found by the configure script, theses tests are skipped.
@end table




@c --------------------------------------------------------------------------


@section Requirements
@anchor{Requirements}

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
In order to run, compile, and develop PNAPI, several tools are required.

@subsection Runtime
@itemize
@item Petrify (@url{http://www.lsi.upc.edu/~jordicf/petrify/}) to convert service automata in petri nets (used by default if found).
@item Genet (@url{http://genet.sourceforge.net/}) to convert service automata in petri nets 
(used by default, if Petrify was not found but Genet was).
@end itemize

The configure script will search for them an set the default paths.


@subsection Compilation
To compile the source code from a source distribution, the following tools are required.

@itemize
@item GCC (@url{http://gcc.gnu.org/})
@item @acronym{GNU} Make (@url{http://www.gnu.org/software/make/})
@item Libtool (@url{http://www.gnu.org/software/libtool/})
@end itemize


@subsection Development
In case you want to make changes to the source code, the following tools are required to reconfigure and compile PNAPI.

@itemize
@item Autoconf, @url{http://www.gnu.org/software/autoconf/}
@item Automake, @url{http://www.gnu.org/software/automake/}
@item Bison, @url{http://www.gnu.org/software/bison/}
@item flex, @url{http://flex.sourceforge.net/}
@item Gengetopt, @url{http://www.gnu.org/software/gengetopt/}
@item help2man, @url{http://www.gnu.org/software/help2man/}
@item Texinfo, @url{http://www.gnu.org/software/texinfo/}
@end itemize


@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Please check our nightly build server at @url{http://service-technology.org/nightly} for the versions we use during development.




@c --------------------------------------------------------------------------

@node Usage
@chapter How to use the API in other programs

The Petri Net API provides structures for working with Petri nets.

For using it, simply include the header file @file{pnapi.h} in your code:
@cartouche
@smallexample
#include "pnapi.h"
@end smallexample
@end cartouche

Everything you will use can be found in the following namespaces:
@itemize
@item @code{pnapi}
@item @code{pnapi::formula}
@item @code{pnapi::io}
@end itemize

The classes @samp{pnapi::PetriNet} and @samp{pnapi::Automaton} provide the main 
functionality and can serve as an entry point for getting an overview of the API's functionality. For more information, please go to the online API documentation reachable at @url{http://esla.informatik.uni-rostock.de:8080/job/pnapi/doclinks/1/}.


@c --------------------------------------------------------------------------


@chapter Some Examples

Creating a small Petrinet
@cartouche
@smallexample
PetriNet net;
Place & p1 = net.createPlace();
p1.mark();
Place & p2 = net.createPlace();
Transition & t = net.createTransition();
net.createArc(p1,t);
net.createArc(t,p2);
@end smallexample
@end cartouche

Assigning a final condition
@cartouche
@smallexample
// net from the previous example is recycled here
net.finalCondition() = ((p1 == 0) && (p2 == 1));
Place & p3 = net.createPlace();
net.finalCondition() = (net.finalCondition().formula() && (p3 == 0));
@end smallexample
@end cartouche

Reading from stream
@cartouche
@smallexample
istream is;
is >> io::owfn >> net;
@end smallexample
@end cartouche

Writing to a stream
@cartouche
@smallexample
ostream os;
// LoLA without formulae
os << io::lola << net;
// LoLA with formulae
os << io::lola << io::formula << net;
@end smallexample
@end cartouche

Reducing by applying some rules
@cartouche
@smallexample
net.reduce(PetriNet::SET_STARKE | PetriNet::KEEP_NORMAL);
@end smallexample
@end cartouche

Creating a service automaton
@cartouche
@smallexample
Automaton sa(net);
@end smallexample
@end cartouche

Query structural information
@cartouche
@smallexample
net.isNormal();
net.isWorkflow();
@end smallexample
@end cartouche

@chapter Wildcards in Formulae

Since Version 3.00 the formula classes have been refactored. I.e. from now on they 
only concern internal places and only two wildcards are left: @samp{ALL_OTHER_PLACES_EMPTY} and 
@samp{ALL_PLACES_EMPTY}@footnote{Other wildcards are left due to compatibility reasons.}.

When parsing a net, the wildcard will be unfolded by using 
@cartouche
@smallexample
net.finalCondition().allOtherPlacesEmpty(net);
@end smallexample
@end cartouche

A wildcard must be given top level, i.e. the final condition must have the form
@cartouche
@smallexample
(...) AND ALL_OTHER_PLACES_EMPTY;
@end smallexample
@end cartouche
or
@cartouche
@smallexample
ALL_PLACES_EMPTY;
@end smallexample
@end cartouche

A final condition is satisfied under a given marking, iff the formula is satisfied @emph{and} the interface is empty.

Furthermore a wildcard can be transformed in disjunctive normal form by using 
@cartouche
@smallexample
net.finalCondition().dnf();
@end smallexample
@end cartouche





@node Open Net File Format
@chapter Open Net File Format

Below is the EBNF grammar for open net files. Comments are not part
of the grammar, and hence are not included here.

@sp 1
@example
net = "PLACE" roles internal_places input_places output_places
      synchronous_labels ";" "INITIALMARKING" markings ";"
      finalcondition ";" transitions ;

roles = [ "ROLES" [ id_list ] ";" ] ;

id_list = id @{ "," id @} ;

internal_places = "INTERNAL" id_list ";" ;

input_places = [ "INPUT" id_list ";" ] ;

output_places = [ "OUTPUT" id_list ";" ] ;

synchronous_labels = [ "SYNCHRONOUS" id_list ";" ] ;

markings = marking @{ "," marking @} ;

marking = id [ ":" number ] @{ "," id [ ":" number ] @} ;

finalcondition = "FINALMARKING" markings | "FINALCONDITION" formula ;

formula = id "=" <number>
        | formula "AND" formula
        | formula "OR" formula
        | "(" formula ")"
        | formula "AND" "ALL_OTHER_PLACES_EMPTY"
        ;

transitions = transition @{ transition @} ;

transition = "TRANSITION" id roles
             "CONSUME" [ markings ] ";"
             "PRODUCE" [ markings ] ";"
             [ "SYNCHRONIZE" id_list ";" ] ;
@end example

@sp 2
Terminals are defined below as regular expressions:
@sp 1

@multitable @columnfractions .2 .8
@item @code{id} @tab
@code{[A-Za-z]*}
@item @code{number} @tab
@code{[0-9]+}
@end multitable




@c --------------------------------------------------------------------------


@node Theory
@chapter Theory

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
The Petri Net API implements several algorithms and result published in several scientific articles.

@section Open Nets

@subsubheading Basic Definitions

@quotation
Karsten Wolf. @b{Does my service have partners?}. @i{LNCS ToPNoC}, 5460(II):152-171, March 2009. Special Issue on Concurrency in Process-Aware Information Systems.
@end quotation


@subsubheading Structural Reduction Rules

@quotation
Tadao Murata. @b{Petri nets: Properties, analysis and applications}. @i{Proceedings of the IEEE}, 77(4):541--580, 1989.
@end quotation

@quotation
Peter H. Starke. @b{Analyse von Petri-Netz-Modellen}. Teubner Verlag (1990).
@end quotation

@quotation
Thomas Pillat. @b{Gegen@"uberstellung struktureller Reduktionstechniken f@"ur Petrinetze}. Diplomarbeit, Humboldt-Universit@"at zu Berlin, March 2008.
@end quotation


@subsubheading Normalization

@quotation
Niels Lohmann, Peter Massuthe, and Karsten Wolf. @b{Operating guidelines for finite-state services}. In Jetty Kleijn and Alex Yakovlev, editors, @i{28th International Conference on Applications and Theory of Petri Nets and Other Models of Concurrency, ICATPN 2007, Siedlce, Poland, June 25--29, 2007, Proceedings}, volume 4546 of Lecture Notes in Computer Science, pages 321--341. Springer-Verlag, June 2007.
@end quotation


@subsubheading Constraints (product operation)

@quotation
Niels Lohmann, Peter Massuthe, and Karsten Wolf. @b{Behavioral constraints for services}. In Gustavo Alonso, Peter Dadam, and Michael Rosemann, editors, @i{Business Process Management, 5th International Conference, BPM 2007, Brisbane, Australia, September 24--28, 2007, Proceedings}, volume 4714 of Lecture Notes in Computer Science, pages 271--287. Springer-Verlag, September 2007.
@end quotation



@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
See @url{http://service-technology.org/publications} for more information.



@c --------------------------------------------------------------------------


@node Command Line Options
@chapter How to run PNAPI frontend "Petri"

Petri is a command line tool and does not come with a fancy @acronym{GUI}. However, Petri can be easily scripted and combined with other tools.

@section Command Line Options

For an overview of the command line options, type @samp{petri -h} to see the following help screen:

@smallexample
@verbatiminclude cmdline.out
@end smallexample


@c --------------------------------------------------------------------------

@node Error Codes
@chapter Error Codes

In case any error occurs, Petri aborts with exit code @samp{1} and prints a message with an error code to the standard error stream.

@table @asis
@item #01
A wrong command-line parameter was given or there was a problem with the combination of command-line parameters. This message is usually accompanied by another message describing the exact problem. Run @samp{petri --help} for an overview of the valid command-line parameters.

@smallexample
@cartouche
pnapi: unrecognized option `--foo'
pnapi: invalid command-line parameter(s) -- aborting [#01]
@end cartouche
@end smallexample

@item #02
An error occurred while parsing the net.
The message will give further information.

@smallexample
@cartouche
pnapi: Input Error: stdin:1: error: syntax error, unexpected $end, expecting KEY_INTERFACE or KEY_PLACE -- aborting [#02]
@end cartouche
@end smallexample

@item #03
Could not open input file.

@smallexample
@cartouche
pnapi: could not read from file 'foo' -- aborting [#03]
@end cartouche
@end smallexample

@item #04
Too many nets used with @samp{--produce} parameter.

@smallexample
@cartouche
pnapi: at most one net can be used with '--produce' parameter -- aborting [#04]
@end cartouche
@end smallexample

@item #05
Graphviz dot was not found by configure script; see README.
Necessary for option @samp{--output=FORMAT} where FORMAT is 'png', 'eps', 'pdf' or 'svg'.

@smallexample
@cartouche
pnapi: Graphviz dot was not found by configure script -- aborting [#05]
@end cartouche
@end smallexample

@item #06
Cannot open UNIX pipe to Graphviz dot.
Create dot file with @samp{--output=dot} and call Graphviz dot manually.

@smallexample
@cartouche
pnapi: cannot open UNIX pipe to Graphviz dot -- aborting [#06]
@end cartouche
@end smallexample

@item #11
Error opening a file to write. Usually, this error occurs in case Petri is called in a directory without writing permissions or the output file is already present, but write protected. Output files can be the target files of the @option{--output} parameter.

@smallexample
@cartouche
pnapi: could not write to file `foo.owfn' -- aborting [#11]
@end cartouche
@end smallexample

@item #13
Petri cannot create a temporary file @file{/tmp/petri-XXXXXX}, where @samp{XXXXXX} is replaced by a unique name. If this error occurs, check whether the @file{/tmp} folder exists and you have the rights to write there. One reason for this error can be that you are running Petri under Windows (outside Cygwin), where UNIX-style path names are not recognized. In that case, try using the @option{--tmpfile} parameter.

@smallexample
@cartouche
pnapi: could not create a temporary file `/tmp/petri-k4CS4x' -- aborting [#13]
@end cartouche
@end smallexample


@end table

@c --------------------------------------------------------------------------


@node ChangeLog
@chapter Version History

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
PNAPI is developed under the ``Release Early, Release Often'' maxime (see @url{http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html}): Whenever enough integrated or a non-trivial changes have summed up, a new version is published. Though this releases might now always mark significant changes, they at least allow to quickly fix bugs and avoid infinite procrastination.

@include ChangeLog.texi

@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
The most recent change log is available at PNAPI's website at @url{http://service-technology.org/files/pnapi/ChangeLog}.



@c --------------------------------------------------------------------------

@node GNU Free Documentation License
@appendix The GNU Free Documentation License

@include fdl.texi

@bye
