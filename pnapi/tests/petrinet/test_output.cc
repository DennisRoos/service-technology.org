#include <sstream>
#include <fstream>
#include "test.h"
#include "config.h"

using std::ostringstream;

using pnapi::io::owfn;
using pnapi::io::dot;
using pnapi::io::meta;
using pnapi::io::INVOCATION;

int main(int argc, char * argv[])
{
  ostringstream owfnResult("result.owfn"), owfnExpected("expected.owfn");
  PetriNet net;
  Place & p1 = net.createPlace("in", Place::INPUT);
  Place & p2 = net.createPlace("out", Place::OUTPUT, 0, 0, "port1");
  Place & p3 = net.createPlace("", Place::INTERNAL, 4, 8);
  Place & p4 = net.createPlace();
  Transition & t1 = net.createTransition();
  Transition & t2 = net.createTransition();
  net.createArc(p1, t1, 3);
  net.createArc(t1, p3);
  net.createArc(p3, t2);
  net.createArc(t2, p2);
  net.finalCondition() = p1 == 2 && p2 == 4 || p3 > 1;
  
  begin_test("io::operator<<() [Petri net OWFN output]");
  owfnResult << owfn << net;
  //cout << owfn << net;
  owfnExpected 
    << "{" << endl
    << "  generated by: " << PACKAGE_STRING << endl
    << "  input file:   " << endl
    << "  invocation:   " << endl
    << "  net size:     |P| = 2, |P_in| = 1, |P_out| = 1, |T| = 2, |F| = 4" 
    << endl
    << "}" << endl << endl
    << "PLACE" << endl
    << "  INTERNAL" << endl
    << "    SAFE 8 : p1; p2;" << endl << endl
    << "  INPUT" << endl
    << "    in;" << endl << endl
    << "  OUTPUT" << endl
    << "    out;" << endl << endl
    << "PORTS" << endl
    << "  port1: out;" << endl << endl
    << "INITIALMARKING" << endl
    << "  p1: 4;" << endl << endl
    << "FINALCONDITION" << endl
    << "  ((in = 2 AND out = 4) OR p1 > 1);" << endl << endl << endl
    << "TRANSITION t1 { input }" << endl
    << "  CONSUME in:3;" << endl
    << "  PRODUCE p1;" << endl << endl
    << "TRANSITION t2 { output }" << endl
    << "  CONSUME p1;" << endl
    << "  PRODUCE out;" << endl << endl << endl
    << "{ END OF FILE ‘’ }" << endl;
  assert(owfnResult.str() == owfnExpected.str());
  end_test();


  begin_test("io::operator<<() [Petri net DOT output]");
  ostringstream dotResult, dotExpected;
  dotResult << dot << net;
  dotExpected 
    << "digraph N {" << endl
    << " graph [fontname=\"Helvetica\" nodesep=0.25 ranksep=\"0.25\" "
    << "fontsize=10 remincross=true label=\"Petri net\"]" << endl
    << " node [fontname=\"Helvetica\" fontsize=8 fixedsize width=\".3\" "
    << "height=\".3\" label=\"\" style=filled fillcolor=white]" << endl
    << " edge [fontname=\"Helvetica\" fontsize=8 color=white arrowhead=none "
    << "weight=\"20.0\"]" << endl << endl
    << " // places" << endl
    << " node [shape=circle]" << endl
    << " p1	[label=\"4\" fontcolor=black fontname=\"Helvetica\" "
    << "fontsize=10]" << endl
    << " p1_l	[style=invis]" << endl
    << " p1_l -> p1 [headlabel=\"p1\"]" << endl
    << " p2	[]" << endl
    << " p2_l	[style=invis]" << endl
    << " p2_l -> p2 [headlabel=\"p2\"]" << endl
    << " in	[fillcolor=orange]" << endl
    << " in_l	[style=invis]" << endl
    << " in_l -> in [headlabel=\"in\"]" << endl
    << " out	[fillcolor=yellow]" << endl
    << " out_l	[style=invis]" << endl
    << " out_l -> out [headlabel=\"out\"]" << endl << endl
    << " // transitions" << endl
    << " node [shape=box]" << endl
    << " t1	[fillcolor=orange]" << endl
    << " t1_l	[style=invis]" << endl
    << " t1_l -> t1 [headlabel=\"t1\"]" << endl
    << " t2	[fillcolor=yellow]" << endl
    << " t2_l	[style=invis]" << endl
    << " t2_l -> t2 [headlabel=\"t2\"]" << endl << endl
    << " // arcs" << endl
    << " edge [fontname=\"Helvetica\" fontsize=8 arrowhead=normal color=black]" 
    << endl
    << " in -> t1	[label=\"3\"]" << endl
    << " t1 -> p1	[weight=10000.0]" << endl
    << " p1 -> t2	[weight=10000.0]" << endl
    << " t2 -> out	[]" << endl
    << "}" << endl;
  assert(dotResult.str() == dotExpected.str());
  end_test();

  return 0;
}
