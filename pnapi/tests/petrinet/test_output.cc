#include <sstream>
#include <fstream>
#include "test.h"

using pnapi::io::owfn;

int main(int argc, char * argv[])
{
  std::ostringstream result("result.owfn"), expected("expected.owfn");
  PetriNet net;
  Place & p1 = net.createPlace("in", Place::INPUT);
  Place & p2 = net.createPlace("out", Place::OUTPUT);
  Place & p3 = net.createPlace("", Place::INTERNAL, 4, 8);
  Place & p4 = net.createPlace();
  Transition & t1 = net.createTransition();
  Transition & t2 = net.createTransition();
  net.createArc(p1, t1, 3);
  net.createArc(t1, p3);
  net.createArc(p3, t2);
  net.createArc(t2, p2);
  
  begin_test("io::operator<<() [Petri net output]");
  result << owfn << net;
  expected 
    << "{" << endl
    << "  generated by: Petri Net API" << endl
    << "  net size:     |P| = 2, |P_in| = 1, |P_out| = 1, |T| = 2, |F| = 4" 
    << endl
    << "}" << endl << endl
    << "PLACE" << endl
    << "  INTERNAL" << endl
    << "    SAFE 8 : p1, p2;" << endl << endl
    << "  INPUT" << endl
    << "    in;" << endl << endl
    << "  OUTPUT" << endl
    << "    out;" << endl << endl << endl
    << "INITIALMARKING" << endl
    << "  p1: 4;" << endl << endl
    << "FINALCONDITION" << endl
    << "  { NOT IMPLEMENTED YET };" << endl << endl << endl
    << "TRANSITION t1 { input }" << endl
    << "  CONSUME in:3;" << endl
    << "  PRODUCE p1;" << endl << endl
    << "TRANSITION t2 { output }" << endl
    << "  CONSUME p1;" << endl
    << "  PRODUCE out;" << endl << endl << endl
    << "{ END OF FILE }" << endl;
  assert(result.str() == expected.str());
  end_test();

  return 0;
}
