Index: userconfig.H
===================================================================
--- userconfig.H	(revision 3227)
+++ userconfig.H	(working copy)
@@ -25,6 +25,11 @@
 
 #define REPORTFREQUENCY 100000
 
+///// 1 LINE ADDED BY NIELS
+#define MAXIMALSTATES 100000
+
+
+
 // MAXPATH is only used for the FINDPATH algorithm. There, LoLA aborts
 // a search attempt after having reached a depth of MAXPATH and
 // starts another attempt. When MAXPATH is not defined, a standard
Index: graph.cc
===================================================================
--- graph.cc	(revision 3227)
+++ graph.cc	(working copy)
@@ -48,6 +48,15 @@
 
   unsigned int NrOfStates;
   unsigned int Edges;
+
+///// 6 LINES ADDED BY NIELS
+inline void checkMaximum2() {
+#ifdef MAXIMALSTATES
+    if (NrOfStates >= MAXIMALSTATES)
+        _exit(5);
+#endif
+}
+
 void statistics(unsigned int s, unsigned int e, unsigned int h)
 {
 	cout << "\n\n>>>>> " << s << " States, " << e << " Edges, " << h << " Hash table entries\n\n";
@@ -712,6 +721,7 @@
 	}
        CurrentState -> firelist = FIRELIST();
 	NrOfStates++;
+    checkMaximum2(); ///// LINE ADDED BY NIELS
 #else
   if(SEARCHPROC()) cerr << "Sollte eigentlich nicht vorkommen";
 	NrOfStates = 1;
@@ -1102,8 +1112,10 @@
 	      NewState -> firelist = fl;
 #ifdef TARJAN
 	      NewState -> dfs = NewState -> min = NrOfStates++;
+          checkMaximum2(); ///// LINE ADDED BY NIELS
 #else
 	      NrOfStates ++;
+          checkMaximum2(); ///// LINE ADDED BY NIELS
 #endif
 	}
 	else
@@ -1124,6 +1136,7 @@
 	      NewState -> firelist = FIRELIST();
 #ifdef TARJAN
 	      NewState -> dfs = NewState -> min = NrOfStates++;
+          checkMaximum2(); ///// LINE ADDED BY NIELS
 #ifdef FULLTARJAN
 		NewState -> phi = F -> value;
 #ifdef EVENTUALLYPROP
@@ -1140,6 +1153,7 @@
 #endif
 #else
 		NrOfStates ++;
+        checkMaximum2(); ///// LINE ADDED BY NIELS
 #endif
 #endif
 	      NewState -> current = 0;
@@ -2073,6 +2087,7 @@
 #endif
 		    CurrentState -> min = true;
                 NewState -> dfs =  NrOfStates ++;
+                checkMaximum2(); ///// LINE ADDED BY NIELS
 #ifdef DISTRIBUTE
 		    if(NrOfStates >= 500) DistributeNow = 1;
 #endif
@@ -2449,6 +2464,7 @@
 	      NewState -> current = 0;
 	      NewState -> firelist = stubbornfirelistreach();
 NrOfStates ++ ;
+             checkMaximum2(); ///// LINE ADDED BY NIELS
 	      NewState -> parent = CurrentState;
 	      NewState -> succ =  new State * [CardFireList];
 	      CurrentState -> succ[CurrentState -> current] = NewState;
@@ -2564,6 +2580,7 @@
 	      NewState -> dfs = NewState -> min = NrOfStates;
 #endif
 		NrOfStates ++;
+        checkMaximum2(); ///// LINE ADDED BY NIELS
   if(!NewState -> firelist )
 	{
 		// early abortion  
Index: check.cc
===================================================================
--- check.cc	(revision 3227)
+++ check.cc	(working copy)
@@ -18,6 +18,14 @@
 unsigned int * checkstart;
 unsigned int formulaindex;
 
+///// 6 LINES ADDED BY NIELS
+inline void checkMaximum() {
+#ifdef MAXIMALSTATES
+    if (NrStates >= MAXIMALSTATES)
+        _exit(5);
+#endif
+}
+
 void printstate(char * c, unsigned int * st)
 {
 	int i,j;
@@ -985,6 +993,7 @@
 		  NewState -> checknexttar[f->tempindex] = tarjanroot;
 		  tarjanroot = NewState;
 		  NrStates ++;
+          checkMaximum(); ///// LINE ADDED BY NIELS
 		  Edges ++;
 		   if(!(Edges % REPORTFREQUENCY))
 						 cout << "st: " << NrStates << "     edg: " << Edges << "\n";
@@ -1133,6 +1142,7 @@
 	  {
 	    NewState = binInsert();
 	    NrStates ++;
+        checkMaximum(); ///// LINE ADDED BY NIELS
 	  }
 	  Edges ++;
 	  if(!(Edges % REPORTFREQUENCY))
@@ -1193,6 +1203,7 @@
 	  {
 	    NewState = binInsert();
 	    NrStates ++;
+        checkMaximum(); ///// LINE ADDED BY NIELS
 	  }
 	  Edges ++;
 	  if(!(Edges % REPORTFREQUENCY))
@@ -1330,6 +1341,7 @@
 		  NewState -> checknexttar[f->tempindex] = tarjanroot;
 		  tarjanroot = NewState;
 		  NrStates ++;
+          checkMaximum(); ///// LINE ADDED BY NIELS
 		  Edges ++;
 		   if(!(Edges % REPORTFREQUENCY))
 						 cout << "st: " << NrStates << "     edg: " << Edges << "\n";
@@ -1598,6 +1610,7 @@
 				// state is new
 				NewState = binInsert();
 				NrStates ++;
+                checkMaximum(); ///// LINE ADDED BY NIELS
 				NewState -> checkcurrent[f->tempindex] = 0;
 				NewState -> checkdfs[f->tempindex] 
 				= NewState -> checkmin[f->tempindex] = currentdfsnum;
@@ -1972,6 +1985,7 @@
 					// state is new
 					NewState = binInsert();
 					NrStates ++;
+                    checkMaximum(); ///// LINE ADDED BY NIELS
 					NewState -> checkcurrent[f->tempindex] = 0;
 					NewState -> checkdfs[f->tempindex] 
 					= NewState -> checkmin[f->tempindex] = currentdfsnum;
@@ -2327,6 +2341,7 @@
 				// state is new
 				NewState = binInsert();
 				NrStates ++;
+                checkMaximum(); ///// LINE ADDED BY NIELS
 				NewState -> checkcurrent[f->tempindex] = 0;
 				check(NewState,f->goal);
 				if(NewState->value[f->goal->index])
@@ -2505,6 +2520,7 @@
 				// state is new
 				NewState = binInsert();
 				NrStates ++;
+                checkMaximum(); ///// LINE ADDED BY NIELS
 				NewState -> checkcurrent[f->tempindex] = 0;
 				check(NewState,f->element);
 				if(NewState->value[f->element->index])
@@ -2664,6 +2680,7 @@
 				// state is new
 				NewState = binInsert();
 				NrStates ++;
+                checkMaximum(); ///// LINE ADDED BY NIELS
 				NewState -> checkcurrent[f->tempindex] = 0;
 				check(NewState,f ->element);
 				if(!NewState->value[f ->element->index])
@@ -2852,6 +2869,7 @@
 					// state is new
 					NewState = binInsert();
 					NrStates ++;
+                    checkMaximum(); ///// LINE ADDED BY NIELS
 					NewState -> checkcurrent[f->tempindex] = 0;
 					check(NewState,f->element);
 					if(NewState->value[f->element->index])
@@ -3058,6 +3076,7 @@
 					// state is new
 					NewState = binInsert();
 					NrStates ++;
+                    checkMaximum(); ///// LINE ADDED BY NIELS
 					NewState -> checkcurrent[f->tempindex] = 0;
 					check(NewState,f ->element);
 					if(!NewState->value[f ->element->index])
