# This is the only input file for gengetopt.

# arguments for gengetopt ... what do they do?
# --long-help: long usage line in help
# --include-getopt: adds code for getopt_long in generated C file
# --show-required: output of help will specify which options are mandatory
# --unamed-opts=FILE: accept options without names
# --no-handle-error: TODO
# --conf-parser: TODO
args "--include-getopt --show-required --unamed-opts=FILE --no-handle-error --conf-parser"

description "About Petia:"
purpose "Petia computes the equivalence classes of places (or transitions) of a net.\nTwo places are equivalent if in every semipositive invariant both or none occur.\nReport bugs to petia@service-technology.org.\n  Visit Petia's home page at http://service-technology.org/petia"

# <<-- CHANGE START (parameters) -->>
section "Input/Output"
sectiondesc="Petia reads from standard input and writes to standard output unless an input file is given. Output is always written to the shell."

defgroup "Input Format" groupdesc="Choose an option according to the format of the input Petri net:"
groupoption "lola" -
  "Assume the input net to be in LoLA format."
  group="Input Format"

groupoption "owfn" -
  "Assume the input net to be in open net format oWFN."
  group="Input Format"

groupoption "pnml" -
  "Assume the input net to be in PNML format (default)."
  group="Input Format"

defgroup "Output Format" groupdesc="Choose an option to modify the output:"
groupoption "snoopy" y
  "Print the equivalence classes in Snoopy format."
  group="Output Format"

section "Problem Statement"
sectiondesc="Define the kind of equivalence to be computed.\n"

defgroup "Node Type" groupdesc="Select whether the equivalence should be over places or transitions."
groupoption "transition" t
  "An equivalence for transitions is computed."
  group="Node Type"

groupoption "place" p
  "An equivalence for places is computed (default)."
  group="Node Type"

section "Configuration"
sectiondesc="Configurations are not required at the moment.\n"

option "config" -
  "Read configuration from file."
  details="If no file is given, Petia first tries to parse file `petia.conf' from the sysconf directory (usually `/usr/local/etc'; written in case Petia was installed) and then from the current working directory. If neither file was found, the standard values are assumed.\n"
  string
  typestr="FILE"
  optional

option "tmpfile" -
  "Set the path and name of temporary files."
  details="The filename Petia should use to create temporary files. The filename should end with `XXXXXX' which is replaced at runtime with a random string.\n"
  string
  typestr="FILENAME"
  default="/tmp/petia-XXXXXX"
  optional
  hidden

option "noClean" -
  "Do not delete temporary files."
  details="Any temporary files created will be kept after Petia terminates.\n"
  flag off

option "optimize" o
  "Reduce calls to lp_solve."
  details="Guesses are made at which equivalences to test first. This induces some overhead but may reduce the number of calls to lp_solve\n"
  flag on

section "Debugging"
sectiondesc="These options control how much debug output Petia creates.\n"

option "verbose" v
  "Show verbose messages."
  details="Show verbose information reporting intermediate steps.\n"
  flag off

option "bug" -
  "Write configuration information into a file `bug.log'."
  details="This output file gives information on the machine Ondine was configured and compiled which should help to fix bugs. The file `bug.log' should be attached to bug reports.\n"
  flag off
  hidden

option "stats" -
  "Display time and memory consumption on termination."
  details="The time is measured using the function clock(3). The memory usage is measured using the ps(1) command. Note that memory consumption contains a small overhead.\n"
  flag off
  hidden

option "fine" f
  "Select direction from which equivalence is approximated."
  details="On errors, output can be a too coarse relation, i.e. equivalences remain undetected. Use this option to get a too fine relation instead.\n"
  flag off
  hidden

# <<-- CHANGE END -->>
