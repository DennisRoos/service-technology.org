# the main program
bin_PROGRAMS = anica reasoner GUI GUIsendfile

# the plain sources you need to compile (no generated code)
# <<-- CHANGE START (the program's sources) -->>
anica_SOURCES = main.cc \
                verbose.cc verbose.h \
                exceptions.cc exceptions.h \
                cmdline.c cmdline.h \
                Output.cc Output.h \
				Results.cc Results.h \
                AnicaLib.cc AnicaLib.h \
				anica-util.h

reasoner_SOURCES = reasoner.cc Socket.cc Socket.h Reporter.cc Reporter.h AnicaLib.cc AnicaLib.h SimpleString.h SimpleString.cc exceptions.cc exceptions.h

GUI_SOURCES = GUI.cc \
                 Reporter.cc Reporter.h \
                 SimpleString.cc SimpleString.h \
                 Socket.cc Socket.h

GUIsendfile_SOURCES = GUIsendfile.cc \
              Reporter.cc Reporter.h \
              SimpleString.cc SimpleString.h \
              Socket.cc Socket.h

# <<-- CHANGE END -->>

# the configuration files
sysconf_DATA = anica.conf

# pass the sysconfdir to Anica (ugly, but see http://www.gnu.org/software/autoconf/manual/autoconf.html#Defining-Directories)
anica_CPPFLAGS = -DSYSCONFDIR=\"$(sysconfdir)\"

reasoner_CPPFLAGS = -DSYSCONFDIR=\"$(sysconfdir)\"

anica_LDADD = $(builddir)/../libs/cudd/libobj.a \
	$(builddir)/../libs/cudd/libdddmp.a \
	$(builddir)/../libs/cudd/libcudd.a \
	$(builddir)/../libs/cudd/libmtr.a \
	$(builddir)/../libs/cudd/libst.a \
	$(builddir)/../libs/cudd/libutil.a \
	$(builddir)/../libs/cudd/libepd.a

anica_CPPFLAGS += -I$(top_srcdir)/libs/cudd/include

reasoner_LDADD = $(builddir)/../libs/cudd/libobj.a \
	$(builddir)/../libs/cudd/libdddmp.a \
	$(builddir)/../libs/cudd/libcudd.a \
	$(builddir)/../libs/cudd/libmtr.a \
	$(builddir)/../libs/cudd/libst.a \
	$(builddir)/../libs/cudd/libutil.a \
	$(builddir)/../libs/cudd/libepd.a \
	$(builddir)/../libs/vjson/libvjson.a \
	$(builddir)/../libs/base64/libbase64.a

reasoner_CPPFLAGS += -I$(top_srcdir)/libs/cudd/include -I$(top_srcdir)/libs/vjson -I$(top_srcdir)/libs/base64/include -DBUFFERSIZE=16777216

# only add the local Petri net API if necessary
if COMPILE_PNAPI
anica_CPPFLAGS += -I$(top_srcdir)/libs
reasoner_CPPFLAGS += -I$(top_srcdir)/libs
anica_LDADD = $(top_builddir)/libs/pnapi/libpnapi.a
reasoner_LDADD = $(top_builddir)/libs/pnapi/libpnapi.a
endif

#############################################################################
# EVERYTHING BELOW THIS LINE IS GENERIC - YOU MUST NOT CHANGE ANYTHING BELOW
#############################################################################

#---------------------------------------------------#
# GENERIC: initialization for other generic targets #
#---------------------------------------------------#
BUILT_SOURCES =
EXTRA_DIST =
MAINTAINERCLEANFILES =
DISTCLEANFILES = 

#--------------------------------------------------------------#
# GENERIC: organize distribution and cleaning of Bison sources #
#--------------------------------------------------------------#
BISON_FILES = $(filter %.yy,$(anica_SOURCES))
BUILT_SOURCES += $(BISON_FILES:.yy=.cc)
EXTRA_DIST += $(BISON_FILES:.yy=.h)
MAINTAINERCLEANFILES += $(BISON_FILES:.yy=.h)

#----------------------------------------------------------------#
# GENERIC: copy the content of the config.log file to a C header #
#----------------------------------------------------------------#
config-log.h: $(top_builddir)/config.log
	echo "/// the content of the file 'config.log' generated by the configure script" > $@
	echo "#define CONFIG_LOG \\" >> $@
	$(SED) -e 's/\\/\\\\/g' $< | $(SED) -e 's/"/\\"/g' | $(AWK) '{print "\""$$0"\\n\"\\"}' >> $@
	echo '""' >> $@
	echo "" >> $@
BUILT_SOURCES += config-log.h
DISTCLEANFILES += config-log.h

#----------------------------------------------------------#
# GENERIC: use GNU gengetopt to create command line parser #
#----------------------------------------------------------#
.ggo.c:
	$(GENGETOPT) --input=$<
GENGETOPT_FILES = cmdline.ggo
BUILT_SOURCES += $(GENGETOPT_FILES:.ggo=.c)
EXTRA_DIST += $(GENGETOPT_FILES)
MAINTAINERCLEANFILES += $(GENGETOPT_FILES:.ggo=.c) $(GENGETOPT_FILES:.ggo=.h)
