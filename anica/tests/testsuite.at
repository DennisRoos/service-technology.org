AT_INIT
AT_COLOR_TESTS

m4_define(AT_CHECK_LOLA, [AT_CHECK([if test "LOLA" == ""; then exit 77; fi])])

############################################################################
AT_BANNER([Basic Options])
############################################################################

AT_SETUP([Help output])
AT_CHECK([ANICA --help],0,ignore)
AT_CHECK([ANICA --detailed-help],0,ignore)
AT_CHECK([ANICA --full-help],0,ignore)
AT_KEYWORDS(basic)
AT_CLEANUP

AT_SETUP([Version output])
AT_CHECK([ANICA --version],0,ignore)
AT_KEYWORDS(basic)
AT_CLEANUP


############################################################################
AT_BANNER([Parameters])
############################################################################

AT_SETUP([Piping from stdin])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([cat potentialCausal.ifn | ANICA],0,ignore, ignore)
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Reading from file])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn],0,ignore, ignore)
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Using a given configuration file])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_DATA([my_anica.conf], [verbose
])
AT_CHECK([ANICA --config=my_anica.conf potentialCausal.ifn],0,ignore,stderr)
AT_CHECK([GREP -q "using configuration file 'my_anica.conf'" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Using a present configuration file])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_DATA([anica.conf], [verbose
])
AT_CHECK([ANICA potentialCausal.ifn],0,ignore,stderr)
AT_CHECK([GREP -q "using configuration file 'anica.conf'" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Cleaning vs. no cleaning of temporary files])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn ],0,ignore,ignore)
AT_CHECK([test -f activeCausal.ifn.causal.s.h1.l1.lola],1)
AT_CHECK([ANICA --noClean activeCausal.ifn ],0,ignore,ignore)
AT_CHECK([test -f activeCausal.ifn.causal.s.h1.l1.lola],0)
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Witness path (LoLA)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --witnessPath],0,ignore,ignore)
AT_CHECK([test -f activeCausal.ifn.causal.s.h1.l1.path],0)
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Witness path (Makefile)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --witnessPath --modus=makefile],0,ignore,ignore)
AT_CHECK([test -f activeCausal.ifn.makefile])
AT_CHECK([GREP -q " -p 2> " activeCausal.ifn.makefile])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Results output])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --resultFile],0,ignore,ignore)
AT_CHECK([GREP -q "non-interference = \"FAILED\"" activeCausal.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Check potential causal only])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn --potentialPlaces=causal --activePlaces=none --resultFile],0,ignore, ignore)
AT_CHECK([GREP -q "active_causal = 0" both.ifn.results])
AT_CHECK([GREP -q "active_conflict = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_causal = 1" both.ifn.results])
AT_CHECK([GREP -q "potential_conflict = 0" both.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Check potential conflict only])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn --potentialPlaces=conflict --activePlaces=none --resultFile],0,ignore, ignore)
AT_CHECK([GREP -q "active_causal = 0" both.ifn.results])
AT_CHECK([GREP -q "active_conflict = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_causal = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_conflict = 1" both.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Check active causal only])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn --potentialPlaces=causal --activePlaces=causal --resultFile],0,ignore, ignore)
AT_CHECK([GREP -q "active_causal = 1" both.ifn.results])
AT_CHECK([GREP -q "active_conflict = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_causal = 1" both.ifn.results])
AT_CHECK([GREP -q "potential_conflict = 0" both.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Check active conflict only])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn --potentialPlaces=conflict --activePlaces=conflict --resultFile],0,ignore, ignore)
AT_CHECK([GREP -q "active_causal = 0" both.ifn.results])
AT_CHECK([GREP -q "active_conflict = 1" both.ifn.results])
AT_CHECK([GREP -q "potential_causal = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_conflict = 1" both.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([One active only])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn --oneActiveOnly --resultFile],0,ignore, ignore)
AT_CHECK([GREP -q "active_causal = 1" both.ifn.results])
AT_CHECK([GREP -q "active_conflict = 0" both.ifn.results])
AT_CHECK([GREP -q "potential_causal = 1" both.ifn.results])
AT_CHECK([GREP -q "potential_conflict = 1" both.ifn.results])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Label transitions HIGH])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/missing-confidence.ifn .])
AT_CHECK([ANICA missing-confidence.ifn -v --unlabeledTransitions=high],0,ignore,stderr)
AT_CHECK([GREP -q "trivial confidence level used" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Label transitions LOW])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/missing-confidence.ifn .])
AT_CHECK([ANICA missing-confidence.ifn -v --unlabeledTransitions=low],0,ignore,stderr)
AT_CHECK([GREP -q "trivial confidence level used" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Label transitions DOWN])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/missing-confidence.ifn .])
AT_CHECK([ANICA missing-confidence.ifn -v --unlabeledTransitions=down],0,ignore,stderr)
AT_CHECK([GREP -q "trivial confidence level used" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Bug information output])
AT_CHECK_LOLA
AT_CHECK([ANICA --bug],0,ignore,stderr)
AT_CHECK([GREP -q "please send file 'bug.log' to anica@service-technology.org!" stderr])
AT_CHECK([test -f bug.log])
AT_KEYWORDS(infrastructure)
AT_CLEANUP

AT_SETUP([Determining runtime and allocated memory])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn --verbose --stats],0,ignore,stderr)
AT_CHECK([GREP -q "runtime" stderr])
AT_CHECK([GREP -q "memory consumption" stderr])
AT_KEYWORDS(infrastructure)
AT_CLEANUP


############################################################################
AT_BANNER([Errors])
############################################################################
AT_SETUP([Invalid parameter(s)])
AT_CHECK_LOLA
AT_CHECK([ANICA --foo],1,ignore,stderr)
AT_CHECK([GREP -q "unrecognized option" stderr])
AT_CHECK([GREP -q "invalid command-line parameter(s)" stderr])
AT_CHECK([GREP -q "aborting \[[#07\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Multiple inputs])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([cp TESTFILES/potentialConflict.ifn .])
AT_CHECK([ANICA potentialCausal.ifn potentialConflict.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "at most one input file must be given" stderr])
AT_CHECK([GREP -q "aborting \[[#04\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Unknown file])
AT_CHECK_LOLA
AT_CHECK([ANICA potentialConflict.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "could not open file" stderr])
AT_CHECK([GREP -q "aborting \[[#01\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Cannot write to file])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([touch potentialCausal.ifn.potential.dot])
AT_CHECK([chmod a-w potentialCausal.ifn.potential.dot])
AT_CHECK([ANICA potentialCausal.ifn --dotPotential=causal],1,ignore,stderr)
AT_CHECK([GREP -q "aborting \[[#03\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Invalid given configuration file])
AT_CHECK([cp TESTFILES/potentialConflict.ifn .])
AT_DATA([my_anica.conf], [invalid="PARAMETER"
])
AT_CHECK([ANICA --config=my_anica.conf potentialConflict.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "aborting \[[#10\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Invalid present configuration file])
AT_CHECK([cp TESTFILES/potentialConflict.ifn .])
AT_DATA([anica.conf], [invalid="PARAMETER"
])
AT_CHECK([ANICA potentialConflict.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "aborting \[[#10\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Missing confidence])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/missing-confidence.ifn .])
AT_CHECK([ANICA missing-confidence.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "has unknown confidence level" stderr])
AT_CHECK([GREP -q "aborting \[[#06\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Syntax error])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/wrong-format.ifn .])
AT_CHECK([ANICA wrong-format.ifn],1,ignore,stderr)
AT_CHECK([GREP -q "error near 'CONSUMING'" stderr])
AT_CHECK([GREP -q "aborting \[[#02\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([LoLA parse error])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn --lola=],1,ignore,stderr)
AT_CHECK([GREP -q "LoLA parse error -- aborting \[[#09\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Active causal requires potential causal])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn --potentialPlaces=conflict --activePlaces=causal],1,ignore,stderr)
AT_CHECK([GREP -q "activeCausal requires potentialCausal" stderr])
AT_CHECK([GREP -q "aborting \[[#07\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

AT_SETUP([Active conflict requires potential conflict])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn --potentialPlaces=causal --activePlaces=conflict],1,ignore,stderr)
AT_CHECK([GREP -q "activeConflict requires potentialConflict" stderr])
AT_CHECK([GREP -q "aborting \[[#07\]]" stderr])
AT_KEYWORDS(error)
AT_CLEANUP

############################################################################
AT_BANNER([Dot Output])
############################################################################
AT_SETUP([Potential Places (both)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotPotential=both],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.potential.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Potential Places (causal)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn --dotPotential=causal],0,ignore,stderr)
AT_CHECK([test -f potentialCausal.ifn.potential.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Potential Places (conflict)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialConflict.ifn .])
AT_CHECK([ANICA potentialConflict.ifn --dotPotential=conflict],0,ignore,stderr)
AT_CHECK([test -f potentialConflict.ifn.potential.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Active Places (both)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotActive=both],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.active.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Active Places (causal)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotActive=causal],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.active.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Active Places (conflict)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeConflict.ifn .])
AT_CHECK([ANICA activeConflict.ifn --dotActive=conflict],0,ignore,stderr)
AT_CHECK([test -f activeConflict.ifn.active.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Confidence (all)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotConfidence=all],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.confidence.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Confidence (high)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotConfidence=high],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.confidence.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Confidence (low)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotConfidence=low],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.confidence.dot])
AT_KEYWORDS(output)
AT_CLEANUP

AT_SETUP([Confidence (down)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn --dotConfidence=down],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.confidence.dot])
AT_KEYWORDS(output)
AT_CLEANUP

############################################################################
AT_BANNER([Valgrind])
############################################################################

AT_SETUP([Checking for memory leaks])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([VALGRIND --leak-check=full --show-reachable=yes ANICA_RAW both.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both],0,ignore,stderr)
AT_CHECK([GREP -q "All heap blocks were freed -- no leaks are possible" stderr])
AT_KEYWORDS(valgrind)
AT_CLEANUP


############################################################################
AT_BANNER([Coverage])
############################################################################
AT_SETUP([Potential causal (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialCausal.ifn .])
AT_CHECK([ANICA potentialCausal.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola --activePlaces=none],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: POTENTIAL" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Potential conflict (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/potentialConflict.ifn .])
AT_CHECK([ANICA potentialConflict.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola --activePlaces=none],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: POTENTIAL" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Active causal (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Illegal causal sequence (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/causal-illegal-sequence.ifn .])
AT_CHECK([ANICA causal-illegal-sequence.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_CHECK([ANICA causal-illegal-sequence.ifn -v --oneTriple --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "........not active" stderr])
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Active conflict (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeConflict.ifn .])
AT_CHECK([ANICA activeConflict.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Both (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Mutual (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/mutual.ifn .])
AT_CHECK([ANICA mutual.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Mutual downgrade (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/mutual-downgrade.ifn .])
AT_CHECK([ANICA mutual-downgrade.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: PASSED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Actice causal downgrade (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/activeCausalDowngrade.ifn .])
AT_CHECK([ANICA activeCausalDowngrade.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: FAILED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([None (Lola)])
AT_CHECK_LOLA
AT_CHECK([cp TESTFILES/none.ifn .])
AT_CHECK([ANICA none.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=lola],0,ignore,stderr)
AT_CHECK([GREP -q "Non-Interference: PASSED" stderr])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Active causal (Makefile)])
AT_CHECK([cp TESTFILES/activeCausal.ifn .])
AT_CHECK([ANICA activeCausal.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=makefile],0,ignore,stderr)
AT_CHECK([test -f activeCausal.ifn.makefile])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Active conflict (Makefile)])
AT_CHECK([cp TESTFILES/activeConflict.ifn .])
AT_CHECK([ANICA activeConflict.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=makefile],0,ignore,stderr)
AT_CHECK([test -f activeConflict.ifn.makefile])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([Both (Makefile)])
AT_CHECK([cp TESTFILES/both.ifn .])
AT_CHECK([ANICA both.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=makefile],0,ignore,stderr)
AT_CHECK([test -f both.ifn.makefile])
AT_KEYWORDS(tests)
AT_CLEANUP

AT_SETUP([None (Makefile)])
AT_CHECK([cp TESTFILES/none.ifn .])
AT_CHECK([ANICA none.ifn -v --stats --dotConfidence=all --dotPotential=both --dotActive=both --modus=makefile],0,ignore,stderr)
AT_CHECK([test -f none.ifn.makefile])
AT_KEYWORDS(tests)
AT_CLEANUP
