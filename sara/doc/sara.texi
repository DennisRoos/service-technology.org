\input texinfo
@setfilename sara.info
@include version.texi
@afourpaper
@finalout
@settitle Sara User's Manual


@c --------------------------------------------------------------------------


@copying
@b{About this document:}

This manual is for Sara, version @value{VERSION}, <<-- a reachability solver -->>, last updated @value{UPDATED}.

Copyright @copyright{} <<-- 20XX AUTHOR -->>

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this GNU Manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* Sara: (sara).       <<-- Structures for Automated Reachability Analysis -->>.
@end direntry


@c --------------------------------------------------------------------------


@titlepage

@title Sara

@subtitle Structures for Automated Reachability Analysis
@subtitle @url{http://service-technology.org/sara}
@vskip 0.5em
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Harro Wimmel
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@c --------------------------------------------------------------------------


@ifnottex
@node Top
@top Sara
@insertcopying
@end ifnottex


@c --------------------------------------------------------------------------


@menu
* First Steps::How to set up and install Sara.
* Command Line Options::How to run Sara.
* Theory::The theory behind Sara.
* Exit and Error Codes::What the error and exit codes of Sara mean.
* ChangeLog::Version history.
* GNU Free Documentation License::The license of this manual.
@end menu

@c --------------------------------------------------------------------------


@contents
@paragraphindent none


@c --------------------------------------------------------------------------


@node First Steps
@chapter First Steps
@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/sara} and download the latest release version of Sara, say @file{sara-@value{VERSION}.tar.gz}. To setup and compile Sara, change into your download directory and type

@cartouche
@smallexample
tar xfz sara-@value{VERSION}.tar.gz
cd sara-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a binary @samp{src/sara} is generated.@footnote{On Microsoft Windows, the file will be called @file{sara.exe}.} If you experience any compiler warnings, don't panic: Sara contains some generated or third party code that we cannot influence.

@item To test whether everything went fine, type

@cartouche
@smallexample
make check
@end smallexample
@end cartouche

to execute the testcases located in @file{tests}. If everything went fine, you should see something like:

@smallexample
## ------------- ##
## Test results. ##
## ------------- ##

All <<-- TESTNUM -->> tests were successful.
@end smallexample

If an error occurs, please send the output to @email{sara@@service-technology.org}.

@item To install the binary, the manpage, and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Contents of the Distribution

The distribution contains several directories:

@table @file
@item doc
The Texinfo documentation of Sara. The documentation can be created using @samp{make pdf}. Note you need to have Sara properly installed before (see installation description above).

@item libs
The Petri Net @acronym{API} used by Sara to parse and organize a Petri net.
Also, the Integer Programming tool lp_solve used by Sara to solve the marking equation of a Petri net.

@c @item man
@c The manpage of Sara which can be displayed using @samp{man sara} after having Sara installed (see installation description above).

@item src
The source code of Sara.

@item tests
Testcases for Sara which check the generated binary.
@end table


@c --------------------------------------------------------------------------


@section Requirements
@anchor{Requirements}

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
In order to run, compile, and develop Sara, several tools are required.

@c <<-- CHANGE START (tools required, etc.) -->>

@subsection Runtime
@itemize
@item No additional tools are necessary at runtime.
@end itemize

@c <<-- CHANGE END -->>

@subsection Compilation
To compile the source code from a source distribution, the following tools are required.

@itemize
@item GCC (@url{http://gcc.gnu.org/})
@item @acronym{GNU} Make (@url{http://www.gnu.org/software/make/})
@end itemize


@subsection Development
In case you want to make changes to the source code, the following tools are required to reconfigure and compile Hello.

@itemize
@item Autoconf, @url{http://www.gnu.org/software/autoconf/}
@item Automake, @url{http://www.gnu.org/software/automake/}
@item Bison, @url{http://www.gnu.org/software/bison/}
@item flex, @url{http://flex.sourceforge.net/}
@item Gengetopt, @url{http://www.gnu.org/software/gengetopt/}
@item help2man, @url{http://www.gnu.org/software/help2man/}
@item Texinfo, @url{http://www.gnu.org/software/texinfo/}
@end itemize

@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Please check our nightly build server at @url{http://service-technology.org/nightly} for the versions we use during development.


@c --------------------------------------------------------------------------


@node Command Line Options
@chapter Invoking Sara

Sara is a command line tool and does not come with a fancy @acronym{GUI}. However, Sara can be easily scripted and combined with other tools.

@section What Sara can do

Sara is a tool for solving the reachability problem for Petri nets. Given a low-level Petri net, i.e. sets of places and
transitions with weighted arcs between them, and an initial and a final marking, Sara tries to determine whether the final
marking can be reached from the initial marking by firing a sequence of transitions in the Petri net. While the initial
marking must be a map from the places to non-negative integers, that means one single marking, the final marking can be
somewhat generalized. It is possible -- for each place on its own -- to declare that the given number must be reached
exactly (as for the initial marking), covered (a higher value is allowed), or bounded (a lower value is permissible).
In addition, more general constraints may be formulated which the final marking must fulfill. Such a constraint can be
any linear (in)equation built from places and transitions.

As a by-product, also problems of form ``given a Petri net, an initial marking, and a transition multiset, is the
multiset realizable?'' can be solved. Realizable means that there is a firing sequence in the Petri net that
contains each transition exactly as often as the transition multiset dictates.

If Sara can compute the problem given, it should either tell the user that there is a solution and present a firing
sequence proving this, or it should tell that the problem is infeasible. In the latter case, Sara might provide
additional information that gives some insight into why the problem is infeasible. 

@section Command Line Options

For an overview of the command line options, type @samp{sara --detailed-help} to see the following help screen:

@smallexample
@verbatiminclude cmdline.out
@end smallexample

@section Creating a Problem

Before solving problems is possible one must first be able to formulate these problems. Sara offers several
options here. Assume there is a Petri net @file{test2.owfn} in one of the formats supported by the parsers, here the
open net format *.owfn (all example nets can be found in the @file{tests/testfiles} folder). The Petri net
file is expected to contain the net itself and the initial marking. If the initial marking is missing, it is assumed to
be zero on all places. In our example, the initial marking is @samp{i1+i2}, i.e. one token on place @samp{i1}, one token on @samp{i2},
and no other tokens. For the final marking @samp{o1+o2} is chosen. A problem statement can now be generated.

@cartouche
@smallexample
sara -r test2.owfn -O -f"o1,o2"
@end smallexample
@end cartouche

The command line option @option{-r} declares @file{test2.owfn} as input for a reachability problem, using the file's net structure
and initial marking. The option @option{-O} declares the net to be in the open net format (compared to the LOLA *.llnet-format
without the option). The final marking is taken from the @option{-f} option that should be followed by a comma-separated list
with one entry for each place having more than zero tokens. If there is no number of tokens given, like here, it is
assumed a place should have exactly one token.

The result is a new file @file{test2.owfn.sara} (with just .sara appended to the original filename).
It has the following content, defining the problem statement.

@cartouche
@smallexample
@verbatiminclude test2.sara
@end smallexample
@end cartouche

The problem statement can of course be edited and e.g. the initial or final marking can be changed.
In the file @file{test11.sara} there are three problem statements specifying very different final markings.

@cartouche
@smallexample
@verbatiminclude test11.sara
@end smallexample
@end cartouche

In each problem the initial marking contains exactly five tokens on each of the three places of the Petri
net given in @file{test11.owfn}. The first problem specifies the final marking to have exactly four tokens 
on each of the places, in the second problem any marking with at most four tokens on each place is considered
to be fulfilling the goal, and in the last problem any of the infinitely many markings with at least four
tokens on each of the places is a valid final marking.

To obtain a problem statement like the third one, one could invoke Sara like this:

@cartouche
@smallexample
sara -r test11.owfn -O -f"p1>4,p2>4,p3>4"
@end smallexample
@end cartouche

Note the citation marks that are necessary to ensure the shell will not misinterpret the is-greater-than sign
(actually meaning ``is greater or equal'' here) with its built-in output redirection functionality.

If the user does not specify the number of tokens on some place in the initial or final marking, it is assumed
to be zero. Usually, when a Petri net is large, there are many places with zero tokens in the initial or final
marking. For the final marking, we have the option whether this number zero should be reached exactly (which is
the same as an upper bound of zero) or if the number zero should be covered, meaning that any (non-negative)
number of tokens is allowed. There is a global option selecting all unmentioned places in the final
marking to be either exactly zero or to allow any number of tokens.

@cartouche
@smallexample
sara -r test11.owfn -O -f"p1>4"
sara -r test11.owfn -O -f"REACH p1>4"
sara -r test11.owfn -O -f"p1>4,p2>0,p3>0"
sara -r test11.owfn -O -f"COVER p1>4"
@end smallexample
@end cartouche

The first two calls are synonymous and specify that the number of tokens on the places @samp{p2} and @samp{p3} should
be exactly zero in the final marking. The third and fourth line both do not specify the number of tokens on @samp{p2}
and @samp{p3}, i.e. they may be arbitrarily high.

Either in addition to or as a replacement of the final marking global constraints can be formulated. Two example
problems are given in @file{test15.sara}.

@cartouche
@smallexample
@verbatiminclude test15.sara
@end smallexample
@end cartouche

Here, @samp{c1} and @samp{c2} are places of the Petri net forming a global constraint @samp{c1+c2>=2}. The places represent
the critical sections of two processes connected via a semaphore. Sara will test if it is possible to
reach either both critical sections simultaneously or -- in case autoconcurrency should be possible --
if a process can reach its critical section more than once at the same time. The first problem statement
is generated by the following call:

@cartouche
@smallexample
sara -r test15.owfn -O -f"COVER" -c"c1+c2>2"
@end smallexample
@end cartouche

The option @option{-f"COVER"} disregards unmentioned places (i.e. every place) in the final marking while the @option{-c} option
generates the linear constraint. The option @option{-c} can be given more than once and the constraints may be more
complex, allowing e.g. @option{-c"3p1+5t1-7t3+p2<9"} where each of the places @samp{p1, p2} represent the number of token
that place should have in the final marking and each of the transitions @samp{t1, t3} represent the number of
occurrences of this transition in the firing sequence generated by Sara for the solution. Coefficients
are just weights, the above line translates to: ``Three times the number of tokens on @samp{p1} plus five times
the number of appearances of @samp{t1} in the firing sequence minus seven times of that of @samp{t3} plus the token number
on @samp{p2} must be less than or equal to nine''.

Besides the reachability check there are some more options that will generate other problem instances.
A check if a Petri net contains any dead transitions can be generated for example by

@cartouche
@smallexample
sara -q garavel.llnet
@end smallexample
@end cartouche

Here, we use a Petri net in the LOLA-format that has been posted by H.Garavel in 2003 as a challenge. It contains
776 transitions for which needs to be checked if they can fire at all or if they are dead. Sara generates a problem
file @file{garavel.llnet.sara} with 776 problem instances, one for each transition.

Also, a check whether a transition multiset is realizable can be generated. The file @file{test14.sara} contains four
such problems that can be created by invoking Sara like this (each call creating only one of the problems):

@cartouche
@smallexample
sara -R test14.owfn -O -f"a1:2,a2:2,a3:2,c1,c2,c3,d1,d2,d3,d4:2,e1,e2,e3,e4:2,x1"
sara -R test14.owfn -O -f"a1:2,a2:2,a3:2,c1,c2,c3,d1,d2,d3,d4:2,e1,e2,e3,e4:2,x1:2"
sara -R test14.owfn -O -f"a1,a3,c1,c2,c3,d2,d4,e2,e4,x1"
sara -R test14.owfn -O -f"d1,e1,a2,d3,e3,x1"
@end smallexample
@end cartouche

Again, writing @samp{:1} or omitting it does not make a difference. No greater-than or less-than signs are allowed, though. 
The option @option{-f}
does not represent a final marking here but a transition multiset; @samp{a1,a2,a3,...} are all transitions of the Petri net.
If Sara is fed with these problems, the tool will search for a firing sequence in which every transition appears
exactly as often as mentioned in the multiset.
 
@section Solving a Problem

After creating a problem, Sara can try to solve it. There are three possible sources for problem instances that
Sara can solve. A problem can be solved directly after its creation. An example for this could be:

@cartouche
@smallexample
sara -q garavel.llnet -p
@end smallexample
@end cartouche

Here, Sara creates the 776 problem instances checking Garavel's net for dead transitions and internally
pipes them to its solving unit. The problem file @file{garavel.llnet.sara} is still written.

Problems can also come in from the outside, either by a pipe through stdin or in form of a file.
To read from stdin, the pipe option @option{-p} needs to be specified. This will only work if no
problems are created by Sara at the same time.

@cartouche
@smallexample
sara -p
@end smallexample
@end cartouche

To read from a file, there is an option @option{-i} available.

@cartouche
@smallexample
sara -i garavel.llnet.sara
@end smallexample
@end cartouche

@section Getting Output and Interpreting the Result

Sara usually prints all information to stdout and stderr. The stream can be redirected to files using
the options @option{-o} and @option{-l}.

@cartouche
@smallexample
sara -i test5.sara -o test5.out -l test5.err
@end smallexample
@end cartouche

The output on stdout will contain the result of the computation.
Normally, that is just the name of the problem (as defined in the problem instance) and either a solution
or the fact that there is no solution.

@cartouche
@smallexample
@verbatiminclude test5a.txt
@end smallexample
@end cartouche

The second line contains the keyword showing the result of the computation, in the positive case @samp{SOLUTION},
followed by the length of the firing sequence Sara has found and the firing sequence itself, consisting of the
names of the transitions to fire in the correct order, separated by blanks. Sara can be persuaded to continue
searching for solutions after the first one has been found by using the option @option{-C}.

@cartouche
@smallexample
sara -i test5.sara -C
@end smallexample
@end cartouche

As a result, Sara will try to find all minimal solutions. A solution is minimal if there is no other firing sequence
containing less instances of each transition. In our example, the result will look like this:

@cartouche
@smallexample
@verbatiminclude test5b.txt
@end smallexample
@end cartouche

Sara will print the solutions after the computation has terminated. This may take a long time. To obtain all
solutions just when they are found (this may include some non-minimal solutions), Sara can be forced to print
every solution immediately using the option @option{-P}.

@cartouche
@smallexample
sara -i test5.sara -C -P
@end smallexample
@end cartouche


@c --------------------------------------------------------------------------


@node Theory
@chapter Theory

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Sara implements several algorithms and result published in several scientific articles.

@c <<-- CHANGE START (theory) -->>

@section <<-- THEORY -->>

@subsubheading <<-- THEORY -->>

@quotation
<<-- THEORY -->>
@end quotation

@c <<-- CHANGE END -->>

@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
See @url{http://service-technology.org/publications} for more information.


@c --------------------------------------------------------------------------


@node Exit and Error Codes
@chapter Exit and Error Codes
@section Exit Codes

Sara will exit with code @samp{0} in case everything went fine. 
That is, the command-line parameters were valid, the input file(s) could be read,
and Sara terminated with some result, but did not abort the computation.
It does not matter if the result was positive (a solution was found) or
negative (the marking equation is infeasible or no transition vector could be
realized).

In case any error occurs, the exit code will be @samp{1} and an error message with an error code (see below) will be printed to the standard error stream.

@section Error Codes

In case any error occurs, Sara aborts with exit code @samp{1} and prints a message with an error code to the standard error stream.

@table @asis

@c <<-- CHANGE START (exit/error codes) -->>

@item #01
The file or pipe containing the information about the problem that Sara should solve could not be read. 
Either the file does not exist or read access was not allowed.

@smallexample
@cartouche
sara: could not read problem information -- aborting [#01]
@end cartouche
@end smallexample

@item #02
The problem information contains the filename of a Petri net that must be loaded to solve the problem.
The file corresponding to this filename either does not exist or read access was not granted.

@smallexample
@cartouche
sara: could not read from Petri net file '[filename]' -- aborting [#02]
@end cartouche
@end smallexample

@item #03
The file system did not allow to create a file and write to it. Typically, the user tried to
make Sara create a problem information file and did not get write access, either to
the directory or the file itself.

@smallexample
@cartouche
sara: could not write to file '[filename]' -- aborting [#03]
@end cartouche
@end smallexample

@item #04
A syntax error occurred while parsing a Petri net file. Either the file itself contains a syntax
error or Sara was directed to the wrong parser. Check if the problem file contains the correct
type (LOLA or OWFN) or, if the creation of a problem file went wrong, if the command line option
for the correct Petri net type was used (-O).

@smallexample
@cartouche
sara: error while reading Petri net from file -- aborting [#04]
@end cartouche
@end smallexample

@item #05
A syntax error occurred while parsing a problem file. Check that file.

@smallexample
@cartouche
sara: error while parsing the sara problem file -- aborting [#05]
@end cartouche
@end smallexample

@item #11
Internal error. A set of places was empty where it should not be. This is a bug.

@smallexample
@cartouche
sara: no scapegoat for stubborn set method -- aborting [#11]
@end cartouche
@end smallexample

@item #12
Internal error. The Integer Programming tool lp_solve was unable to create the data structures
for solving the marking equation of a Petri net. This can be a bug or a problem
instance is too large and will not fit into the memory.

@smallexample
@cartouche
sara: could not create LP model -- aborting [#12]
@end cartouche
@end smallexample

@item #13
Internal error of lp_solve. This can be a bug of lp_solve or can happen due to
insufficient memory.

@smallexample
@cartouche
sara: failed to add constraint to LP model -- aborting [#13]
@end cartouche
@end smallexample

@item #14
Internal error. Sara generated solutions to a problem, but for some reason the
solutions were not stored. This is a bug.

@smallexample
@cartouche
sara: solved, but no solution found -- aborting [#14]
@end cartouche
@end smallexample

@c <<-- CHANGE END -->>

@end table


@c --------------------------------------------------------------------------


@node ChangeLog
@chapter Version History

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Sara is developed under the ``Release Early, Release Often'' maxime (see @url{http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html}): Whenever enough integrated or a non-trivial changes have summed up, a new version is published. Though this releases might now always mark significant changes, they at least allow to quickly fix bugs and avoid infinite procrastination.

@include ChangeLog.texi
@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
The most recent change log is available at Sara's website at @url{http://service-technology.org/files/hello/ChangeLog}.


@c --------------------------------------------------------------------------

@node GNU Free Documentation License
@appendix The GNU Free Documentation License

@include fdl.texi

@bye
