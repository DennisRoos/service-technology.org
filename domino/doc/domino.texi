\input texinfo
@setfilename domino.info
@include version.texi
@afourpaper
@finalout
@settitle Domino User's Manual


@c --------------------------------------------------------------------------


@copying
@b{About this document:}

This manual is for Domino, version @value{VERSION}, Decomposition of business workflows (into services), last updated @value{UPDATED}.

Copyright @copyright{} 2010 Andreas Lehmann

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify this GNU Manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom.''
@end quotation
@end copying

@dircategory service-technology.org
@direntry
* Domino: (domino).       decomposition of business workflows (into services).
@end direntry


@c --------------------------------------------------------------------------


@titlepage

@title Domino

@subtitle Decomposition of business workflows (into services)
@subtitle @url{http://service-technology.org/domino}
@vskip 0.5em
@subtitle Version @value{VERSION}, @value{UPDATED}

@author Andreas Lehmann
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@c --------------------------------------------------------------------------


@ifnottex
@node Top
@top Domino
@insertcopying
@end ifnottex


@c --------------------------------------------------------------------------


@menu
* First Steps::How to set up and install Domino.
* Command Line Options::How to run Domino.
* Theory::The theory behind Domino.
* Results::What information is written to the results files.
* Exit and Error Codes::What the error and exit codes of Domino mean.
* ChangeLog::Version history.
* GNU Free Documentation License::The license of this manual.
@end menu

@c --------------------------------------------------------------------------


@contents
@paragraphindent none


@c --------------------------------------------------------------------------


@node First Steps
@chapter First Steps
@section Setup and Installation

@enumerate
@item Go to @url{http://service-technology.org/files/domino} and download the latest release version of Domino, say @file{domino-@value{VERSION}.tar.gz}. To setup and compile Domino, change into your download directory and type

@cartouche
@smallexample
tar xfz domino-@value{VERSION}.tar.gz
cd domino-@value{VERSION}
./configure
make
@end smallexample
@end cartouche

After compilation, a binary @samp{src/domino} is generated.@footnote{On Microsoft Windows, the file will be called @file{domino.exe}.} If you experience any compiler warnings, don't panic: Domino contains some generated or third party code that we cannot influence.

@item To test whether everything went fine, type

@cartouche
@smallexample
make check
@end smallexample
@end cartouche

to execute the testcases located in @file{tests}. If everything went fine, you should see something like:

@smallexample
## ------------- ##
## Test results. ##
## ------------- ##

All 61 tests were successful.
@end smallexample

If an error occurs, please send the output to @email{domino@@service-technology.org}.

@item To install the binary, the manpage, and the documentation, type

@cartouche
@smallexample
make install
@end smallexample
@end cartouche

You might need superuser permissions to do so.
@end enumerate

If you need any further information, see file @file{INSTALL} for detailed instructions.


@section Contents of the Distribution

The distribution contains several directories:

@table @file
@item doc
The Texinfo documentation of Domino. The documentation can be created using @samp{make pdf}. Note you need to have Domino properly installed before (see installation description above).

@item libs
The Petri Net @acronym{API} used by Domino to parse and organize the open net.

@item man
The manpage of Domino which can be displayed using @samp{man domino} after having Domino installed (see installation description above).

@item src
The source code of Domino.

@item tests
Testcases for Domino which check the generated binary.
@end table


@c --------------------------------------------------------------------------


@section Requirements
@anchor{Requirements}

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
In order to run, compile, and develop Domino, several tools are required.

@subsection Runtime
@itemize
@item LoLA (@url{http://service-technology.org/lola}), compiled with the @samp{STATESPACE} option. A suitable LoLA (version 1.14 or above) binary can be created as follows:
@enumerate
@item download @url{http://service-technology.org/files/lola/lola.tar.gz}
@item untar @file{lola.tar.gz}, configure
@item call @samp{make lola-statespace}
@item copy the binary @file{src/lola-statespace} to a directory of your path
(e.g., @file{/usr/local/bin}) or call @samp{make install}
@end enumerate
@item Diane (@url{http://service-technology.org/diane}). A suitable Diane binary can be created as follows:
@enumerate
@item download @url{http://service-technology.org/files/diane/diane.tar.gz}
@item untar @file{diane.tar.gz}, configure
@item call @samp{make}
@item copy the binary @file{src/diane} to a directory of your path
(e.g., @file{/usr/local/bin}) or call @samp{make install}
@end enumerate
@end itemize

Domino's configure script checks whether LoLA (with binary @file{lola-statespace}) and Diane (with binary @file{diane}) are found in the path and adjusts the configuration file @file{src/domino.conf} accordingly.

@subsection Compilation
To compile the source code from a source distribution, the following tools are required.

@itemize
@item GCC (@url{http://gcc.gnu.org/})
@item @acronym{GNU} Make (@url{http://www.gnu.org/software/make/})
@end itemize


@subsection Development
In case you want to make changes to the source code, the following tools are required to reconfigure and compile Domino.

@itemize
@item Autoconf, @url{http://www.gnu.org/software/autoconf/}
@item Automake, @url{http://www.gnu.org/software/automake/}
@item Bison, @url{http://www.gnu.org/software/bison/}
@item flex, @url{http://flex.sourceforge.net/}
@item Gengetopt, @url{http://www.gnu.org/software/gengetopt/}
@item help2man, @url{http://www.gnu.org/software/help2man/}
@item Texinfo, @url{http://www.gnu.org/software/texinfo/}
@end itemize

@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Please check our nightly build server at @url{http://service-technology.org/nightly} for the versions we use during development.


@c --------------------------------------------------------------------------


@node Command Line Options
@chapter Invoking Domino

Domino is a command line tool and does not come with a fancy @acronym{GUI}. However, Domino can be easily scripted and combined with other tools.

@section Command Line Options

For an overview of the command line options, type @samp{domino -h} to see the following help screen:

@smallexample
@verbatiminclude cmdline.out
@end smallexample


@section Configuration Files

The parameters can also be controlled using a configuration file that can be read using the @samp{config} option; for example:

@cartouche
@smallexample
domino net.owfn --config=myconf.conf
@end smallexample
@end cartouche

A configuration file consistes of @code{paramter = value} lines, each line setting the value of a parameter. Note: If not all parameters are defined, the standard values apply.

The configure script creates a default configuration file @file{domino.conf} which located in the @file{src} folder. When installing Domino, this is copied to your sysconfig directory (usually @file{/usr/local/etc}).

When Domino is executed, it evaluates parameters as follows:
@enumerate
@item When a configuration file is given via @option{--config}, it is used.
@item Otherwise, the configuration file @file{domino.conf} in the local directory is used if present.
@item Otherwise, the configuration file @file{domino.conf} in the sysconf directory (usually @file{/usr/local/etc}) is used if present.
@item Otherwise, no configuration file is used.
@end enumerate
Parameters given via command-line will overwrite parameters given via configuration files.


@c --------------------------------------------------------------------------


@node Theory
@chapter Theory

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Domino implements several algorithms and result published in several scientific articles.

See my diploma thesis "Decomposition of business workflows" (in German only) for detailed information.

@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
See @url{http://service-technology.org/publications} for more information.


@c --------------------------------------------------------------------------


@node Results
@chapter Results

@heading @code{decomposition}
@findex decomposition

This part lists information on the decomposition process.

@ftable @code
@item success
True if decomposition of the input open net was successfull. [Boolean]

@item bounded_transitions
The number of unbounded transitions. [Integer]

@item multiple_predecessors
The number of unbounded transitions with more than one predecessor (transition). [Integer]

@item initial_marked_places
The number of initial marked places from 'bounded_transitions'. [Integer]

@item interface_corrected_places
The number of not bilateral shared places. [Integer]

@item fragment_connections
The number of forced connections of fragments (with pairwise identical roles). [Integer]

@item places_inserted
The number of inserted places by necessary corrections. [Integer]

@item transitions_inserted
The number of inserted transitions by necessary corrections. [Integer]
@item lola_called
True, if LoLA was called. [Boolean]
@item arcs_inserted
The number of inserted arcs by necessary corrections. [Integer]

@item places_deleted
The number of deleted places by necessary corrections. [Integer]

@item transitions_deleted
The number of deleted transitions by necessary corrections. [Integer]

@item arcs_deleted
The number of deleted arcs by necessary corrections. [Integer]

@item roles_annotated
The number of roles annotated. Annotated roles can be given or created by parameter @option{--concatenateAnnotations}. [Integer]

@item concatenation_necessary
True if parameter @option{--concatenateAnnotations} was necessary. [Boolean]

@item lola_called
True, if LoLA was called. [Boolean]

@item diane_calls
The number of times Diane was called. [Integer]

@item not_annotated_transitions
The number of not annotated transitions. [Integer]

@item annotations_forced
The number of forced decisions during the role annotation to unsassigned fragments. Each time a decision is forced another decomposition was possible. See also 'annotation_alternatives'. [Integer]

@item annotation_alternatives
The number of all possibilites during forced decisions. If an unassigned fragment is forced to a specific role there are at least two alternatives. These alternatives are count. This number just counts the alternatives for all forced decisions, you may note, that forcing one decision yields or blocks other (forced) decisions. [Integer]

@end ftable

@heading @code{meta}
@findex meta

This part lists information on the tool itself.

@ftable @code
@item invocation
The invocation string of the tool. [String]

@item package_name
@itemx package_version
@itemx svn_version
The name of the tool, its version, and (when applicable) the version of the SVN revision. [String]
@end ftable

@heading @code{workflow}
@findex workflow

This part lists all kind of information of the input workflow.

@ftable @code
@item isFreeChoice
Belongs the input worklfow to the freechoice class of petri nets. [Boolean]

@item hasCycles
Are there any cycles in the input workflow? [Boolean]

@item roles
The number of roles of the input workflow. [Integer]

@item places
The number of places of the input workflow. [Integer]

@item transitions
The number of transitions of the input workflow. [Integer]

@item arcs
The number of arcs of the input workflow. [Integer]
@end ftable

@c --------------------------------------------------------------------------

@node Exit and Error Codes
@chapter Exit and Error Codes
@section Exit Codes

Domino will exit with code @samp{0} in case everything went fine. That is, the command-line parameters were valid, the input open net could be read, all external calls were successfull and---if requested---output files could be successfully written. In case any error occurs, the exit code will be @samp{1} and an error message with an error code (see below) will be printed to the standard error stream.

Note that Domino's exit code is @b{not} related to the result of the decompisition result. The messages

@smallexample
@cartouche
domino: worklfow decomposition successfull
@end cartouche
@end smallexample

and

@smallexample
@cartouche
domino: worklfow decomposition failed
@end cartouche
@end smallexample

both yield exit code @samp{0} (successful termination).

@section Error Codes

In case any error occurs, Domino aborts with exit code @samp{1} and prints a message with an error code to the standard error stream.

@table @asis

@item #01
Error opening the input open net or input file not found.

@smallexample
@cartouche
domino: could not open file `foo.owfn' -- aborting [#01]
@end cartouche
@end smallexample

@item #02
Error parsing the input open net. Usually indicates the line of the error and some more or less helpful message on the parse error.

@smallexample
@cartouche
domino:13: error near `Place': syntax error, unexpected IDENT,
           expecting KEY_INTERFACE or KEY_PLACE -- aborting [#02]
@end cartouche
@end smallexample

@item #03
Error opening a file (to write). Usually, this error occurs in case Domino is called in a directory without (writing) permissions. Output files can be the target files of the @option{--resultFile} or any dot file @option{--dot-*} parameter as well as the temporary files by LoLA and Diane.

@smallexample
@cartouche
domino: file foo.bar cannot be opened -- aborting [#03]
@end cartouche
@end smallexample

@item #04
At most one file can be read at once. If no input filename is given, the open net is read from standard input.

@smallexample
@cartouche
domino: at most one input file must be given -- aborting [#04]
@end cartouche
@end smallexample

@item #05
Error writing to a file. Usually, this error occurs in case Domino is called to write a file, but the file already exists. Output files can be the target files of the @option{--resultFile} or any dot file @option{--dot-*} parameter as well as the temporary files by LoLA and Diane.

@smallexample
@cartouche
domino: file foo.bar already exists -- aborting [#05]
@end cartouche
@end smallexample

@item #06
Error processing the input open net. This error occurs in case any transition in the input open net has more than one role assigned. To avoid this error, reannotate the transitions in the input open net or use the parameter @option{--concatenateAnnotations}.

@smallexample
@cartouche
domino: Fragmentation::init(): 
        transition t1 has more than one role -- aborting [#6]
@end cartouche
@end smallexample

@item #07
A wrong command-line parameter was given or there was a problem with the combination of command-line parameters. This message is usually accompanied by another message describing the exact problem. Run @samp{domino --help} for an overview of the valid command-line parameters.

@smallexample
@cartouche
domino: `--dotServices' option depends on option `output'
domino: invalid command-line parameter(s) -- aborting [#07]
@end cartouche
@end smallexample

@item #08
Error coloring a dot file. This error occurs in case all preset colors (actually 30) are used. To avoid these error you can switch off (by default) parameter @option{--dotColorUnassigned} (can save one color) or change the source. Maybe there will be an option (by parameter) to define own colors.

@smallexample
@cartouche
domino: Fragmentation::colorFragmentsByFragID(1):
        all 30 colors used -- aborting [#8]
@end cartouche
@end smallexample

@item #09
Assertation violation. Usually, this error occurs in case Domino has internal problems...maybe you found a bug.

@smallexample
@cartouche
domino: Fragmentation::buildServices(): curPredecessor == *t -- aborting [#09]
@end cartouche
@end smallexample

The parameter @option{--verbose} can give you additional information on the nature of the error.

@item #10
The name of a new node is already present. To avoid this error, rename the place in the input open net or use the parameters @option{--communicationCorrection}, @option{--boundnessCorrection} and @option{--connectionCorrection}.

@smallexample
@cartouche
domino: Fragmentation::createPlace(p1): already known -- aborting [#10]
@end cartouche
@end smallexample

The parameter @option{--verbose} can give you additional information on the nature of the error.

@item #11
The input open net contains not exactly one global start place. Usually, this error occurs in case the input open net is no worklow.

@smallexample
@cartouche
domino: Fragmentation::init(): no global start place was found
        -- aborting [#11]
@end cartouche
@end smallexample

@item #12
Error deleting a file. Usually, this error occurs in case a file was deleted before (by anybody else).

@smallexample
@cartouche
domino: Fragmentation::buildServices(): file foo.bar cannot be deleted
        -- aborting [#12]
@end cartouche
@end smallexample

@item #14
Domino cannot find the configuration file given by @file{--config} parameter or it has syntax errors. For an example configuration file, see the standard configuration file @file{src/domino.conf} created by the configure script. See @url{http://www.gnu.org/software/gengetopt/gengetopt.html#Configuration-files} for more information on configuration file.

@smallexample
@cartouche
domino: Error opening configuration file `myconf.conf'
domino: error reading configuration file `myconf.conf' -- aborting [#14]
@end cartouche
@end smallexample

@end table


@c --------------------------------------------------------------------------


@node ChangeLog
@chapter Version History

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
Domino is developed under the ``Release Early, Release Often'' maxime (see @url{http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html}): Whenever enough integrated or a non-trivial changes have summed up, a new version is published. Though this releases might now always mark significant changes, they at least allow to quickly fix bugs and avoid infinite procrastination.

@include ChangeLog.texi
@sp 3

@c !!! DO NOT CHANGE THE NEXT LINE -- IT IS USED AS A FILTER IN SCRIPTS !!!
The most recent change log is available at Domino's website at @url{http://service-technology.org/files/domino/ChangeLog}.


@c --------------------------------------------------------------------------

@node GNU Free Documentation License
@appendix The GNU Free Documentation License

@include fdl.texi

@bye
