/**
 * Copyright (c) 2008 Dirk Fahland. All rights reserved. EPL1.0/GPL3.0/LGPL3.0
 * 
 * ServiceTechnolog.org - FlowChart Editors
 * 
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0, which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * 
 * The Original Code is this file as it was released on July 30, 2008.
 * The Initial Developer of the Original Code is
 *  		Dirk Fahland
 *  
 * Portions created by the Initial Developer are Copyright (c) 2008
 * the Initial Developer. All Rights Reserved.
 * 
 * Contributor(s):
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 3 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 3 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the EPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the EPL, the GPL or the LGPL.
 *
 * $Id$
 */
package hub.top.lang.flowcharts.provider;

import hub.top.lang.flowcharts.util.FlowAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FlowItemProviderAdapterFactory extends FlowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public FlowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.WorkflowDiagram} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected WorkflowDiagramItemProvider workflowDiagramItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.WorkflowDiagram}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createWorkflowDiagramAdapter() {
		if (workflowDiagramItemProvider == null) {
			workflowDiagramItemProvider = new WorkflowDiagramItemProvider(this);
		}

		return workflowDiagramItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.StartNode} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected StartNodeItemProvider startNodeItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.StartNode}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createStartNodeAdapter() {
		if (startNodeItemProvider == null) {
			startNodeItemProvider = new StartNodeItemProvider(this);
		}

		return startNodeItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Endnode} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected EndnodeItemProvider endnodeItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Endnode}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createEndnodeAdapter() {
		if (endnodeItemProvider == null) {
			endnodeItemProvider = new EndnodeItemProvider(this);
		}

		return endnodeItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.SplitNode} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SplitNodeItemProvider splitNodeItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.SplitNode}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSplitNodeAdapter() {
		if (splitNodeItemProvider == null) {
			splitNodeItemProvider = new SplitNodeItemProvider(this);
		}

		return splitNodeItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.MergeNode} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected MergeNodeItemProvider mergeNodeItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.MergeNode}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createMergeNodeAdapter() {
		if (mergeNodeItemProvider == null) {
			mergeNodeItemProvider = new MergeNodeItemProvider(this);
		}

		return mergeNodeItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Flow} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected FlowItemProvider flowItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Flow}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createFlowAdapter() {
		if (flowItemProvider == null) {
			flowItemProvider = new FlowItemProvider(this);
		}

		return flowItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.SimpleActivity} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SimpleActivityItemProvider simpleActivityItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.SimpleActivity}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSimpleActivityAdapter() {
		if (simpleActivityItemProvider == null) {
			simpleActivityItemProvider = new SimpleActivityItemProvider(this);
		}

		return simpleActivityItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Subprocess} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SubprocessItemProvider subprocessItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Subprocess}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSubprocessAdapter() {
		if (subprocessItemProvider == null) {
			subprocessItemProvider = new SubprocessItemProvider(this);
		}

		return subprocessItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Workflow} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected WorkflowItemProvider workflowItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Workflow}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.PersistentResource} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected PersistentResourceItemProvider persistentResourceItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.PersistentResource}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createPersistentResourceAdapter() {
		if (persistentResourceItemProvider == null) {
			persistentResourceItemProvider = new PersistentResourceItemProvider(this);
		}

		return persistentResourceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.TransientResource} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TransientResourceItemProvider transientResourceItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.TransientResource}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTransientResourceAdapter() {
		if (transientResourceItemProvider == null) {
			transientResourceItemProvider = new TransientResourceItemProvider(this);
		}

		return transientResourceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Document} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected DocumentItemProvider documentItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Document}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createDocumentAdapter() {
		if (documentItemProvider == null) {
			documentItemProvider = new DocumentItemProvider(this);
		}

		return documentItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.Event} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected EventItemProvider eventItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.Event}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link hub.top.lang.flowcharts.DiagramArc} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected DiagramArcItemProvider diagramArcItemProvider;

  /**
	 * This creates an adapter for a {@link hub.top.lang.flowcharts.DiagramArc}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createDiagramArcAdapter() {
		if (diagramArcItemProvider == null) {
			diagramArcItemProvider = new DiagramArcItemProvider(this);
		}

		return diagramArcItemProvider;
	}

  /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

  /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

  /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

  /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

  /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

  /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

  /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void dispose() {
		if (workflowDiagramItemProvider != null) workflowDiagramItemProvider.dispose();
		if (startNodeItemProvider != null) startNodeItemProvider.dispose();
		if (endnodeItemProvider != null) endnodeItemProvider.dispose();
		if (splitNodeItemProvider != null) splitNodeItemProvider.dispose();
		if (mergeNodeItemProvider != null) mergeNodeItemProvider.dispose();
		if (flowItemProvider != null) flowItemProvider.dispose();
		if (simpleActivityItemProvider != null) simpleActivityItemProvider.dispose();
		if (subprocessItemProvider != null) subprocessItemProvider.dispose();
		if (workflowItemProvider != null) workflowItemProvider.dispose();
		if (persistentResourceItemProvider != null) persistentResourceItemProvider.dispose();
		if (transientResourceItemProvider != null) transientResourceItemProvider.dispose();
		if (documentItemProvider != null) documentItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (diagramArcItemProvider != null) diagramArcItemProvider.dispose();
	}

}
