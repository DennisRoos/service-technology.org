/*****************************************************************************\
 * ServiceTechnolog.org - OpenNet Editor
 * Copyright (c) 2008 Dirk Fahland.
 * All rights reserved.
\*****************************************************************************/

syntax(PtNet) "resources/ptnetLoLA.ecore" {
    PtNet:element(PtNet) ->
    	(Annotation:composite(annotation) ws(statement) ws(statement))?
       	Places
       	InitialMarking:composite(initialMarking)
       	FinalMarkingChoice
       	TransitionList;
       	
/* ------------------ places ------------------ */
    
    Places -> "PLACE"
      ws(blockstart)
      /* ---- internal places ---- */
          ws(indent) "INTERNAL" { setNodeTypeInternal(); }
          ws(blockstart)
              (PlaceList)?
          ws(blockend) ws(statement)
          ";" ws(statement) ws(statement)
      /* ---- input interface places ---- */
          ws(indent) "INPUT" { setNodeTypeInput(); }
          ws(blockstart)
              (PlaceList)?
          ws(blockend) ws(statement)
          ";" ws(statement) ws(statement)
      /* ---- output interface places ---- */
          ws(indent) "OUTPUT" { setNodeTypeOutput(); }
          ws(blockstart)
              (PlaceList)?
          ws(blockend) ws(statement)
          ";" ws(statement) ws(statement);
       
    PlaceList [0] -> ws(indent) Place:composite(places) {setNodeTypeForNode($1); ppFilter_matchesNodeType(); };
    PlaceList [1] -> ws(indent) Place:composite(places) {setNodeTypeForNode($1); ppFilter_matchesNodeType(); } ws(empty) "," ws(statement) PlaceList;
    Place:element(Place) -> PlaceName:composite(name) (ws(space) Annotation:composite(annotation))?
      ;
    PlaceName -> LOLAIDENT;
    
/* ------------------ initial marking ------------------ */
    
    InitialMarking:element(Marking) -> "INITIALMARKING"
           ws(blockstart)
               (MarkedPlaceList)?
           ws(blockend) ws(statement)
           ";" ws(statement) ws(statement);
           
    MarkedPlaceList [0] -> ws(indent) PlaceMarking:composite(places);
    MarkedPlaceList [1] -> ws(indent) PlaceMarking:composite(places) ws(empty) "," ws(statement) MarkedPlaceList;
    PlaceMarking:element(RefMarkedPlace) ->
       PlaceRef:reference(place) (ws(space) ":" ws(space) /*INTEGER  { placeSetTokenNumber($0, $4);  }*/ INTEGER:composite(token))? ;
       
/* ------------------ final marking ------------------ */

	FinalMarkingChoice -> "FINALMARKING" FinalMarking:composite(finalMarking);
	FinalMarkingChoice -> "FINALCONDITION" FinalCondition;
       
    FinalMarking:element(Marking) ->
           ws(blockstart)
               (MarkedPlaceList)?
           ws(blockend) ws(statement)
           ";" ws(statement) ws(statement);

    FinalCondition ->
          /* formula */
           ";" ws(statement) ws(statement);
           
/* ------------------ transitions and arcs ------------------ */
       
    TransitionList -> (Transition:composite(transitions)  { addArcsToNet($0); }  )*;
    Transition:element(Transition) ->
       "TRANSITION" ws(space) LOLAIDENT:composite(name) (ws(space) Annotation:composite(annotation))? ws(statement)
           "CONSUME"
           ws(blockstart)
               (ArcToTransitionList)? ws(empty) ";"
           ws(blockend) ws(statement)
           "PRODUCE"
           ws(blockstart)
               (ArcToPlaceList)? ws(empty) ";" 
           ws(blockend) ws(statement)
       ws(statement);

    ArcToTransitionList [0] -> ws (indent) ArcToTransition:composite(incoming)  ;
    ArcToTransitionList [1] -> ws (indent) ArcToTransition:composite(incoming) ws(empty) "," ws(statement) ArcToTransitionList ;
    
    ArcToTransition:element(ArcToTransition) ->
       PlaceRef:reference(source) (ws(space) ":" ws(space) INTEGER:composite(weight))? ;
       
    ArcToPlaceList [0] -> ws (indent) ArcToPlace:composite(outgoing) ;
    ArcToPlaceList [1] -> ws (indent) ArcToPlace:composite(outgoing) ws(empty) "," ws(statement) ArcToPlaceList ;
    
    ArcToPlace:element(ArcToPlace) ->
       PlaceRef:reference(target) (ws(space) ":" ws(space) INTEGER:composite(weight))? ;

    PlaceRef:elementRef(Place) -> PlaceName:composite(name) ;
    
/* ------------------ annotations and comments ------------------ */
    
    Annotation:element(Annotation) -> LOLAANNOTATION:composite(text);

    token () {
    	"`lolacomment`";
    }
}
