AT_INIT
AT_COLOR_TESTS

############################################################################
AT_BANNER([Basic Options])
############################################################################

AT_SETUP([Help output])
AT_CHECK([PARMIDA --help],0,ignore)
AT_KEYWORDS(basic)
AT_CLEANUP

AT_SETUP([Version output])
AT_CHECK([PARMIDA --version],0,ignore)
AT_KEYWORDS(basic)
AT_CLEANUP

############################################################################
AT_BANNER([Net Formats])
############################################################################

AT_SETUP([OWFN (default)])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA --BOUNDED --LIVE -P -T -v test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "read net" stderr])
AT_CHECK([GREP -q "write net" stderr])
AT_CHECK([GREP -q "write JSON" stderr])
AT_CHECK([GREP -q "Parmida" owfn])
AT_CHECK([GREP -q "checkable properties" json])
AT_KEYWORDS(format)
AT_CLEANUP

AT_SETUP([LoLA])
AT_CHECK([cp TESTFILES/garavel.llnet .])
AT_CHECK([PARMIDA --BOUNDED --LIVE -P -T -v garavel.llnet --lola -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "read net" stderr])
AT_CHECK([GREP -q "write net" stderr])
AT_CHECK([GREP -q "write JSON" stderr])
AT_CHECK([GREP -q "Parmida" owfn])
AT_CHECK([GREP -q "checkable properties" json])
AT_KEYWORDS(format)
AT_CLEANUP

AT_SETUP([PNML])
AT_CHECK([cp TESTFILES/MAPK320.pnml .])
AT_CHECK([PARMIDA --BOUNDED --LIVE -P -T -v MAPK320.pnml --pnml -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "read net" stderr])
AT_CHECK([GREP -q "write net" stderr])
AT_CHECK([GREP -q "write JSON" stderr])
AT_CHECK([GREP -q "Parmida" owfn])
AT_CHECK([GREP -q "checkable properties" json])
AT_KEYWORDS(format)
AT_CLEANUP

############################################################################
AT_BANNER([Error Codes])
############################################################################

AT_SETUP([Net does not exist])
AT_CHECK([PARMIDA -P -T -v test1a.owfn -oowfn --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "could not open file" stderr])
AT_CHECK([GREP -q "aborting ..01" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

AT_SETUP([Net parsing failed])
AT_CHECK([cp TESTFILES/test1z.owfn .])
AT_CHECK([PARMIDA -P -T -v test1z.owfn -oowfn --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "error near 'PLACE'" stderr])
AT_CHECK([GREP -q "aborting ..02" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

AT_SETUP([More than one input file])
AT_CHECK([cp TESTFILES/test1a.owfn TESTFILES/test1b.owfn .])
AT_CHECK([PARMIDA -P -T -v test1a.owfn test1b.owfn -oowfn --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "at most one input file" stderr])
AT_CHECK([GREP -q "aborting ..05" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

AT_SETUP([Invalid command line parameter])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -P -T -v test1a.owfn --exoskeleton -oowfn --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "invalid command-line parameter(s)" stderr])
AT_CHECK([GREP -q "aborting ..07" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

AT_SETUP([Corrupted JSON translation file])
AT_CHECK([cp TESTFILES/test5b.json TESTFILES/test5a.path .])
AT_CHECK([PARMIDA -P -T -v --readjson=test5b.json test5a.path --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "error in JSON translation file" stderr])
AT_CHECK([GREP -q "aborting ..09" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

AT_SETUP([Missing JSON path file])
AT_CHECK([cp TESTFILES/test5a.json .])
AT_CHECK([PARMIDA -P -T -v --readjson=test5a.json --writejson=json],1,stdout,stderr)
AT_CHECK([GREP -q "missing input file for path" stderr])
AT_CHECK([GREP -q "aborting ..11" stderr])
AT_KEYWORDS(errors)
AT_CLEANUP

############################################################################
AT_BANNER([Path Translation])
############################################################################

AT_SETUP([Translating a simple path])
AT_CHECK([cp TESTFILES/test5a.json TESTFILES/test5a.path .])
AT_CHECK([PARMIDA -P -T -v --readjson=test5a.json test5a.path --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "\"path\": .\"v\", \"v\", \"t\", \"v\", \"v\", \"v\", \"u\", \"v\", \"w\"" json])
AT_KEYWORDS(path)
AT_CLEANUP

AT_SETUP([Translating a complex path])
AT_CHECK([cp TESTFILES/test4a.json TESTFILES/test4a.path .])
AT_CHECK([PARMIDA -P -T -v --readjson=test4a.json test4a.path --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "\"path\": .\"v\", \"v\", \"u\", \"u\", \"t\", \"t\"" json])
AT_KEYWORDS(path)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Initially Dead Place])
############################################################################

AT_SETUP([Removing a dead place])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([GREP -q "|F|= 2" owfn])
AT_CHECK([GREP -q "apply 1.p." stderr])
AT_CHECK([GREP -q "\"deduced properties\": .\"non-live\"." json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json])
AT_CHECK([GREP -q "\"LTL\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([Removing a dead place, properties to stdout])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 test1a.owfn],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" stdout])
AT_CHECK([GREP -q "|T|= 1" stdout])
AT_CHECK([GREP -q "|F|= 2" stdout])
AT_CHECK([GREP -q "non-live" stdout])
AT_CHECK([GREP -q "live" stdout])
AT_CHECK([GREP -q "CTL" stdout])
AT_CHECK([GREP -q " LTL" stdout])
AT_CHECK([GREP -q "unbounded" stdout])
AT_CHECK([GREP -q " bounded" stdout])
AT_CHECK([GREP -q "ALTL" stdout])
AT_CHECK([GREP -q "paths" stdout])
AT_CHECK([GREP -q "unsafe" stdout])
AT_CHECK([GREP -q " safe" stdout])
AT_CHECK([GREP -q "bisimulation" stdout])
AT_CHECK([GREP -q "reversibility" stdout])
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A non-dead transition])
AT_CHECK([cp TESTFILES/test1b.owfn .])
AT_CHECK([PARMIDA -d1 test1b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 1.p." stderr],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 -pt test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 1.p." stderr],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 -pp test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 1.p." stderr],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A non-contained preset])
AT_CHECK([cp TESTFILES/test1c.owfn .])
AT_CHECK([PARMIDA -d1 test1c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 1.p." stderr],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([An input place])
AT_CHECK([cp TESTFILES/test1d.owfn .])
AT_CHECK([PARMIDA -d1 test1d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 1.p." stderr],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 --final test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "bounded\": .\"p\": true" json])
AT_CHECK([GREP -q "safe\": .\"p\": true" json])
AT_CHECK([GREP -q "marking\": .\"p\": .\".factor.\": 1, \".fixed.\": 0, \"p\": 1" json])
AT_CHECK([GREP -q "FALSE;" owfn])
AT_KEYWORDS(rule1)
AT_CLEANUP

AT_SETUP([A visible transition])
AT_CHECK([cp TESTFILES/test1a.owfn .])
AT_CHECK([PARMIDA -d1 -st test1a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "live\": .\"t\": false" json])
AT_CHECK([GREP -q "\"path\"" json],1)
AT_KEYWORDS(rule1)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Parallel Places])
############################################################################

AT_SETUP([Removing one of two parallel places])
AT_CHECK([cp TESTFILES/test2a.owfn .])
AT_CHECK([PARMIDA -d2 test2a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 2" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 4" owfn])
AT_CHECK([GREP -q "apply 2" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json])
AT_CHECK([GREP -q "\"LTL\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([An input place])
AT_CHECK([cp TESTFILES/test2b.owfn .])
AT_CHECK([PARMIDA -d2 test2b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2.p." stderr],1)
AT_CHECK([GREP -q "apply 2.q." stderr],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test2a.owfn .])
AT_CHECK([PARMIDA -pp -d2 test2a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2" stderr],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([Disabling the safety check])
AT_CHECK([cp TESTFILES/test2a.owfn .])
AT_CHECK([PARMIDA --SAFE -d2 test2a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2" stderr],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([No parallel places])
AT_CHECK([cp TESTFILES/test2c.owfn .])
AT_CHECK([PARMIDA -d2 test2c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2" stderr],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([Final Condition])
AT_CHECK([cp TESTFILES/test2a.owfn .])
AT_CHECK([PARMIDA -d2 test2a.owfn --final -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "q >= 1" owfn])
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([Checking simple properties])
AT_CHECK([cp TESTFILES/test2a.owfn .])
AT_CHECK([PARMIDA -d2 test2a.owfn --BOUNDED --LIVE -P -T --marking -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json])
AT_CHECK([GREP -q "\"LTL\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"marking\": .\"q\": .\".factor.\": 1, \".init.\": -1, \"p\": 1" json])
AT_CHECK([GREP -q "\"bounded\": .\"p\": .\"q\"" json])
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "\"live\":" json],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

AT_SETUP([Deduced non-safety])
AT_CHECK([cp TESTFILES/test2d.owfn .])
AT_CHECK([PARMIDA -d2 test2d.owfn -P -T -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "\"deduced properties\": .\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\": .\"p\": false" json])
AT_KEYWORDS(rule2)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Parallel Transitions])
############################################################################

AT_SETUP([Removing one of two parallel transitions])
AT_CHECK([cp TESTFILES/test3a.owfn .])
AT_CHECK([PARMIDA -d4 --LIVE -P -T test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 2" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 4" owfn])
AT_CHECK([GREP -q "apply 4" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json])
AT_CHECK([GREP -q "\"LTL\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"live\": .\".\": .\".\"" json])
AT_KEYWORDS(rule3)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test3a.owfn .])
AT_CHECK([PARMIDA -d4 -pt test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_KEYWORDS(rule3)
AT_CLEANUP

AT_SETUP([An action-labelled transition])
AT_CHECK([cp TESTFILES/test3a.owfn .])
AT_CHECK([PARMIDA -d4 --altl -lx test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_CHECK([PARMIDA -d4 --bisim -lx test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_KEYWORDS(rule3)
AT_CLEANUP

AT_SETUP([A visible transition])
AT_CHECK([cp TESTFILES/test3a.owfn .])
AT_CHECK([PARMIDA -d4 --altlx -st test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_CHECK([PARMIDA -d4 --bisim -st test3a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_KEYWORDS(rule3)
AT_CLEANUP

AT_SETUP([No parallel transitions])
AT_CHECK([cp TESTFILES/test3b.owfn .])
AT_CHECK([PARMIDA -d4 test3b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4" stderr],1)
AT_KEYWORDS(rule2)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Equivalent Places])
############################################################################

AT_SETUP([Removing a place/transition pair])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 -P -T test4a.owfn --complexpath --marking -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 3" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 6" owfn])
AT_CHECK([GREP -q "apply 8" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"complex paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
#AT_CHECK([GREP -q "\"live\": .\".|.\": \".\"" json])
#AT_CHECK([GREP -q "\"bounded\": .\".&.\": \".\"" json])
AT_CHECK([GREP -q "\"marking\": .\"p\": .\".factor.\": 1, \"p\": 1, \"q\": 1" json])
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "\"path\":" json])
AT_CHECK([GREP -q "\".if.\": .\".\"" json])
AT_CHECK([GREP -q "\"then\": .\".\"" json])
AT_CHECK([GREP -q "\"else\": .\".\"" json])
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Places have arc weight > 1])
AT_CHECK([cp TESTFILES/test4b.owfn .])
AT_CHECK([PARMIDA -d8 -P -T test4b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([An input place])
AT_CHECK([cp TESTFILES/test4c.owfn .])
AT_CHECK([PARMIDA -d8 -P -T test4c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 -pp test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Losing reversibility])
AT_CHECK([cp TESTFILES/test4d.owfn .])
AT_CHECK([PARMIDA -d8 --reversibility test4d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 --ltlx -sp test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 -pt test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 --altl -lb test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 --altlx -la test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_CHECK([PARMIDA -d8 --altlx -st test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 --bisim -lb test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([No equivalent place])
AT_CHECK([cp TESTFILES/test4e.owfn .])
AT_CHECK([PARMIDA -d8 test4e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

AT_SETUP([Losing safety])
AT_CHECK([cp TESTFILES/test4f.owfn .])
AT_CHECK([PARMIDA -d8 --SAFE test4f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr])
AT_CHECK([cp TESTFILES/test4a.owfn .])
AT_CHECK([PARMIDA -d8 --SAFE test4a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8" stderr],1)
AT_KEYWORDS(rule4)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Meld pre- and postset of a place (|pre|>=1, |post|=1)])
############################################################################

AT_SETUP([Removing the place])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 --LIVE -P -T test5a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 3" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 4" owfn])
AT_CHECK([GREP -q "apply 16" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json],1)
AT_CHECK([GREP -q "\"live\": .\"v\": .\"+\"" json])
AT_CHECK([GREP -q "\"path\": .\".init.\": .\"v\", \"v\"., \"t\": .\"t\", \"v\", \"v\", \"v\"., \"u\": .\"u\", \"v\"" json])
AT_CHECK([GREP -q "\"safe\": .\"q\". false" json])
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Larger postset])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d16 -P -T test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test5b.owfn .])
AT_CHECK([PARMIDA -d16 -pq test5b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test5b.owfn .])
AT_CHECK([PARMIDA -d16 --ctlx -sq test5b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Too many tokens])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 --ctlx test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_CHECK([PARMIDA -d16 --reversibility test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Losing safety])
AT_CHECK([cp TESTFILES/test5c.owfn .])
AT_CHECK([PARMIDA -d16 --SAFE test5c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Intersecting pre-/postsets])
AT_CHECK([cp TESTFILES/test5d.owfn .])
AT_CHECK([PARMIDA -d16 test5d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([A persistent posttransition])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 -pv test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Posttransition has empty postset])
AT_CHECK([cp TESTFILES/test5e.owfn .])
AT_CHECK([PARMIDA -d16 test5e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr])
AT_CHECK([PARMIDA -d16 --bounded test5e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Posttransition has non-singleton preset])
AT_CHECK([cp TESTFILES/test5f.owfn .])
AT_CHECK([PARMIDA -d16 test5f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 --altlx -sv test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_CHECK([PARMIDA -d16 --altlx -lb test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_CHECK([PARMIDA -d16 --altlx -la test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr])
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 --altl -ld test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d16 --bisim -sv test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_CHECK([PARMIDA -d16 --bisim -ld test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16" stderr],1)
AT_KEYWORDS(rule5)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Meld pre- and postset of a place (|pre|=1, |post|>=1)])
############################################################################

AT_SETUP([Removing the place])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 --LIVE -P -T test6a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 3" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 4" owfn])
AT_CHECK([GREP -q "apply 32" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"live\": .\"t\": .\".\"" json])
AT_CHECK([GREP -q "\"path\": .\"u\": .\"t\", \"u\"., \"v\": .\"t\", \"v\"" json])
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Larger preset])
AT_CHECK([cp TESTFILES/test5a.owfn .])
AT_CHECK([PARMIDA -d32 -P -T test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 -pq test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 --ctlx -sq test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Too many tokens])
AT_CHECK([cp TESTFILES/test6b.owfn .])
AT_CHECK([PARMIDA -d32 test6b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Losing safety])
AT_CHECK([cp TESTFILES/test6c.owfn .])
AT_CHECK([PARMIDA -d32 --SAFE test6c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Intersecting pre-/postsets])
AT_CHECK([cp TESTFILES/test6d.owfn .])
AT_CHECK([PARMIDA -d32 test6d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([A persistent pre- or posttransition])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 -pt test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 -pv test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Posttransitions have empty postset])
AT_CHECK([cp TESTFILES/test6e.owfn .])
AT_CHECK([PARMIDA -d32 test6e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr])
AT_CHECK([PARMIDA -d32 --bounded test6e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Posttransition has non-singleton preset])
AT_CHECK([cp TESTFILES/test6f.owfn .])
AT_CHECK([PARMIDA -d32 test6f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 --altlx -sv test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --altlx -st test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --altlx -lc test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --altlx -la test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --altlx -ld test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr])
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 --altl -ld test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d32 --bisim -sv test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --bisim -st test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_CHECK([PARMIDA -d32 --bisim -ld test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32" stderr],1)
AT_KEYWORDS(rule6)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Meld pre- and postset of a place (|pre|=2, |post|=2)])
############################################################################

#AT_SETUP([Removing the place])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 --LIVE -P -T test7a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "|P|= 4" owfn])
#AT_CHECK([GREP -q "|T|= 4" owfn])
#AT_CHECK([GREP -q "|F|= 8" owfn])
#AT_CHECK([GREP -q "apply 64" stderr])
#AT_CHECK([GREP -q "\"non-live\"" json])
#AT_CHECK([GREP -q "\"live\"" json])
#AT_CHECK([GREP -q "\"CTL\"" json],1)
#AT_CHECK([GREP -q "\"LTL\"" json],1)
#AT_CHECK([GREP -q "\"unbounded\"" json])
#AT_CHECK([GREP -q "\"bounded\"" json])
#AT_CHECK([GREP -q "\"ALTL\"" json],1)
#AT_CHECK([GREP -q "\"paths\"" json])
#AT_CHECK([GREP -q "\"unsafe\"" json])
#AT_CHECK([GREP -q "\"safe\"" json])
#AT_CHECK([GREP -q "\"bisimulation\"" json],1)
#AT_CHECK([GREP -q "\"reversibility\"" json])
#AT_CHECK([GREP -q "\"live\": .\"u\": .\"|\", \".\", \".\"., \"v\": .\"|\", \".\", \".\"" json])
#AT_CHECK([GREP -q "\"path\": .\"t\": .\"t\", \".\"., \"u\": .\".\", \".\"., \"v\": .\".\", \".\"., \"w\": .\"w\", \".\"" json])
#AT_CHECK([GREP -q "\"safe\":" json],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Wrong preset/postset size])
#AT_CHECK([cp TESTFILES/test5a.owfn TESTFILES/test6a.owfn .])
#AT_CHECK([PARMIDA -d64 -P -T test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 -P -T test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([A persistent place])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 -pq test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([A visible place])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 --ctlx -sq test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Too many tokens])
#AT_CHECK([cp TESTFILES/test7b.owfn .])
#AT_CHECK([PARMIDA -d64 test7b.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Losing safety])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 --SAFE test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Intersecting pre-/postsets])
#AT_CHECK([cp TESTFILES/test7c.owfn .])
#AT_CHECK([PARMIDA -d64 test7c.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([A persistent pre- or posttransition])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 -pt test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 -pv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Posttransitions have empty postset])
#AT_CHECK([cp TESTFILES/test7d.owfn .])
#AT_CHECK([PARMIDA -d64 test7d.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr])
#AT_CHECK([PARMIDA -d64 --bounded test7d.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Posttransition has non-singleton preset])
#AT_CHECK([cp TESTFILES/test7e.owfn .])
#AT_CHECK([PARMIDA -d64 test7e.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Losing action-based LTL-X])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 --altlx -sv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --altlx -st test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --altlx -lc test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --altlx -la test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr])
#AT_CHECK([PARMIDA -d64 --altlx -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr])
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Losing the next operator])
#AT_CHECK([cp TESTFILES/test7a.owfn .])
#AT_CHECK([PARMIDA -d64 --altl -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_KEYWORDS(rule7)
#AT_CLEANUP

#AT_SETUP([Losing bisimulation])
#AT_CHECK([cp TESTFILES/test7a.owfn TESTFILES/test7f.owfn .])
#AT_CHECK([PARMIDA -d64 --bisim -sv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --bisim -st test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --bisim -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr],1)
#AT_CHECK([PARMIDA -d64 --bisim -ld test7f.owfn -oowfn --writejson=json],0,stdout,stderr)
#AT_CHECK([GREP -q "apply 64" stderr])
#AT_KEYWORDS(rule7)
#AT_CLEANUP

############################################################################
AT_BANNER([Rule: Meld pre- and postset of a place (|pre|>1, |post|>1)])
############################################################################

AT_SETUP([Removing the place])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 --LIVE -P -T test7a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 4" owfn])
AT_CHECK([GREP -q "|T|= 4" owfn])
AT_CHECK([GREP -q "|F|= 8" owfn])
AT_CHECK([GREP -q "apply 4096" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"live\": .\"t\": .\"t..\"., \"u\": .\"+\", \"...\", \"...\"., \"v\": .\"+\", \"...\", \"...\"., \"w\": .\"w..\"" json])
AT_CHECK([GREP -q "\"path\": .\"t_u\": .\"t\", \"u\"., \"t_v\": .\"t\", \"v\"., \"w_u\": .\"w\", \"u\"., \"w_v\": .\"w\", \"v\"" json])
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Wrong preset/postset size])
AT_CHECK([cp TESTFILES/test5a.owfn TESTFILES/test6a.owfn .])
AT_CHECK([PARMIDA -d4096 -P -T test5a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 -P -T test6a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 -pq test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 --ctlx -sq test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Too many tokens])
AT_CHECK([cp TESTFILES/test7b.owfn .])
AT_CHECK([PARMIDA -d4096 test7b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Losing safety])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 --SAFE test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Intersecting pre-/postsets])
AT_CHECK([cp TESTFILES/test7c.owfn .])
AT_CHECK([PARMIDA -d4096 test7c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([A persistent pre- or posttransition])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 -pt test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 -pv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Posttransitions have empty postset])
AT_CHECK([cp TESTFILES/test7d.owfn .])
AT_CHECK([PARMIDA -d4096 test7d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr])
AT_CHECK([PARMIDA -d4096 --bounded test7d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Posttransition has non-singleton preset])
AT_CHECK([cp TESTFILES/test7e.owfn .])
AT_CHECK([PARMIDA -d4096 test7e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 --altlx -sv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --altlx -st test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --altlx -lc test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --altlx -la test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr])
AT_CHECK([PARMIDA -d4096 --altlx -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr])
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test7a.owfn .])
AT_CHECK([PARMIDA -d4096 --altl -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_KEYWORDS(rule7a)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test7a.owfn TESTFILES/test7f.owfn .])
AT_CHECK([PARMIDA -d4096 --bisim -sv test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --bisim -st test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --bisim -ld test7a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr],1)
AT_CHECK([PARMIDA -d4096 --bisim -ld test7f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 4096" stderr])
AT_KEYWORDS(rule7a)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Meld persistent pretransition with posttransitions])
############################################################################

AT_SETUP([Removing the place/transition pair])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --BOUNDED -P -T test8a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 4" owfn])
AT_CHECK([GREP -q "|T|= 3" owfn])
AT_CHECK([GREP -q "|F|= 7" owfn])
AT_CHECK([GREP -q "apply 128" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"bounded\": .\"q\": .\"|\", \".\", \".\"" json])
#AT_CHECK([GREP -q "\"live\": .\"t\": .\"|\", \".\", \".\"" json])
AT_CHECK([GREP -q "\"path\": .\"u\": .\"t\", \"u\"., \"v\": .\"t\", \"v\"" json])
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([More than one preset transition])
AT_CHECK([cp TESTFILES/test8b.owfn .])
AT_CHECK([PARMIDA -d128 -P -T test8b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 -pq test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --ctlx -sq test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Too many tokens])
AT_CHECK([cp TESTFILES/test8c.owfn .])
AT_CHECK([PARMIDA -d128 test8c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Different arc weights])
AT_CHECK([cp TESTFILES/test8d.owfn .])
AT_CHECK([PARMIDA -d128 test8d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Losing safety])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --SAFE test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Intersecting pre-/postsets])
AT_CHECK([cp TESTFILES/test8e.owfn .])
AT_CHECK([PARMIDA -d128 test8e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([A persistent pretransition])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 -pt test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_CHECK([PARMIDA -d128 -pv test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr])
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Pretransition has empty preset])
AT_CHECK([cp TESTFILES/test8f.owfn .])
AT_CHECK([PARMIDA -d128 test8f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Pretransition has non-singleton postset])
AT_CHECK([cp TESTFILES/test8g.owfn .])
AT_CHECK([PARMIDA -d128 test8g.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --altlx -st test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_CHECK([PARMIDA -d128 --altlx -la test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_CHECK([PARMIDA -d128 --altlx -ld test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr])
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --altl -ld test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test8a.owfn .])
AT_CHECK([PARMIDA -d128 --bisim -st test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_CHECK([PARMIDA -d128 --bisim -ld test8a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 128" stderr],1)
AT_KEYWORDS(rule8)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Remove loop place])
############################################################################

AT_SETUP([Removing the place])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d256 -P -T test9a.owfn --path --marking -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 3" owfn])
AT_CHECK([GREP -q "|F|= 1" owfn])
AT_CHECK([GREP -q "apply 256" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json])
AT_CHECK([GREP -q "\"LTL\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"bounded\": .\"p\": true" json])
AT_CHECK([GREP -q "\"marking\": .\"p\": .\".factor.\": 1, \".fixed.\": 2, \"p\": 1" json])
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\": .\"p\": false" json])
AT_KEYWORDS(rule9)
AT_CLEANUP

AT_SETUP([Dead transition])
AT_CHECK([cp TESTFILES/test9c.owfn .])
AT_CHECK([PARMIDA -d256 test9c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 1" owfn])
AT_CHECK([GREP -q "apply 256" stderr])
AT_KEYWORDS(rule9)
AT_CLEANUP

AT_SETUP([Different arc weights])
AT_CHECK([cp TESTFILES/test9b.owfn .])
AT_CHECK([PARMIDA -d256 test9b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 256" stderr],1)
AT_KEYWORDS(rule9)
AT_CLEANUP

AT_SETUP([Different pre-/postset])
AT_CHECK([cp TESTFILES/test9d.owfn .])
AT_CHECK([PARMIDA -d256 test9d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 256" stderr],1)
AT_KEYWORDS(rule9)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d256 -pp test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 256" stderr],1)
AT_KEYWORDS(rule9)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Remove loop transition])
############################################################################

AT_SETUP([Removing the transition])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d512 -P -T test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 2" owfn])
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([GREP -q "|F|= 1" owfn])
AT_CHECK([GREP -q "apply 512" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json],1)
AT_CHECK([GREP -q "\"CTL-X\"" json])
AT_CHECK([GREP -q "\"LTL-X\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"bounded\":" json],1)
AT_CHECK([GREP -q "\"live\":" json],1)
AT_CHECK([GREP -q "\"marking\":" json],1)
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "TRANSITION u" owfn],1)
AT_KEYWORDS(rule9a)
AT_CLEANUP

AT_SETUP([Keeping liveness])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d512 --LIVE -P test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 2" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 3" owfn])
AT_CHECK([GREP -q "apply 512" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL-X\"" json])
AT_CHECK([GREP -q "\"LTL-X\"" json])
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"bounded\":" json],1)
AT_CHECK([GREP -q "\"live\":" json],1)
AT_CHECK([GREP -q "\"marking\":" json],1)
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "TRANSITION t" owfn],1)
AT_CHECK([GREP -q "TRANSITION u" owfn])
AT_KEYWORDS(rule9a)
AT_CLEANUP

AT_SETUP([Different arc weights])
AT_CHECK([cp TESTFILES/test9b.owfn .])
AT_CHECK([PARMIDA -d512 test9b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr])
AT_CHECK([GREP -q "TRANSITION t" owfn],1)
AT_CHECK([GREP -q "TRANSITION u" owfn])
AT_KEYWORDS(rule9a)
AT_CLEANUP

AT_SETUP([Losing action-based LTL-X])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d512 --altlx -st -su test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr],1)
AT_CHECK([PARMIDA -d512 --altlx -la -lb test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr],1)
AT_CHECK([PARMIDA -d512 --altlx -ld test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr])
AT_KEYWORDS(rule9a)
AT_CLEANUP

AT_SETUP([Losing the next operator])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d512 --altl -ld test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr],1)
AT_KEYWORDS(rule9a)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test9a.owfn .])
AT_CHECK([PARMIDA -d512 --bisim -st -su test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr],1)
AT_CHECK([PARMIDA -d512 --bisim -ld test9a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 512" stderr],1)
AT_KEYWORDS(rule9a)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Isolated Transitions])
############################################################################

AT_SETUP([Everything invisible])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 0" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

AT_SETUP([Next operator])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 --ctl test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([PARMIDA -d1024 --altl -ld test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([PARMIDA -d1024 --altl test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 0" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

AT_SETUP([A visible label])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 --altlx -la test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([PARMIDA -d1024 --altl -la test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

AT_SETUP([A visible transition])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 --altlx -st test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([GREP -q "TRANSITION t" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 -pt test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([GREP -q "TRANSITION t" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

AT_SETUP([Bisimulation])
AT_CHECK([cp TESTFILES/test10a.owfn .])
AT_CHECK([PARMIDA -d1024 --bisim test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 0" owfn])
AT_CHECK([PARMIDA -d1024 --bisim -sv test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([PARMIDA -d1024 --bisim -ld test10a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_KEYWORDS(rule10)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Live Transitions])
############################################################################

AT_SETUP([Removing the transition])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 -P -T test11a.owfn --path -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 3" owfn])
AT_CHECK([GREP -q "|F|= 6" owfn])
AT_CHECK([GREP -q "apply 2048" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL-X\"" json])
AT_CHECK([GREP -q "\"LTL-X\"" json])
AT_CHECK([GREP -q "\"deduced properties\": .\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json],1)
AT_CHECK([GREP -q "\"bounded\": .\"p\": false, \"q\": false" json])
AT_CHECK([GREP -q "\"live\": .\"t\": true" json])
AT_CHECK([GREP -q "\"marking\":" json],1)
AT_CHECK([GREP -q "\"path\": .\"u\": .\"t\", \"u\"., \"v\": .\"t\", \"t\", \"v\"., \"w\": .\"t\", \"t\", \"w\"" json])
AT_CHECK([GREP -q "\"safe\": .\"p\": false, \"q\": false" json])
AT_CHECK([GREP -q "TRANSITION t" owfn],1)
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 -pt test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([A visible transition])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 --altlx -st test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_CHECK([PARMIDA -d2048 --altlx -la test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_CHECK([PARMIDA -d2048 --altl -ld test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_CHECK([PARMIDA -d2048 --altlx -ld test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr])
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([Losing Bisimulation])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 --bisim -st test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_CHECK([PARMIDA -d2048 --bisim -ld test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_CHECK([PARMIDA -d2048 --bisim test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr])
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([A persistent postplace])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 -pp test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([A visible postplace])
AT_CHECK([cp TESTFILES/test11a.owfn .])
AT_CHECK([PARMIDA -d2048 --ctlx -sp test11a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_KEYWORDS(rule11)
AT_CLEANUP

AT_SETUP([An output postplace])
AT_CHECK([cp TESTFILES/test11b.owfn .])
AT_CHECK([PARMIDA -d2048 test11b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 2048" stderr],1)
AT_KEYWORDS(rule11)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Series Places])
############################################################################

AT_SETUP([Removing the place/transition pair])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 --SAFE --BOUNDED -P -T --marking test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 0" owfn])
AT_CHECK([GREP -q "|F|= 0" owfn])
AT_CHECK([GREP -q "apply 8192" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL\"" json],1)
AT_CHECK([GREP -q "\"LTL\"" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json])
AT_CHECK([GREP -q "\"bounded\": .\"q\": .\"p\"" json])
AT_CHECK([GREP -q "\"live\":" json],1)
#AT_CHECK([GREP -q "\"marking\": .\".+.\": \"p\"" json])
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\": .\"q\": .\"p\"" json])
AT_CHECK([GREP -q "\"marking\": .\"p\": .\".factor.\": 1, \"p\": 1, \"q\": 1" json])
AT_CHECK([GREP -q "TRANSITION t" owfn],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Next operator])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 --ctl test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --altl -ld test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 -pq test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 -pp test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([A visible place])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 --ctlx -sq test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --ctlx -sp test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([An output place])
AT_CHECK([cp TESTFILES/test12b.owfn .])
AT_CHECK([PARMIDA -d8192 test12b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Tokens on the place])
AT_CHECK([cp TESTFILES/test12c.owfn .])
AT_CHECK([PARMIDA -d8192 test12c.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Wrong arc weight])
AT_CHECK([cp TESTFILES/test12d.owfn TESTFILES/test12h.owfn .])
AT_CHECK([PARMIDA -d8192 test12d.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 test12h.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Too many pretransitions])
AT_CHECK([cp TESTFILES/test12e.owfn .])
AT_CHECK([PARMIDA -d8192 test12e.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Pretransition with non-singleton pre/postset])
AT_CHECK([cp TESTFILES/test12f.owfn TESTFILES/test12g.owfn .])
AT_CHECK([PARMIDA -d8192 test12f.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 test12g.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Persistent pretransition])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 -pt test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Visible pretransition])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d8192 --altlx -st test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --altlx -la test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --altlx -ld test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr])
AT_KEYWORDS(rule12)
AT_CLEANUP

AT_SETUP([Losing bisimulation])
AT_CHECK([cp TESTFILES/test12a.owfn TESTFILES/test12i.owfn .])
AT_CHECK([PARMIDA -d8192 --bisim -st test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --bisim -ld test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_CHECK([PARMIDA -d8192 --bisim test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr])
AT_CHECK([PARMIDA -d8192 --bisim test12i.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 8192" stderr],1)
AT_KEYWORDS(rule12)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Final Place])
############################################################################

AT_SETUP([Removing the place])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d16384 -P -T test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 1" owfn])
AT_CHECK([GREP -q "|T|= 1" owfn])
AT_CHECK([GREP -q "|F|= 1" owfn])
AT_CHECK([GREP -q "apply 16384" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json])
AT_CHECK([GREP -q "\"CTL" json],1)
AT_CHECK([GREP -q "\"LTL" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json],1)
AT_CHECK([GREP -q "\"bounded\"" json],1)
AT_CHECK([GREP -q "\"ALTL\"" json])
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json],1)
AT_CHECK([GREP -q "\"bisimulation\"" json])
AT_CHECK([GREP -q "\"reversibility\"" json],1)
AT_CHECK([GREP -q "\"bounded\":" json],1)
AT_CHECK([GREP -q "\"live\":" json],1)
AT_CHECK([GREP -q "\"marking\":" json],1)
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "TRANSITION t" owfn])
AT_KEYWORDS(rule13)
AT_CLEANUP

AT_SETUP([A persistent place])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d16384 -pq test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16384" stderr],1)
AT_KEYWORDS(rule13)
AT_CLEANUP

AT_SETUP([An output place])
AT_CHECK([cp TESTFILES/test12b.owfn .])
AT_CHECK([PARMIDA -d16384 test12b.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16384" stderr],1)
AT_KEYWORDS(rule13)
AT_CLEANUP

AT_SETUP([Losing Safety])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d16384 --SAFE test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16384" stderr],1)
AT_KEYWORDS(rule13)
AT_CLEANUP

AT_SETUP([Losing CTL/LTL])
AT_CHECK([cp TESTFILES/test12a.owfn .])
AT_CHECK([PARMIDA -d16384 --ctlx -sq test12a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 16384" stderr],1)
AT_KEYWORDS(rule13)
AT_CLEANUP

############################################################################
AT_BANNER([Rule: Final Transition])
############################################################################

AT_SETUP([Removing the transition])
AT_CHECK([cp TESTFILES/test13a.owfn .])
AT_CHECK([PARMIDA -d32768 -P -T test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "|P|= 3" owfn])
AT_CHECK([GREP -q "|T|= 2" owfn])
AT_CHECK([GREP -q "|F|= 4" owfn])
AT_CHECK([GREP -q "apply 32768" stderr])
AT_CHECK([GREP -q "\"non-live\"" json])
AT_CHECK([GREP -q "\"live\"" json],1)
AT_CHECK([GREP -q "\"CTL" json],1)
AT_CHECK([GREP -q "\"LTL" json],1)
AT_CHECK([GREP -q "\"unbounded\"" json])
AT_CHECK([GREP -q "\"bounded\"" json])
AT_CHECK([GREP -q "\"ALTL\"" json],1)
AT_CHECK([GREP -q "\"paths\"" json])
AT_CHECK([GREP -q "\"unsafe\"" json])
AT_CHECK([GREP -q "\"safe\"" json])
AT_CHECK([GREP -q "\"bisimulation\"" json],1)
AT_CHECK([GREP -q "\"reversibility\"" json],1)
AT_CHECK([GREP -q "\"bounded\":" json],1)
AT_CHECK([GREP -q "\"live\":" json],1)
AT_CHECK([GREP -q "\"marking\":" json],1)
AT_CHECK([GREP -q "\"path\":" json],1)
AT_CHECK([GREP -q "\"safe\":" json],1)
AT_CHECK([GREP -q "TRANSITION v" owfn],1)
AT_KEYWORDS(rule14)
AT_CLEANUP

AT_SETUP([A persistent transition])
AT_CHECK([cp TESTFILES/test13a.owfn .])
AT_CHECK([PARMIDA -d32768 -pv test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr],1)
AT_KEYWORDS(rule14)
AT_CLEANUP

AT_SETUP([A visible transition])
AT_CHECK([cp TESTFILES/test13a.owfn .])
AT_CHECK([PARMIDA -d32768 --altlx -sv test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr],1)
AT_CHECK([PARMIDA -d32768 --altlx -lb test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr],1)
AT_CHECK([PARMIDA -d32768 --altlx -la test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr])
AT_KEYWORDS(rule14)
AT_CLEANUP

AT_SETUP([Next operator])
AT_CHECK([cp TESTFILES/test13a.owfn .])
AT_CHECK([PARMIDA -d32768 --altl -la test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr],1)
AT_CHECK([PARMIDA -d32768 --altl test13a.owfn -oowfn --writejson=json],0,stdout,stderr)
AT_CHECK([GREP -q "apply 32768" stderr])
AT_KEYWORDS(rule14)
AT_CLEANUP

